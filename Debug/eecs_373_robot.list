
eecs_373_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005efc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800609c  0800609c  0001609c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800614c  0800614c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800614c  0800614c  0001614c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006154  08006154  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006154  08006154  00016154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006158  08006158  00016158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800615c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  20000074  080061d0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  080061d0  000202b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc2e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001bb2  00000000  00000000  0002dcd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e58  00000000  00000000  0002f888  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000da0  00000000  00000000  000306e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016aca  00000000  00000000  00031480  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009e77  00000000  00000000  00047f4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008ef8c  00000000  00000000  00051dc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e0d4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040c8  00000000  00000000  000e0dc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006084 	.word	0x08006084

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	08006084 	.word	0x08006084

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  enum State state;
  state = ScanLight;
 8000596:	2300      	movs	r3, #0
 8000598:	71fb      	strb	r3, [r7, #7]
  polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800059a:	4bb3      	ldr	r3, [pc, #716]	; (8000868 <main+0x2d8>)
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a0:	f001 fbee 	bl	8001d80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a4:	f000 fa66 	bl	8000a74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a8:	f000 fd84 	bl	80010b4 <MX_GPIO_Init>
  MX_TIM3_Init();
 80005ac:	f000 fbf8 	bl	8000da0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80005b0:	f000 fc6e 	bl	8000e90 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 80005b4:	f000 fd54 	bl	8001060 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005b8:	f000 fac8 	bl	8000b4c <MX_I2C1_Init>
  MX_TIM1_Init();
 80005bc:	f000 faf4 	bl	8000ba8 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005c0:	f000 fb94 	bl	8000cec <MX_TIM2_Init>
  MX_TIM5_Init();
 80005c4:	f000 fcdc 	bl	8000f80 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);			//wheel pwm start
 80005c8:	2104      	movs	r1, #4
 80005ca:	48a8      	ldr	r0, [pc, #672]	; (800086c <main+0x2dc>)
 80005cc:	f003 fb5a 	bl	8003c84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);			//wheel pwm start
 80005d0:	2100      	movs	r1, #0
 80005d2:	48a7      	ldr	r0, [pc, #668]	; (8000870 <main+0x2e0>)
 80005d4:	f003 fb56 	bl	8003c84 <HAL_TIM_PWM_Start>
  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 0);	//wheel pwm set to 0
 80005d8:	4ba4      	ldr	r3, [pc, #656]	; (800086c <main+0x2dc>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	2200      	movs	r2, #0
 80005de:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 0);	//wheel pwm set to 0
 80005e0:	4ba3      	ldr	r3, [pc, #652]	; (8000870 <main+0x2e0>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	2200      	movs	r2, #0
 80005e6:	635a      	str	r2, [r3, #52]	; 0x34

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);			//servo pwm start
 80005e8:	2108      	movs	r1, #8
 80005ea:	48a2      	ldr	r0, [pc, #648]	; (8000874 <main+0x2e4>)
 80005ec:	f003 fb4a 	bl	8003c84 <HAL_TIM_PWM_Start>
  __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_3, 151);	//set servo to 90deg (forward)
 80005f0:	4ba0      	ldr	r3, [pc, #640]	; (8000874 <main+0x2e4>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2297      	movs	r2, #151	; 0x97
 80005f6:	63da      	str	r2, [r3, #60]	; 0x3c
  	  	  	  	  	  	  	  	  	  	  	  	  	//pwm range is 50(0deg) to 253(180deg)

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);			//ultrasonic trigger pwm start
 80005f8:	2108      	movs	r1, #8
 80005fa:	489f      	ldr	r0, [pc, #636]	; (8000878 <main+0x2e8>)
 80005fc:	f003 fb42 	bl	8003c84 <HAL_TIM_PWM_Start>
  __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 0);	//set trigger with no pulse (2=20us pulse)
 8000600:	4b9d      	ldr	r3, [pc, #628]	; (8000878 <main+0x2e8>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	2200      	movs	r2, #0
 8000606:	63da      	str	r2, [r3, #60]	; 0x3c

  HAL_TIM_IC_Start_IT(&htim5, TIM_CHANNEL_2);		//start ultrasonic echo capture timer
 8000608:	2104      	movs	r1, #4
 800060a:	489c      	ldr	r0, [pc, #624]	; (800087c <main+0x2ec>)
 800060c:	f003 fba2 	bl	8003d54 <HAL_TIM_IC_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	switch(state){
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	2b06      	cmp	r3, #6
 8000614:	f200 821f 	bhi.w	8000a56 <main+0x4c6>
 8000618:	a201      	add	r2, pc, #4	; (adr r2, 8000620 <main+0x90>)
 800061a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800061e:	bf00      	nop
 8000620:	0800063d 	.word	0x0800063d
 8000624:	08000683 	.word	0x08000683
 8000628:	080006a7 	.word	0x080006a7
 800062c:	08000711 	.word	0x08000711
 8000630:	080007eb 	.word	0x080007eb
 8000634:	08000831 	.word	0x08000831
 8000638:	080008ad 	.word	0x080008ad
	case ScanLight:			//0
		light_angle = Scan_Region_Brightness();
 800063c:	f000 fef6 	bl	800142c <Scan_Region_Brightness>
 8000640:	4603      	mov	r3, r0
 8000642:	461a      	mov	r2, r3
 8000644:	4b8e      	ldr	r3, [pc, #568]	; (8000880 <main+0x2f0>)
 8000646:	701a      	strb	r2, [r3, #0]
		if(light_angle > 90){
 8000648:	4b8d      	ldr	r3, [pc, #564]	; (8000880 <main+0x2f0>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b5a      	cmp	r3, #90	; 0x5a
 800064e:	d909      	bls.n	8000664 <main+0xd4>
			global_angle = global_angle + (light_angle - 90);
 8000650:	4b8b      	ldr	r3, [pc, #556]	; (8000880 <main+0x2f0>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	f1a3 025a 	sub.w	r2, r3, #90	; 0x5a
 8000658:	4b8a      	ldr	r3, [pc, #552]	; (8000884 <main+0x2f4>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4413      	add	r3, r2
 800065e:	4a89      	ldr	r2, [pc, #548]	; (8000884 <main+0x2f4>)
 8000660:	6013      	str	r3, [r2, #0]
 8000662:	e00b      	b.n	800067c <main+0xec>
		}
		else if(light_angle < 90){
 8000664:	4b86      	ldr	r3, [pc, #536]	; (8000880 <main+0x2f0>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b59      	cmp	r3, #89	; 0x59
 800066a:	d807      	bhi.n	800067c <main+0xec>
			global_angle = global_angle - (light_angle - 90);
 800066c:	4b85      	ldr	r3, [pc, #532]	; (8000884 <main+0x2f4>)
 800066e:	681a      	ldr	r2, [r3, #0]
 8000670:	4b83      	ldr	r3, [pc, #524]	; (8000880 <main+0x2f0>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	3b5a      	subs	r3, #90	; 0x5a
 8000676:	1ad3      	subs	r3, r2, r3
 8000678:	4a82      	ldr	r2, [pc, #520]	; (8000884 <main+0x2f4>)
 800067a:	6013      	str	r3, [r2, #0]
		}
		state = FaceLight;
 800067c:	2301      	movs	r3, #1
 800067e:	71fb      	strb	r3, [r7, #7]
		break;
 8000680:	e1ec      	b.n	8000a5c <main+0x4cc>

	case FaceLight:			//1
		Turn_To_Face(light_angle);
 8000682:	4b7f      	ldr	r3, [pc, #508]	; (8000880 <main+0x2f0>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	4618      	mov	r0, r3
 8000688:	f000 fe1a 	bl	80012c0 <Turn_To_Face>
		Set_Angle(90, SERVO_MAX, SERVO_MIN);
 800068c:	2246      	movs	r2, #70	; 0x46
 800068e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8000692:	205a      	movs	r0, #90	; 0x5a
 8000694:	f000 ff74 	bl	8001580 <Set_Angle>
		HAL_Delay(1000);	//wait for servo to turn
 8000698:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800069c:	f001 fbe2 	bl	8001e64 <HAL_Delay>
		state = DriveToLight;
 80006a0:	2302      	movs	r3, #2
 80006a2:	71fb      	strb	r3, [r7, #7]
		break;
 80006a4:	e1da      	b.n	8000a5c <main+0x4cc>

	case DriveToLight:		//2
		__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 2);	//set trigger with 20us pulse)
 80006a6:	4b74      	ldr	r3, [pc, #464]	; (8000878 <main+0x2e8>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	2202      	movs	r2, #2
 80006ac:	63da      	str	r2, [r3, #60]	; 0x3c
		if(watchdog == 0){
 80006ae:	4b76      	ldr	r3, [pc, #472]	; (8000888 <main+0x2f8>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d10b      	bne.n	80006ce <main+0x13e>
			Stop_Moving();
 80006b6:	f000 fdef 	bl	8001298 <Stop_Moving>
			watchdog = WATCHDOG;
 80006ba:	4b73      	ldr	r3, [pc, #460]	; (8000888 <main+0x2f8>)
 80006bc:	4a73      	ldr	r2, [pc, #460]	; (800088c <main+0x2fc>)
 80006be:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 0);	//set trigger with 20us pulse)
 80006c0:	4b6d      	ldr	r3, [pc, #436]	; (8000878 <main+0x2e8>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2200      	movs	r2, #0
 80006c6:	63da      	str	r2, [r3, #60]	; 0x3c
			state = ScanLight;
 80006c8:	2300      	movs	r3, #0
 80006ca:	71fb      	strb	r3, [r7, #7]
			break;
 80006cc:	e1c6      	b.n	8000a5c <main+0x4cc>
		}

		if(distance < 8 && watchdog < (uint32_t)(0.97*WATCHDOG)){
 80006ce:	4b70      	ldr	r3, [pc, #448]	; (8000890 <main+0x300>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	2b07      	cmp	r3, #7
 80006d4:	d810      	bhi.n	80006f8 <main+0x168>
 80006d6:	4b6c      	ldr	r3, [pc, #432]	; (8000888 <main+0x2f8>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	4a6e      	ldr	r2, [pc, #440]	; (8000894 <main+0x304>)
 80006dc:	4293      	cmp	r3, r2
 80006de:	d80b      	bhi.n	80006f8 <main+0x168>
			Stop_Moving();
 80006e0:	f000 fdda 	bl	8001298 <Stop_Moving>
			__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 0);	//set trigger with 20us pulse)
 80006e4:	4b64      	ldr	r3, [pc, #400]	; (8000878 <main+0x2e8>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2200      	movs	r2, #0
 80006ea:	63da      	str	r2, [r3, #60]	; 0x3c
			state = ObstacleDetected;
 80006ec:	2303      	movs	r3, #3
 80006ee:	71fb      	strb	r3, [r7, #7]
			watchdog = WATCHDOG;
 80006f0:	4b65      	ldr	r3, [pc, #404]	; (8000888 <main+0x2f8>)
 80006f2:	4a66      	ldr	r2, [pc, #408]	; (800088c <main+0x2fc>)
 80006f4:	601a      	str	r2, [r3, #0]
			break;
 80006f6:	e1b1      	b.n	8000a5c <main+0x4cc>
		}
		Move_Forward(1000, 200, 1);
 80006f8:	2201      	movs	r2, #1
 80006fa:	21c8      	movs	r1, #200	; 0xc8
 80006fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000700:	f000 fd4a 	bl	8001198 <Move_Forward>
		watchdog = watchdog - 1;
 8000704:	4b60      	ldr	r3, [pc, #384]	; (8000888 <main+0x2f8>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	3b01      	subs	r3, #1
 800070a:	4a5f      	ldr	r2, [pc, #380]	; (8000888 <main+0x2f8>)
 800070c:	6013      	str	r3, [r2, #0]
		break;
 800070e:	e1a5      	b.n	8000a5c <main+0x4cc>

	case ObstacleDetected:	//3
		// look right and take the distance measurement
		Set_Angle(180, SERVO_MAX, SERVO_MIN);
 8000710:	2246      	movs	r2, #70	; 0x46
 8000712:	f44f 7182 	mov.w	r1, #260	; 0x104
 8000716:	20b4      	movs	r0, #180	; 0xb4
 8000718:	f000 ff32 	bl	8001580 <Set_Angle>
		HAL_Delay(1000);	// wait for servo to turn
 800071c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000720:	f001 fba0 	bl	8001e64 <HAL_Delay>
		Read_Distance(2);	// read distance twice to protect against errors
 8000724:	2002      	movs	r0, #2
 8000726:	f000 ffd5 	bl	80016d4 <Read_Distance>
		right_dist = distance;
 800072a:	4b59      	ldr	r3, [pc, #356]	; (8000890 <main+0x300>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4a5a      	ldr	r2, [pc, #360]	; (8000898 <main+0x308>)
 8000730:	6013      	str	r3, [r2, #0]

		// look left and take the distance measurement
		Set_Angle(0, SERVO_MAX, SERVO_MIN);
 8000732:	2246      	movs	r2, #70	; 0x46
 8000734:	f44f 7182 	mov.w	r1, #260	; 0x104
 8000738:	2000      	movs	r0, #0
 800073a:	f000 ff21 	bl	8001580 <Set_Angle>
		HAL_Delay(1000);	// wait for servo to turn
 800073e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000742:	f001 fb8f 	bl	8001e64 <HAL_Delay>
		Read_Distance(2);	// read distance twice to protect against errors
 8000746:	2002      	movs	r0, #2
 8000748:	f000 ffc4 	bl	80016d4 <Read_Distance>
		left_dist = distance;
 800074c:	4b50      	ldr	r3, [pc, #320]	; (8000890 <main+0x300>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a52      	ldr	r2, [pc, #328]	; (800089c <main+0x30c>)
 8000752:	6013      	str	r3, [r2, #0]

		// case if the right is more open
		if(right_dist > 10 && right_dist > left_dist){
 8000754:	4b50      	ldr	r3, [pc, #320]	; (8000898 <main+0x308>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2b0a      	cmp	r3, #10
 800075a:	d90e      	bls.n	800077a <main+0x1ea>
 800075c:	4b4e      	ldr	r3, [pc, #312]	; (8000898 <main+0x308>)
 800075e:	681a      	ldr	r2, [r3, #0]
 8000760:	4b4e      	ldr	r3, [pc, #312]	; (800089c <main+0x30c>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	429a      	cmp	r2, r3
 8000766:	d908      	bls.n	800077a <main+0x1ea>
			Turn_To_Face(150);
 8000768:	2096      	movs	r0, #150	; 0x96
 800076a:	f000 fda9 	bl	80012c0 <Turn_To_Face>
			state = InchForward;
 800076e:	2306      	movs	r3, #6
 8000770:	71fb      	strb	r3, [r7, #7]
			went_right = 1;
 8000772:	4b4b      	ldr	r3, [pc, #300]	; (80008a0 <main+0x310>)
 8000774:	2201      	movs	r2, #1
 8000776:	701a      	strb	r2, [r3, #0]
			break;
 8000778:	e170      	b.n	8000a5c <main+0x4cc>
		}
		// case if the left is more open
		if(left_dist > 10 && left_dist > right_dist){
 800077a:	4b48      	ldr	r3, [pc, #288]	; (800089c <main+0x30c>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	2b0a      	cmp	r3, #10
 8000780:	d90e      	bls.n	80007a0 <main+0x210>
 8000782:	4b46      	ldr	r3, [pc, #280]	; (800089c <main+0x30c>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	4b44      	ldr	r3, [pc, #272]	; (8000898 <main+0x308>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	429a      	cmp	r2, r3
 800078c:	d908      	bls.n	80007a0 <main+0x210>
			Turn_To_Face(25);
 800078e:	2019      	movs	r0, #25
 8000790:	f000 fd96 	bl	80012c0 <Turn_To_Face>
			state = InchForward;
 8000794:	2306      	movs	r3, #6
 8000796:	71fb      	strb	r3, [r7, #7]
			went_left = 1;
 8000798:	4b42      	ldr	r3, [pc, #264]	; (80008a4 <main+0x314>)
 800079a:	2201      	movs	r2, #1
 800079c:	701a      	strb	r2, [r3, #0]
			break;
 800079e:	e15d      	b.n	8000a5c <main+0x4cc>
		}

		// case if the right and left are both blocked
		Turn_To_Face(150);
 80007a0:	2096      	movs	r0, #150	; 0x96
 80007a2:	f000 fd8d 	bl	80012c0 <Turn_To_Face>
		Turn_To_Face(150);	// make two 90deg turns
 80007a6:	2096      	movs	r0, #150	; 0x96
 80007a8:	f000 fd8a 	bl	80012c0 <Turn_To_Face>
		Read_Distance(2);	// read distance twice to protect against errors
 80007ac:	2002      	movs	r0, #2
 80007ae:	f000 ff91 	bl	80016d4 <Read_Distance>

		// case if area behind is also blocked
		// turn back to face front and restart state machine
		if(distance < 10){
 80007b2:	4b37      	ldr	r3, [pc, #220]	; (8000890 <main+0x300>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	2b09      	cmp	r3, #9
 80007b8:	d808      	bhi.n	80007cc <main+0x23c>
			Turn_To_Face(150);
 80007ba:	2096      	movs	r0, #150	; 0x96
 80007bc:	f000 fd80 	bl	80012c0 <Turn_To_Face>
			Turn_To_Face(150);	// make two 90deg turns
 80007c0:	2096      	movs	r0, #150	; 0x96
 80007c2:	f000 fd7d 	bl	80012c0 <Turn_To_Face>
			state = ScanLight;
 80007c6:	2300      	movs	r3, #0
 80007c8:	71fb      	strb	r3, [r7, #7]
			break;
 80007ca:	e147      	b.n	8000a5c <main+0x4cc>
		}

		// otherwise drive away from obstacles and look for clear space
		Move_Forward(2000, 200, 0);
 80007cc:	2200      	movs	r2, #0
 80007ce:	21c8      	movs	r1, #200	; 0xc8
 80007d0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80007d4:	f000 fce0 	bl	8001198 <Move_Forward>
		Turn_To_Face(150);
 80007d8:	2096      	movs	r0, #150	; 0x96
 80007da:	f000 fd71 	bl	80012c0 <Turn_To_Face>
		Turn_To_Face(150);	// make two 90deg turns
 80007de:	2096      	movs	r0, #150	; 0x96
 80007e0:	f000 fd6e 	bl	80012c0 <Turn_To_Face>
		state = ScanAvoidance;
 80007e4:	2304      	movs	r3, #4
 80007e6:	71fb      	strb	r3, [r7, #7]
		break;
 80007e8:	e138      	b.n	8000a5c <main+0x4cc>

	case ScanAvoidance:		//4
		clear_angle = Scan_Region_Obstacles();
 80007ea:	f000 fd8f 	bl	800130c <Scan_Region_Obstacles>
 80007ee:	4603      	mov	r3, r0
 80007f0:	461a      	mov	r2, r3
 80007f2:	4b2d      	ldr	r3, [pc, #180]	; (80008a8 <main+0x318>)
 80007f4:	701a      	strb	r2, [r3, #0]
		if(clear_angle > 90){
 80007f6:	4b2c      	ldr	r3, [pc, #176]	; (80008a8 <main+0x318>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	2b5a      	cmp	r3, #90	; 0x5a
 80007fc:	d909      	bls.n	8000812 <main+0x282>
			global_angle = global_angle + (clear_angle - 90);
 80007fe:	4b2a      	ldr	r3, [pc, #168]	; (80008a8 <main+0x318>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	f1a3 025a 	sub.w	r2, r3, #90	; 0x5a
 8000806:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <main+0x2f4>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4413      	add	r3, r2
 800080c:	4a1d      	ldr	r2, [pc, #116]	; (8000884 <main+0x2f4>)
 800080e:	6013      	str	r3, [r2, #0]
 8000810:	e00b      	b.n	800082a <main+0x29a>
		}
		else if(clear_angle < 90){
 8000812:	4b25      	ldr	r3, [pc, #148]	; (80008a8 <main+0x318>)
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	2b59      	cmp	r3, #89	; 0x59
 8000818:	d807      	bhi.n	800082a <main+0x29a>
			global_angle = global_angle - (clear_angle - 90);
 800081a:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <main+0x2f4>)
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	4b22      	ldr	r3, [pc, #136]	; (80008a8 <main+0x318>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	3b5a      	subs	r3, #90	; 0x5a
 8000824:	1ad3      	subs	r3, r2, r3
 8000826:	4a17      	ldr	r2, [pc, #92]	; (8000884 <main+0x2f4>)
 8000828:	6013      	str	r3, [r2, #0]
		}

		state = FaceClearPath;
 800082a:	2305      	movs	r3, #5
 800082c:	71fb      	strb	r3, [r7, #7]
		break;
 800082e:	e115      	b.n	8000a5c <main+0x4cc>

	case FaceClearPath:		//5
		Turn_To_Face(clear_angle);
 8000830:	4b1d      	ldr	r3, [pc, #116]	; (80008a8 <main+0x318>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	4618      	mov	r0, r3
 8000836:	f000 fd43 	bl	80012c0 <Turn_To_Face>
		Set_Angle(90, SERVO_MAX, SERVO_MIN);
 800083a:	2246      	movs	r2, #70	; 0x46
 800083c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8000840:	205a      	movs	r0, #90	; 0x5a
 8000842:	f000 fe9d 	bl	8001580 <Set_Angle>
		HAL_Delay(1000);
 8000846:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800084a:	f001 fb0b 	bl	8001e64 <HAL_Delay>

		Read_Distance(1);
 800084e:	2001      	movs	r0, #1
 8000850:	f000 ff40 	bl	80016d4 <Read_Distance>
		if(distance < 10){
 8000854:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <main+0x300>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	2b09      	cmp	r3, #9
 800085a:	d802      	bhi.n	8000862 <main+0x2d2>
			state = ObstacleDetected;
 800085c:	2303      	movs	r3, #3
 800085e:	71fb      	strb	r3, [r7, #7]
			break;
 8000860:	e0fc      	b.n	8000a5c <main+0x4cc>
		}

		state = InchForward;
 8000862:	2306      	movs	r3, #6
 8000864:	71fb      	strb	r3, [r7, #7]
		break;
 8000866:	e0f9      	b.n	8000a5c <main+0x4cc>
 8000868:	200000b4 	.word	0x200000b4
 800086c:	200001b0 	.word	0x200001b0
 8000870:	200000dc 	.word	0x200000dc
 8000874:	200001f0 	.word	0x200001f0
 8000878:	20000230 	.word	0x20000230
 800087c:	20000170 	.word	0x20000170
 8000880:	200000b8 	.word	0x200000b8
 8000884:	200000bc 	.word	0x200000bc
 8000888:	20000000 	.word	0x20000000
 800088c:	002625a0 	.word	0x002625a0
 8000890:	200000b0 	.word	0x200000b0
 8000894:	002500a7 	.word	0x002500a7
 8000898:	200000c0 	.word	0x200000c0
 800089c:	200000c4 	.word	0x200000c4
 80008a0:	200000c8 	.word	0x200000c8
 80008a4:	200000c9 	.word	0x200000c9
 80008a8:	200000b9 	.word	0x200000b9

	case InchForward:		//6
		// case if the robot is going right or left to avoid obstacles
		if(went_right == 1 || went_left == 1){
 80008ac:	4b6c      	ldr	r3, [pc, #432]	; (8000a60 <main+0x4d0>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d104      	bne.n	80008be <main+0x32e>
 80008b4:	4b6b      	ldr	r3, [pc, #428]	; (8000a64 <main+0x4d4>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	f000 8094 	beq.w	80009e6 <main+0x456>
			// look to the obstacle and check the distance
			inch_counter = 0;
 80008be:	4b6a      	ldr	r3, [pc, #424]	; (8000a68 <main+0x4d8>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
			Set_Angle(180*went_left, SERVO_MAX, SERVO_MIN);	// look right if went_left else look left
 80008c4:	4b67      	ldr	r3, [pc, #412]	; (8000a64 <main+0x4d4>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	461a      	mov	r2, r3
 80008ca:	0052      	lsls	r2, r2, #1
 80008cc:	4413      	add	r3, r2
 80008ce:	461a      	mov	r2, r3
 80008d0:	0112      	lsls	r2, r2, #4
 80008d2:	1ad3      	subs	r3, r2, r3
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	2246      	movs	r2, #70	; 0x46
 80008da:	f44f 7182 	mov.w	r1, #260	; 0x104
 80008de:	4618      	mov	r0, r3
 80008e0:	f000 fe4e 	bl	8001580 <Set_Angle>
			HAL_Delay(50);
 80008e4:	2032      	movs	r0, #50	; 0x32
 80008e6:	f001 fabd 	bl	8001e64 <HAL_Delay>
			Read_Distance(2);
 80008ea:	2002      	movs	r0, #2
 80008ec:	f000 fef2 	bl	80016d4 <Read_Distance>

			// run loop a max of 4 times to check distances and keep inching forward
			// otherwise reset to the ObstacleDetected state
			while(distance < 10){
 80008f0:	e050      	b.n	8000994 <main+0x404>
				if(inch_counter == 4){
 80008f2:	4b5d      	ldr	r3, [pc, #372]	; (8000a68 <main+0x4d8>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	2b04      	cmp	r3, #4
 80008f8:	d10c      	bne.n	8000914 <main+0x384>
					state = ObstacleDetected;
 80008fa:	2303      	movs	r3, #3
 80008fc:	71fb      	strb	r3, [r7, #7]
					inch_counter = 0;
 80008fe:	4b5a      	ldr	r3, [pc, #360]	; (8000a68 <main+0x4d8>)
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
					went_right = went_left = 0;
 8000904:	4b57      	ldr	r3, [pc, #348]	; (8000a64 <main+0x4d4>)
 8000906:	2200      	movs	r2, #0
 8000908:	701a      	strb	r2, [r3, #0]
 800090a:	4b56      	ldr	r3, [pc, #344]	; (8000a64 <main+0x4d4>)
 800090c:	781a      	ldrb	r2, [r3, #0]
 800090e:	4b54      	ldr	r3, [pc, #336]	; (8000a60 <main+0x4d0>)
 8000910:	701a      	strb	r2, [r3, #0]
					break;
 8000912:	e043      	b.n	800099c <main+0x40c>
				}
				// inch forward and check the distance in front of the robot
				Move_Forward(1000, 150, 0);
 8000914:	2200      	movs	r2, #0
 8000916:	2196      	movs	r1, #150	; 0x96
 8000918:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800091c:	f000 fc3c 	bl	8001198 <Move_Forward>
				Set_Angle(90, SERVO_MAX, SERVO_MIN);
 8000920:	2246      	movs	r2, #70	; 0x46
 8000922:	f44f 7182 	mov.w	r1, #260	; 0x104
 8000926:	205a      	movs	r0, #90	; 0x5a
 8000928:	f000 fe2a 	bl	8001580 <Set_Angle>
				HAL_Delay(1000);
 800092c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000930:	f001 fa98 	bl	8001e64 <HAL_Delay>
				Read_Distance(3);
 8000934:	2003      	movs	r0, #3
 8000936:	f000 fecd 	bl	80016d4 <Read_Distance>

				// case if there is an obstacle detected in front of the robot
				// go back to ObstacleDetected state
				if(distance < 10){
 800093a:	4b4c      	ldr	r3, [pc, #304]	; (8000a6c <main+0x4dc>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	2b09      	cmp	r3, #9
 8000940:	d80c      	bhi.n	800095c <main+0x3cc>
					state = ObstacleDetected;
 8000942:	2303      	movs	r3, #3
 8000944:	71fb      	strb	r3, [r7, #7]
					inch_counter = 0;
 8000946:	4b48      	ldr	r3, [pc, #288]	; (8000a68 <main+0x4d8>)
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
					went_right = went_left = 0;
 800094c:	4b45      	ldr	r3, [pc, #276]	; (8000a64 <main+0x4d4>)
 800094e:	2200      	movs	r2, #0
 8000950:	701a      	strb	r2, [r3, #0]
 8000952:	4b44      	ldr	r3, [pc, #272]	; (8000a64 <main+0x4d4>)
 8000954:	781a      	ldrb	r2, [r3, #0]
 8000956:	4b42      	ldr	r3, [pc, #264]	; (8000a60 <main+0x4d0>)
 8000958:	701a      	strb	r2, [r3, #0]
					break;
 800095a:	e01f      	b.n	800099c <main+0x40c>
				}

				// turn back to face original obstacle and update distance
				Set_Angle(180*went_left, SERVO_MAX, SERVO_MIN);	// look right if went_left else look left
 800095c:	4b41      	ldr	r3, [pc, #260]	; (8000a64 <main+0x4d4>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	461a      	mov	r2, r3
 8000962:	0052      	lsls	r2, r2, #1
 8000964:	4413      	add	r3, r2
 8000966:	461a      	mov	r2, r3
 8000968:	0112      	lsls	r2, r2, #4
 800096a:	1ad3      	subs	r3, r2, r3
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	b2db      	uxtb	r3, r3
 8000970:	2246      	movs	r2, #70	; 0x46
 8000972:	f44f 7182 	mov.w	r1, #260	; 0x104
 8000976:	4618      	mov	r0, r3
 8000978:	f000 fe02 	bl	8001580 <Set_Angle>
				HAL_Delay(1000);
 800097c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000980:	f001 fa70 	bl	8001e64 <HAL_Delay>
				Read_Distance(3);
 8000984:	2003      	movs	r0, #3
 8000986:	f000 fea5 	bl	80016d4 <Read_Distance>
				inch_counter = inch_counter + 1;
 800098a:	4b37      	ldr	r3, [pc, #220]	; (8000a68 <main+0x4d8>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	3301      	adds	r3, #1
 8000990:	4a35      	ldr	r2, [pc, #212]	; (8000a68 <main+0x4d8>)
 8000992:	6013      	str	r3, [r2, #0]
			while(distance < 10){
 8000994:	4b35      	ldr	r3, [pc, #212]	; (8000a6c <main+0x4dc>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	2b09      	cmp	r3, #9
 800099a:	d9aa      	bls.n	80008f2 <main+0x362>
			}

			// obstacle was cleared!
			// inch forward one more time to make entire robot clear obstacle
			// move on to re-scan the area for light source
			Move_Forward(1200, 150, 0);
 800099c:	2200      	movs	r2, #0
 800099e:	2196      	movs	r1, #150	; 0x96
 80009a0:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80009a4:	f000 fbf8 	bl	8001198 <Move_Forward>
			if(went_right){
 80009a8:	4b2d      	ldr	r3, [pc, #180]	; (8000a60 <main+0x4d0>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d003      	beq.n	80009b8 <main+0x428>
				Turn_To_Face(22);
 80009b0:	2016      	movs	r0, #22
 80009b2:	f000 fc85 	bl	80012c0 <Turn_To_Face>
 80009b6:	e006      	b.n	80009c6 <main+0x436>
			}
			else if(went_left){
 80009b8:	4b2a      	ldr	r3, [pc, #168]	; (8000a64 <main+0x4d4>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d002      	beq.n	80009c6 <main+0x436>
				Turn_To_Face(165);
 80009c0:	20a5      	movs	r0, #165	; 0xa5
 80009c2:	f000 fc7d 	bl	80012c0 <Turn_To_Face>
			}
			Set_Angle(90, SERVO_MAX, SERVO_MIN);
 80009c6:	2246      	movs	r2, #70	; 0x46
 80009c8:	f44f 7182 	mov.w	r1, #260	; 0x104
 80009cc:	205a      	movs	r0, #90	; 0x5a
 80009ce:	f000 fdd7 	bl	8001580 <Set_Angle>
			state = ScanLight;
 80009d2:	2300      	movs	r3, #0
 80009d4:	71fb      	strb	r3, [r7, #7]
			went_right = went_left = 0;
 80009d6:	4b23      	ldr	r3, [pc, #140]	; (8000a64 <main+0x4d4>)
 80009d8:	2200      	movs	r2, #0
 80009da:	701a      	strb	r2, [r3, #0]
 80009dc:	4b21      	ldr	r3, [pc, #132]	; (8000a64 <main+0x4d4>)
 80009de:	781a      	ldrb	r2, [r3, #0]
 80009e0:	4b1f      	ldr	r3, [pc, #124]	; (8000a60 <main+0x4d0>)
 80009e2:	701a      	strb	r2, [r3, #0]
			else{
				//cleared object
				state = ScanLight;
			}
		}
		break;
 80009e4:	e03a      	b.n	8000a5c <main+0x4cc>
			Move_Forward(1000, 150, 0);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2196      	movs	r1, #150	; 0x96
 80009ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009ee:	f000 fbd3 	bl	8001198 <Move_Forward>
			if(clear_angle > 90){
 80009f2:	4b1f      	ldr	r3, [pc, #124]	; (8000a70 <main+0x4e0>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b5a      	cmp	r3, #90	; 0x5a
 80009f8:	d90c      	bls.n	8000a14 <main+0x484>
				Set_Angle((180-clear_angle), SERVO_MAX, SERVO_MIN);
 80009fa:	4b1d      	ldr	r3, [pc, #116]	; (8000a70 <main+0x4e0>)
 80009fc:	781a      	ldrb	r2, [r3, #0]
 80009fe:	f06f 034b 	mvn.w	r3, #75	; 0x4b
 8000a02:	1a9b      	subs	r3, r3, r2
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	2246      	movs	r2, #70	; 0x46
 8000a08:	f44f 7182 	mov.w	r1, #260	; 0x104
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f000 fdb7 	bl	8001580 <Set_Angle>
 8000a12:	e00f      	b.n	8000a34 <main+0x4a4>
			else if(clear_angle < 90){
 8000a14:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <main+0x4e0>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b59      	cmp	r3, #89	; 0x59
 8000a1a:	d80b      	bhi.n	8000a34 <main+0x4a4>
				Set_Angle((180-clear_angle), SERVO_MAX, SERVO_MIN);
 8000a1c:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <main+0x4e0>)
 8000a1e:	781a      	ldrb	r2, [r3, #0]
 8000a20:	f06f 034b 	mvn.w	r3, #75	; 0x4b
 8000a24:	1a9b      	subs	r3, r3, r2
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	2246      	movs	r2, #70	; 0x46
 8000a2a:	f44f 7182 	mov.w	r1, #260	; 0x104
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f000 fda6 	bl	8001580 <Set_Angle>
			HAL_Delay(1000);
 8000a34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a38:	f001 fa14 	bl	8001e64 <HAL_Delay>
			Read_Distance(1);
 8000a3c:	2001      	movs	r0, #1
 8000a3e:	f000 fe49 	bl	80016d4 <Read_Distance>
			if(distance < 6){
 8000a42:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <main+0x4dc>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	2b05      	cmp	r3, #5
 8000a48:	d802      	bhi.n	8000a50 <main+0x4c0>
				state = ObstacleDetected;
 8000a4a:	2303      	movs	r3, #3
 8000a4c:	71fb      	strb	r3, [r7, #7]
		break;
 8000a4e:	e005      	b.n	8000a5c <main+0x4cc>
				state = ScanLight;
 8000a50:	2300      	movs	r3, #0
 8000a52:	71fb      	strb	r3, [r7, #7]
		break;
 8000a54:	e002      	b.n	8000a5c <main+0x4cc>

	default:
		state = ScanLight;
 8000a56:	2300      	movs	r3, #0
 8000a58:	71fb      	strb	r3, [r7, #7]
		break;
 8000a5a:	bf00      	nop
	switch(state){
 8000a5c:	e5d8      	b.n	8000610 <main+0x80>
 8000a5e:	bf00      	nop
 8000a60:	200000c8 	.word	0x200000c8
 8000a64:	200000c9 	.word	0x200000c9
 8000a68:	200000cc 	.word	0x200000cc
 8000a6c:	200000b0 	.word	0x200000b0
 8000a70:	200000b9 	.word	0x200000b9

08000a74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b094      	sub	sp, #80	; 0x50
 8000a78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7a:	f107 0320 	add.w	r3, r7, #32
 8000a7e:	2230      	movs	r2, #48	; 0x30
 8000a80:	2100      	movs	r1, #0
 8000a82:	4618      	mov	r0, r3
 8000a84:	f004 fef0 	bl	8005868 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a88:	f107 030c 	add.w	r3, r7, #12
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a98:	2300      	movs	r3, #0
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	4b29      	ldr	r3, [pc, #164]	; (8000b44 <SystemClock_Config+0xd0>)
 8000a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa0:	4a28      	ldr	r2, [pc, #160]	; (8000b44 <SystemClock_Config+0xd0>)
 8000aa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa8:	4b26      	ldr	r3, [pc, #152]	; (8000b44 <SystemClock_Config+0xd0>)
 8000aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ab0:	60bb      	str	r3, [r7, #8]
 8000ab2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	4b23      	ldr	r3, [pc, #140]	; (8000b48 <SystemClock_Config+0xd4>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ac0:	4a21      	ldr	r2, [pc, #132]	; (8000b48 <SystemClock_Config+0xd4>)
 8000ac2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ac6:	6013      	str	r3, [r2, #0]
 8000ac8:	4b1f      	ldr	r3, [pc, #124]	; (8000b48 <SystemClock_Config+0xd4>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ad0:	607b      	str	r3, [r7, #4]
 8000ad2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000adc:	2310      	movs	r3, #16
 8000ade:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ae8:	2310      	movs	r3, #16
 8000aea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000aec:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000af0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000af2:	2304      	movs	r3, #4
 8000af4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000af6:	2307      	movs	r3, #7
 8000af8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000afa:	f107 0320 	add.w	r3, r7, #32
 8000afe:	4618      	mov	r0, r3
 8000b00:	f002 fc08 	bl	8003314 <HAL_RCC_OscConfig>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b0a:	f000 fe73 	bl	80017f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b0e:	230f      	movs	r3, #15
 8000b10:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b12:	2302      	movs	r3, #2
 8000b14:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b16:	2300      	movs	r3, #0
 8000b18:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b1e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b24:	f107 030c 	add.w	r3, r7, #12
 8000b28:	2102      	movs	r1, #2
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f002 fe62 	bl	80037f4 <HAL_RCC_ClockConfig>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000b36:	f000 fe5d 	bl	80017f4 <Error_Handler>
  }
}
 8000b3a:	bf00      	nop
 8000b3c:	3750      	adds	r7, #80	; 0x50
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40007000 	.word	0x40007000

08000b4c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <MX_I2C1_Init+0x50>)
 8000b52:	4a13      	ldr	r2, [pc, #76]	; (8000ba0 <MX_I2C1_Init+0x54>)
 8000b54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <MX_I2C1_Init+0x50>)
 8000b58:	4a12      	ldr	r2, [pc, #72]	; (8000ba4 <MX_I2C1_Init+0x58>)
 8000b5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <MX_I2C1_Init+0x50>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <MX_I2C1_Init+0x50>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <MX_I2C1_Init+0x50>)
 8000b6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b6e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b70:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <MX_I2C1_Init+0x50>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <MX_I2C1_Init+0x50>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b7c:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <MX_I2C1_Init+0x50>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <MX_I2C1_Init+0x50>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b88:	4804      	ldr	r0, [pc, #16]	; (8000b9c <MX_I2C1_Init+0x50>)
 8000b8a:	f001 fc3b 	bl	8002404 <HAL_I2C_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b94:	f000 fe2e 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	2000011c 	.word	0x2000011c
 8000ba0:	40005400 	.word	0x40005400
 8000ba4:	000186a0 	.word	0x000186a0

08000ba8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b096      	sub	sp, #88	; 0x58
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bae:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bbc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]
 8000bce:	605a      	str	r2, [r3, #4]
 8000bd0:	609a      	str	r2, [r3, #8]
 8000bd2:	60da      	str	r2, [r3, #12]
 8000bd4:	611a      	str	r2, [r3, #16]
 8000bd6:	615a      	str	r2, [r3, #20]
 8000bd8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	2220      	movs	r2, #32
 8000bde:	2100      	movs	r1, #0
 8000be0:	4618      	mov	r0, r3
 8000be2:	f004 fe41 	bl	8005868 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000be6:	4b3f      	ldr	r3, [pc, #252]	; (8000ce4 <MX_TIM1_Init+0x13c>)
 8000be8:	4a3f      	ldr	r2, [pc, #252]	; (8000ce8 <MX_TIM1_Init+0x140>)
 8000bea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 840;
 8000bec:	4b3d      	ldr	r3, [pc, #244]	; (8000ce4 <MX_TIM1_Init+0x13c>)
 8000bee:	f44f 7252 	mov.w	r2, #840	; 0x348
 8000bf2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bf4:	4b3b      	ldr	r3, [pc, #236]	; (8000ce4 <MX_TIM1_Init+0x13c>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2000;
 8000bfa:	4b3a      	ldr	r3, [pc, #232]	; (8000ce4 <MX_TIM1_Init+0x13c>)
 8000bfc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000c00:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c02:	4b38      	ldr	r3, [pc, #224]	; (8000ce4 <MX_TIM1_Init+0x13c>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c08:	4b36      	ldr	r3, [pc, #216]	; (8000ce4 <MX_TIM1_Init+0x13c>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c0e:	4b35      	ldr	r3, [pc, #212]	; (8000ce4 <MX_TIM1_Init+0x13c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c14:	4833      	ldr	r0, [pc, #204]	; (8000ce4 <MX_TIM1_Init+0x13c>)
 8000c16:	f002 ffdf 	bl	8003bd8 <HAL_TIM_Base_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000c20:	f000 fde8 	bl	80017f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c28:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c2a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000c2e:	4619      	mov	r1, r3
 8000c30:	482c      	ldr	r0, [pc, #176]	; (8000ce4 <MX_TIM1_Init+0x13c>)
 8000c32:	f003 fb61 	bl	80042f8 <HAL_TIM_ConfigClockSource>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000c3c:	f000 fdda 	bl	80017f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c40:	4828      	ldr	r0, [pc, #160]	; (8000ce4 <MX_TIM1_Init+0x13c>)
 8000c42:	f002 fff4 	bl	8003c2e <HAL_TIM_PWM_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000c4c:	f000 fdd2 	bl	80017f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c50:	2300      	movs	r3, #0
 8000c52:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c54:	2300      	movs	r3, #0
 8000c56:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c58:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4821      	ldr	r0, [pc, #132]	; (8000ce4 <MX_TIM1_Init+0x13c>)
 8000c60:	f004 f858 	bl	8004d14 <HAL_TIMEx_MasterConfigSynchronization>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000c6a:	f000 fdc3 	bl	80017f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c6e:	2360      	movs	r3, #96	; 0x60
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c76:	2300      	movs	r3, #0
 8000c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c82:	2300      	movs	r3, #0
 8000c84:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c86:	2300      	movs	r3, #0
 8000c88:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c8e:	2208      	movs	r2, #8
 8000c90:	4619      	mov	r1, r3
 8000c92:	4814      	ldr	r0, [pc, #80]	; (8000ce4 <MX_TIM1_Init+0x13c>)
 8000c94:	f003 fa6a 	bl	800416c <HAL_TIM_PWM_ConfigChannel>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8000c9e:	f000 fda9 	bl	80017f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000cb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000cc0:	1d3b      	adds	r3, r7, #4
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4807      	ldr	r0, [pc, #28]	; (8000ce4 <MX_TIM1_Init+0x13c>)
 8000cc6:	f004 f893 	bl	8004df0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000cd0:	f000 fd90 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000cd4:	4803      	ldr	r0, [pc, #12]	; (8000ce4 <MX_TIM1_Init+0x13c>)
 8000cd6:	f000 feb7 	bl	8001a48 <HAL_TIM_MspPostInit>

}
 8000cda:	bf00      	nop
 8000cdc:	3758      	adds	r7, #88	; 0x58
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	200001f0 	.word	0x200001f0
 8000ce8:	40010000 	.word	0x40010000

08000cec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08a      	sub	sp, #40	; 0x28
 8000cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf2:	f107 0320 	add.w	r3, r7, #32
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	601a      	str	r2, [r3, #0]
 8000cfa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
 8000d08:	611a      	str	r2, [r3, #16]
 8000d0a:	615a      	str	r2, [r3, #20]
 8000d0c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d0e:	4b23      	ldr	r3, [pc, #140]	; (8000d9c <MX_TIM2_Init+0xb0>)
 8000d10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d14:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840;
 8000d16:	4b21      	ldr	r3, [pc, #132]	; (8000d9c <MX_TIM2_Init+0xb0>)
 8000d18:	f44f 7252 	mov.w	r2, #840	; 0x348
 8000d1c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d1e:	4b1f      	ldr	r3, [pc, #124]	; (8000d9c <MX_TIM2_Init+0xb0>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000;
 8000d24:	4b1d      	ldr	r3, [pc, #116]	; (8000d9c <MX_TIM2_Init+0xb0>)
 8000d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d2a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d2c:	4b1b      	ldr	r3, [pc, #108]	; (8000d9c <MX_TIM2_Init+0xb0>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d32:	4b1a      	ldr	r3, [pc, #104]	; (8000d9c <MX_TIM2_Init+0xb0>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d38:	4818      	ldr	r0, [pc, #96]	; (8000d9c <MX_TIM2_Init+0xb0>)
 8000d3a:	f002 ff78 	bl	8003c2e <HAL_TIM_PWM_Init>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000d44:	f000 fd56 	bl	80017f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d50:	f107 0320 	add.w	r3, r7, #32
 8000d54:	4619      	mov	r1, r3
 8000d56:	4811      	ldr	r0, [pc, #68]	; (8000d9c <MX_TIM2_Init+0xb0>)
 8000d58:	f003 ffdc 	bl	8004d14 <HAL_TIMEx_MasterConfigSynchronization>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000d62:	f000 fd47 	bl	80017f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d66:	2360      	movs	r3, #96	; 0x60
 8000d68:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d76:	1d3b      	adds	r3, r7, #4
 8000d78:	2208      	movs	r2, #8
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4807      	ldr	r0, [pc, #28]	; (8000d9c <MX_TIM2_Init+0xb0>)
 8000d7e:	f003 f9f5 	bl	800416c <HAL_TIM_PWM_ConfigChannel>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000d88:	f000 fd34 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d8c:	4803      	ldr	r0, [pc, #12]	; (8000d9c <MX_TIM2_Init+0xb0>)
 8000d8e:	f000 fe5b 	bl	8001a48 <HAL_TIM_MspPostInit>

}
 8000d92:	bf00      	nop
 8000d94:	3728      	adds	r7, #40	; 0x28
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000230 	.word	0x20000230

08000da0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08e      	sub	sp, #56	; 0x38
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000da6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db4:	f107 0320 	add.w	r3, r7, #32
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dbe:	1d3b      	adds	r3, r7, #4
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
 8000dcc:	615a      	str	r2, [r3, #20]
 8000dce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dd0:	4b2d      	ldr	r3, [pc, #180]	; (8000e88 <MX_TIM3_Init+0xe8>)
 8000dd2:	4a2e      	ldr	r2, [pc, #184]	; (8000e8c <MX_TIM3_Init+0xec>)
 8000dd4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8400;
 8000dd6:	4b2c      	ldr	r3, [pc, #176]	; (8000e88 <MX_TIM3_Init+0xe8>)
 8000dd8:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8000ddc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dde:	4b2a      	ldr	r3, [pc, #168]	; (8000e88 <MX_TIM3_Init+0xe8>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 500;
 8000de4:	4b28      	ldr	r3, [pc, #160]	; (8000e88 <MX_TIM3_Init+0xe8>)
 8000de6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000dea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dec:	4b26      	ldr	r3, [pc, #152]	; (8000e88 <MX_TIM3_Init+0xe8>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000df2:	4b25      	ldr	r3, [pc, #148]	; (8000e88 <MX_TIM3_Init+0xe8>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000df8:	4823      	ldr	r0, [pc, #140]	; (8000e88 <MX_TIM3_Init+0xe8>)
 8000dfa:	f002 feed 	bl	8003bd8 <HAL_TIM_Base_Init>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000e04:	f000 fcf6 	bl	80017f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e0c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e12:	4619      	mov	r1, r3
 8000e14:	481c      	ldr	r0, [pc, #112]	; (8000e88 <MX_TIM3_Init+0xe8>)
 8000e16:	f003 fa6f 	bl	80042f8 <HAL_TIM_ConfigClockSource>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000e20:	f000 fce8 	bl	80017f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e24:	4818      	ldr	r0, [pc, #96]	; (8000e88 <MX_TIM3_Init+0xe8>)
 8000e26:	f002 ff02 	bl	8003c2e <HAL_TIM_PWM_Init>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000e30:	f000 fce0 	bl	80017f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e34:	2300      	movs	r3, #0
 8000e36:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e3c:	f107 0320 	add.w	r3, r7, #32
 8000e40:	4619      	mov	r1, r3
 8000e42:	4811      	ldr	r0, [pc, #68]	; (8000e88 <MX_TIM3_Init+0xe8>)
 8000e44:	f003 ff66 	bl	8004d14 <HAL_TIMEx_MasterConfigSynchronization>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000e4e:	f000 fcd1 	bl	80017f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e52:	2360      	movs	r3, #96	; 0x60
 8000e54:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e56:	2300      	movs	r3, #0
 8000e58:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	2204      	movs	r2, #4
 8000e66:	4619      	mov	r1, r3
 8000e68:	4807      	ldr	r0, [pc, #28]	; (8000e88 <MX_TIM3_Init+0xe8>)
 8000e6a:	f003 f97f 	bl	800416c <HAL_TIM_PWM_ConfigChannel>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000e74:	f000 fcbe 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e78:	4803      	ldr	r0, [pc, #12]	; (8000e88 <MX_TIM3_Init+0xe8>)
 8000e7a:	f000 fde5 	bl	8001a48 <HAL_TIM_MspPostInit>

}
 8000e7e:	bf00      	nop
 8000e80:	3738      	adds	r7, #56	; 0x38
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	200001b0 	.word	0x200001b0
 8000e8c:	40000400 	.word	0x40000400

08000e90 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08e      	sub	sp, #56	; 0x38
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ea4:	f107 0320 	add.w	r3, r7, #32
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
 8000ebc:	615a      	str	r2, [r3, #20]
 8000ebe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ec0:	4b2d      	ldr	r3, [pc, #180]	; (8000f78 <MX_TIM4_Init+0xe8>)
 8000ec2:	4a2e      	ldr	r2, [pc, #184]	; (8000f7c <MX_TIM4_Init+0xec>)
 8000ec4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8400;
 8000ec6:	4b2c      	ldr	r3, [pc, #176]	; (8000f78 <MX_TIM4_Init+0xe8>)
 8000ec8:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8000ecc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ece:	4b2a      	ldr	r3, [pc, #168]	; (8000f78 <MX_TIM4_Init+0xe8>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 500;
 8000ed4:	4b28      	ldr	r3, [pc, #160]	; (8000f78 <MX_TIM4_Init+0xe8>)
 8000ed6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000eda:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000edc:	4b26      	ldr	r3, [pc, #152]	; (8000f78 <MX_TIM4_Init+0xe8>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee2:	4b25      	ldr	r3, [pc, #148]	; (8000f78 <MX_TIM4_Init+0xe8>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000ee8:	4823      	ldr	r0, [pc, #140]	; (8000f78 <MX_TIM4_Init+0xe8>)
 8000eea:	f002 fe75 	bl	8003bd8 <HAL_TIM_Base_Init>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000ef4:	f000 fc7e 	bl	80017f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ef8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000efc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000efe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f02:	4619      	mov	r1, r3
 8000f04:	481c      	ldr	r0, [pc, #112]	; (8000f78 <MX_TIM4_Init+0xe8>)
 8000f06:	f003 f9f7 	bl	80042f8 <HAL_TIM_ConfigClockSource>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000f10:	f000 fc70 	bl	80017f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000f14:	4818      	ldr	r0, [pc, #96]	; (8000f78 <MX_TIM4_Init+0xe8>)
 8000f16:	f002 fe8a 	bl	8003c2e <HAL_TIM_PWM_Init>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000f20:	f000 fc68 	bl	80017f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f24:	2300      	movs	r3, #0
 8000f26:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f2c:	f107 0320 	add.w	r3, r7, #32
 8000f30:	4619      	mov	r1, r3
 8000f32:	4811      	ldr	r0, [pc, #68]	; (8000f78 <MX_TIM4_Init+0xe8>)
 8000f34:	f003 feee 	bl	8004d14 <HAL_TIMEx_MasterConfigSynchronization>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000f3e:	f000 fc59 	bl	80017f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f42:	2360      	movs	r3, #96	; 0x60
 8000f44:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	2200      	movs	r2, #0
 8000f56:	4619      	mov	r1, r3
 8000f58:	4807      	ldr	r0, [pc, #28]	; (8000f78 <MX_TIM4_Init+0xe8>)
 8000f5a:	f003 f907 	bl	800416c <HAL_TIM_PWM_ConfigChannel>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000f64:	f000 fc46 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000f68:	4803      	ldr	r0, [pc, #12]	; (8000f78 <MX_TIM4_Init+0xe8>)
 8000f6a:	f000 fd6d 	bl	8001a48 <HAL_TIM_MspPostInit>

}
 8000f6e:	bf00      	nop
 8000f70:	3738      	adds	r7, #56	; 0x38
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	200000dc 	.word	0x200000dc
 8000f7c:	40000800 	.word	0x40000800

08000f80 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08a      	sub	sp, #40	; 0x28
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f86:	f107 0318 	add.w	r3, r7, #24
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f94:	f107 0310 	add.w	r3, r7, #16
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000f9e:	463b      	mov	r3, r7
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000faa:	4b2b      	ldr	r3, [pc, #172]	; (8001058 <MX_TIM5_Init+0xd8>)
 8000fac:	4a2b      	ldr	r2, [pc, #172]	; (800105c <MX_TIM5_Init+0xdc>)
 8000fae:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84;
 8000fb0:	4b29      	ldr	r3, [pc, #164]	; (8001058 <MX_TIM5_Init+0xd8>)
 8000fb2:	2254      	movs	r2, #84	; 0x54
 8000fb4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fb6:	4b28      	ldr	r3, [pc, #160]	; (8001058 <MX_TIM5_Init+0xd8>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 50000;
 8000fbc:	4b26      	ldr	r3, [pc, #152]	; (8001058 <MX_TIM5_Init+0xd8>)
 8000fbe:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000fc2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fc4:	4b24      	ldr	r3, [pc, #144]	; (8001058 <MX_TIM5_Init+0xd8>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fca:	4b23      	ldr	r3, [pc, #140]	; (8001058 <MX_TIM5_Init+0xd8>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000fd0:	4821      	ldr	r0, [pc, #132]	; (8001058 <MX_TIM5_Init+0xd8>)
 8000fd2:	f002 fe01 	bl	8003bd8 <HAL_TIM_Base_Init>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d001      	beq.n	8000fe0 <MX_TIM5_Init+0x60>
  {
    Error_Handler();
 8000fdc:	f000 fc0a 	bl	80017f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fe0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000fe6:	f107 0318 	add.w	r3, r7, #24
 8000fea:	4619      	mov	r1, r3
 8000fec:	481a      	ldr	r0, [pc, #104]	; (8001058 <MX_TIM5_Init+0xd8>)
 8000fee:	f003 f983 	bl	80042f8 <HAL_TIM_ConfigClockSource>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000ff8:	f000 fbfc 	bl	80017f4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 8000ffc:	4816      	ldr	r0, [pc, #88]	; (8001058 <MX_TIM5_Init+0xd8>)
 8000ffe:	f002 fe73 	bl	8003ce8 <HAL_TIM_IC_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001008:	f000 fbf4 	bl	80017f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800100c:	2300      	movs	r3, #0
 800100e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001014:	f107 0310 	add.w	r3, r7, #16
 8001018:	4619      	mov	r1, r3
 800101a:	480f      	ldr	r0, [pc, #60]	; (8001058 <MX_TIM5_Init+0xd8>)
 800101c:	f003 fe7a 	bl	8004d14 <HAL_TIMEx_MasterConfigSynchronization>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_TIM5_Init+0xaa>
  {
    Error_Handler();
 8001026:	f000 fbe5 	bl	80017f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800102a:	2300      	movs	r3, #0
 800102c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800102e:	2301      	movs	r3, #1
 8001030:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001032:	2300      	movs	r3, #0
 8001034:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 2;
 8001036:	2302      	movs	r3, #2
 8001038:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800103a:	463b      	mov	r3, r7
 800103c:	2204      	movs	r2, #4
 800103e:	4619      	mov	r1, r3
 8001040:	4805      	ldr	r0, [pc, #20]	; (8001058 <MX_TIM5_Init+0xd8>)
 8001042:	f002 fff7 	bl	8004034 <HAL_TIM_IC_ConfigChannel>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM5_Init+0xd0>
  {
    Error_Handler();
 800104c:	f000 fbd2 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001050:	bf00      	nop
 8001052:	3728      	adds	r7, #40	; 0x28
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20000170 	.word	0x20000170
 800105c:	40000c00 	.word	0x40000c00

08001060 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001064:	4b11      	ldr	r3, [pc, #68]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 8001066:	4a12      	ldr	r2, [pc, #72]	; (80010b0 <MX_USART2_UART_Init+0x50>)
 8001068:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800106a:	4b10      	ldr	r3, [pc, #64]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 800106c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001070:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001072:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 8001074:	2200      	movs	r2, #0
 8001076:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800107e:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001084:	4b09      	ldr	r3, [pc, #36]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 8001086:	220c      	movs	r2, #12
 8001088:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800108a:	4b08      	ldr	r3, [pc, #32]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 8001092:	2200      	movs	r2, #0
 8001094:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001096:	4805      	ldr	r0, [pc, #20]	; (80010ac <MX_USART2_UART_Init+0x4c>)
 8001098:	f003 ff10 	bl	8004ebc <HAL_UART_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010a2:	f000 fba7 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	20000270 	.word	0x20000270
 80010b0:	40004400 	.word	0x40004400

080010b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	; 0x28
 80010b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ba:	f107 0314 	add.w	r3, r7, #20
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
 80010c4:	609a      	str	r2, [r3, #8]
 80010c6:	60da      	str	r2, [r3, #12]
 80010c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	4b2e      	ldr	r3, [pc, #184]	; (8001188 <MX_GPIO_Init+0xd4>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a2d      	ldr	r2, [pc, #180]	; (8001188 <MX_GPIO_Init+0xd4>)
 80010d4:	f043 0304 	orr.w	r3, r3, #4
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b2b      	ldr	r3, [pc, #172]	; (8001188 <MX_GPIO_Init+0xd4>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0304 	and.w	r3, r3, #4
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	4b27      	ldr	r3, [pc, #156]	; (8001188 <MX_GPIO_Init+0xd4>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a26      	ldr	r2, [pc, #152]	; (8001188 <MX_GPIO_Init+0xd4>)
 80010f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b24      	ldr	r3, [pc, #144]	; (8001188 <MX_GPIO_Init+0xd4>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	4b20      	ldr	r3, [pc, #128]	; (8001188 <MX_GPIO_Init+0xd4>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a1f      	ldr	r2, [pc, #124]	; (8001188 <MX_GPIO_Init+0xd4>)
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b1d      	ldr	r3, [pc, #116]	; (8001188 <MX_GPIO_Init+0xd4>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	607b      	str	r3, [r7, #4]
 8001122:	4b19      	ldr	r3, [pc, #100]	; (8001188 <MX_GPIO_Init+0xd4>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	4a18      	ldr	r2, [pc, #96]	; (8001188 <MX_GPIO_Init+0xd4>)
 8001128:	f043 0302 	orr.w	r3, r3, #2
 800112c:	6313      	str	r3, [r2, #48]	; 0x30
 800112e:	4b16      	ldr	r3, [pc, #88]	; (8001188 <MX_GPIO_Init+0xd4>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800113a:	2200      	movs	r2, #0
 800113c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8001140:	4812      	ldr	r0, [pc, #72]	; (800118c <MX_GPIO_Init+0xd8>)
 8001142:	f001 f945 	bl	80023d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001146:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800114a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800114c:	4b10      	ldr	r3, [pc, #64]	; (8001190 <MX_GPIO_Init+0xdc>)
 800114e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	4619      	mov	r1, r3
 800115a:	480e      	ldr	r0, [pc, #56]	; (8001194 <MX_GPIO_Init+0xe0>)
 800115c:	f000 ffb6 	bl	80020cc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 PA9 */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|GPIO_PIN_9;
 8001160:	f44f 7348 	mov.w	r3, #800	; 0x320
 8001164:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001166:	2301      	movs	r3, #1
 8001168:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116e:	2300      	movs	r3, #0
 8001170:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	4619      	mov	r1, r3
 8001178:	4804      	ldr	r0, [pc, #16]	; (800118c <MX_GPIO_Init+0xd8>)
 800117a:	f000 ffa7 	bl	80020cc <HAL_GPIO_Init>

}
 800117e:	bf00      	nop
 8001180:	3728      	adds	r7, #40	; 0x28
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40023800 	.word	0x40023800
 800118c:	40020000 	.word	0x40020000
 8001190:	10210000 	.word	0x10210000
 8001194:	40020800 	.word	0x40020800

08001198 <Move_Forward>:
/*
 * @param 	time: time to move in milliseconds
 * @param 	speed: pwm for motor. 0-100% mapped to 0-500
 * @retval 	None
 */
void Move_Forward(uint32_t time, uint32_t speed, _Bool extern_watch){
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	4613      	mov	r3, r2
 80011a4:	71fb      	strb	r3, [r7, #7]
	//move forward
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, speed);
 80011a6:	4b11      	ldr	r3, [pc, #68]	; (80011ec <Move_Forward+0x54>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	68ba      	ldr	r2, [r7, #8]
 80011ac:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, speed);
 80011ae:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <Move_Forward+0x58>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	68ba      	ldr	r2, [r7, #8]
 80011b4:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011bc:	480d      	ldr	r0, [pc, #52]	; (80011f4 <Move_Forward+0x5c>)
 80011be:	f001 f907 	bl	80023d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80011c2:	2200      	movs	r2, #0
 80011c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011c8:	480a      	ldr	r0, [pc, #40]	; (80011f4 <Move_Forward+0x5c>)
 80011ca:	f001 f901 	bl	80023d0 <HAL_GPIO_WritePin>

	if(extern_watch == 0){
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	f083 0301 	eor.w	r3, r3, #1
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d004      	beq.n	80011e4 <Move_Forward+0x4c>
		HAL_Delay(time);
 80011da:	68f8      	ldr	r0, [r7, #12]
 80011dc:	f000 fe42 	bl	8001e64 <HAL_Delay>
		Stop_Moving();
 80011e0:	f000 f85a 	bl	8001298 <Stop_Moving>
	}
}
 80011e4:	bf00      	nop
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	200001b0 	.word	0x200001b0
 80011f0:	200000dc 	.word	0x200000dc
 80011f4:	40020000 	.word	0x40020000

080011f8 <Turn_Right>:
/*
 * @param 	time: time to move in milliseconds
 * @param 	speed: pwm for motor. 0-100% mapped to 0-500
 * @retval 	None
 */
void Turn_Right(uint32_t time, uint32_t speed){
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
	//turn right
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, speed);
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <Turn_Right+0x44>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	683a      	ldr	r2, [r7, #0]
 8001208:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, speed);
 800120a:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <Turn_Right+0x48>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	683a      	ldr	r2, [r7, #0]
 8001210:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001212:	2201      	movs	r2, #1
 8001214:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001218:	480a      	ldr	r0, [pc, #40]	; (8001244 <Turn_Right+0x4c>)
 800121a:	f001 f8d9 	bl	80023d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800121e:	2200      	movs	r2, #0
 8001220:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001224:	4807      	ldr	r0, [pc, #28]	; (8001244 <Turn_Right+0x4c>)
 8001226:	f001 f8d3 	bl	80023d0 <HAL_GPIO_WritePin>
	HAL_Delay(time);
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f000 fe1a 	bl	8001e64 <HAL_Delay>
	Stop_Moving();
 8001230:	f000 f832 	bl	8001298 <Stop_Moving>
}
 8001234:	bf00      	nop
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	200001b0 	.word	0x200001b0
 8001240:	200000dc 	.word	0x200000dc
 8001244:	40020000 	.word	0x40020000

08001248 <Turn_Left>:
/*
 * @param 	time: time to move in milliseconds
 * @param 	speed: pwm for motor. 0-100% mapped to 0-500
 * @retval 	None
 */
void Turn_Left(uint32_t time, uint32_t speed){
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
	//turn left
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, speed);
 8001252:	4b0e      	ldr	r3, [pc, #56]	; (800128c <Turn_Left+0x44>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	683a      	ldr	r2, [r7, #0]
 8001258:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, speed);
 800125a:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <Turn_Left+0x48>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	683a      	ldr	r2, [r7, #0]
 8001260:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8001262:	2200      	movs	r2, #0
 8001264:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001268:	480a      	ldr	r0, [pc, #40]	; (8001294 <Turn_Left+0x4c>)
 800126a:	f001 f8b1 	bl	80023d0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 800126e:	2201      	movs	r2, #1
 8001270:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001274:	4807      	ldr	r0, [pc, #28]	; (8001294 <Turn_Left+0x4c>)
 8001276:	f001 f8ab 	bl	80023d0 <HAL_GPIO_WritePin>
	HAL_Delay(time);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f000 fdf2 	bl	8001e64 <HAL_Delay>
	Stop_Moving();
 8001280:	f000 f80a 	bl	8001298 <Stop_Moving>
}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	200001b0 	.word	0x200001b0
 8001290:	200000dc 	.word	0x200000dc
 8001294:	40020000 	.word	0x40020000

08001298 <Stop_Moving>:


/*
 * @retval 	None
 */
void Stop_Moving(){
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
	//set speed to 0
	__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 0);	//wheel pwm set to 0
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <Stop_Moving+0x20>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2200      	movs	r2, #0
 80012a2:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 0);	//wheel pwm set to 0
 80012a4:	4b05      	ldr	r3, [pc, #20]	; (80012bc <Stop_Moving+0x24>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2200      	movs	r2, #0
 80012aa:	635a      	str	r2, [r3, #52]	; 0x34
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	200001b0 	.word	0x200001b0
 80012bc:	200000dc 	.word	0x200000dc

080012c0 <Turn_To_Face>:
 * @brief 	This function turns the zumo to face the angle it is given
 * 			90 degrees is facing forward
 * @param	angle: uint8_t specifying the angle relative to the zumo
 * @retval	None
 */
void Turn_To_Face(uint8_t angle){
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	71fb      	strb	r3, [r7, #7]
	if(angle < 90){
 80012ca:	79fb      	ldrb	r3, [r7, #7]
 80012cc:	2b59      	cmp	r3, #89	; 0x59
 80012ce:	d80a      	bhi.n	80012e6 <Turn_To_Face+0x26>
		Turn_Left((90-angle)*9, 180);		//turn for x ms at 20% speed
 80012d0:	79fb      	ldrb	r3, [r7, #7]
 80012d2:	f1c3 025a 	rsb	r2, r3, #90	; 0x5a
 80012d6:	4613      	mov	r3, r2
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	4413      	add	r3, r2
 80012dc:	21b4      	movs	r1, #180	; 0xb4
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff ffb2 	bl	8001248 <Turn_Left>
	}
	else if(angle > 90){
		Turn_Right((angle-90)*9, 200);		//turn for x ms at 20% speed
	}
	return;
 80012e4:	e00d      	b.n	8001302 <Turn_To_Face+0x42>
	else if(angle > 90){
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	2b5a      	cmp	r3, #90	; 0x5a
 80012ea:	d90a      	bls.n	8001302 <Turn_To_Face+0x42>
		Turn_Right((angle-90)*9, 200);		//turn for x ms at 20% speed
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	f1a3 025a 	sub.w	r2, r3, #90	; 0x5a
 80012f2:	4613      	mov	r3, r2
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	4413      	add	r3, r2
 80012f8:	21c8      	movs	r1, #200	; 0xc8
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff ff7c 	bl	80011f8 <Turn_Right>
	return;
 8001300:	bf00      	nop
 8001302:	bf00      	nop
}
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
	...

0800130c <Scan_Region_Obstacles>:
 * @brief	This function scans the area in front and returns a direction
 * 		  	that has no obstacles
 * @param 	None
 * @retval 	angle: uint8_t angle of max distance
 */
uint8_t Scan_Region_Obstacles(){
 800130c:	b580      	push	{r7, lr}
 800130e:	b09a      	sub	sp, #104	; 0x68
 8001310:	af00      	add	r7, sp, #0
	Set_Angle(0, SERVO_MAX, SERVO_MIN);	//move servo to angle 0
 8001312:	2246      	movs	r2, #70	; 0x46
 8001314:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001318:	2000      	movs	r0, #0
 800131a:	f000 f931 	bl	8001580 <Set_Angle>
	HAL_Delay(1000);					//wait 1sec while servo moves
 800131e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001322:	f000 fd9f 	bl	8001e64 <HAL_Delay>
	uint32_t max_dist = 0; 				//init max brightness to angle 0
 8001326:	2300      	movs	r3, #0
 8001328:	667b      	str	r3, [r7, #100]	; 0x64
	uint8_t max_angle = 0;  			//init max brightness to angle 0
 800132a:	2300      	movs	r3, #0
 800132c:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	uint32_t distances[19] = {[0 ... 18]=0};
 8001330:	1d3b      	adds	r3, r7, #4
 8001332:	224c      	movs	r2, #76	; 0x4c
 8001334:	2100      	movs	r1, #0
 8001336:	4618      	mov	r0, r3
 8001338:	f004 fa96 	bl	8005868 <memset>
	uint32_t avg_angle = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	65fb      	str	r3, [r7, #92]	; 0x5c
	uint8_t counter = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

	for(uint32_t angle=0; angle <= 180; angle = angle + 10){
 8001346:	2300      	movs	r3, #0
 8001348:	657b      	str	r3, [r7, #84]	; 0x54
 800134a:	e02c      	b.n	80013a6 <Scan_Region_Obstacles+0x9a>
		Set_Angle(angle, SERVO_MAX, SERVO_MIN);
 800134c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800134e:	b2db      	uxtb	r3, r3
 8001350:	2246      	movs	r2, #70	; 0x46
 8001352:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001356:	4618      	mov	r0, r3
 8001358:	f000 f912 	bl	8001580 <Set_Angle>
		HAL_Delay(125);
 800135c:	207d      	movs	r0, #125	; 0x7d
 800135e:	f000 fd81 	bl	8001e64 <HAL_Delay>
		Read_Distance(1);
 8001362:	2001      	movs	r0, #1
 8001364:	f000 f9b6 	bl	80016d4 <Read_Distance>
		if(distance > max_dist && distance < 150){
 8001368:	4b2e      	ldr	r3, [pc, #184]	; (8001424 <Scan_Region_Obstacles+0x118>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800136e:	429a      	cmp	r2, r3
 8001370:	d209      	bcs.n	8001386 <Scan_Region_Obstacles+0x7a>
 8001372:	4b2c      	ldr	r3, [pc, #176]	; (8001424 <Scan_Region_Obstacles+0x118>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	2b95      	cmp	r3, #149	; 0x95
 8001378:	d805      	bhi.n	8001386 <Scan_Region_Obstacles+0x7a>
			max_dist = distance;
 800137a:	4b2a      	ldr	r3, [pc, #168]	; (8001424 <Scan_Region_Obstacles+0x118>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	667b      	str	r3, [r7, #100]	; 0x64
			max_angle = angle;
 8001380:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001382:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
		}
		distances[angle/10] = distance;
 8001386:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001388:	4a27      	ldr	r2, [pc, #156]	; (8001428 <Scan_Region_Obstacles+0x11c>)
 800138a:	fba2 2303 	umull	r2, r3, r2, r3
 800138e:	08db      	lsrs	r3, r3, #3
 8001390:	4a24      	ldr	r2, [pc, #144]	; (8001424 <Scan_Region_Obstacles+0x118>)
 8001392:	6812      	ldr	r2, [r2, #0]
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800139a:	440b      	add	r3, r1
 800139c:	f843 2c64 	str.w	r2, [r3, #-100]
	for(uint32_t angle=0; angle <= 180; angle = angle + 10){
 80013a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013a2:	330a      	adds	r3, #10
 80013a4:	657b      	str	r3, [r7, #84]	; 0x54
 80013a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80013a8:	2bb4      	cmp	r3, #180	; 0xb4
 80013aa:	d9cf      	bls.n	800134c <Scan_Region_Obstacles+0x40>
	}

	for(uint32_t i = 0; i <= 18; ++i){
 80013ac:	2300      	movs	r3, #0
 80013ae:	653b      	str	r3, [r7, #80]	; 0x50
 80013b0:	e019      	b.n	80013e6 <Scan_Region_Obstacles+0xda>
		if(distances[i] >= 15){
 80013b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80013ba:	4413      	add	r3, r2
 80013bc:	f853 3c64 	ldr.w	r3, [r3, #-100]
 80013c0:	2b0e      	cmp	r3, #14
 80013c2:	d90d      	bls.n	80013e0 <Scan_Region_Obstacles+0xd4>
			avg_angle = avg_angle + (i*10);
 80013c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80013c6:	4613      	mov	r3, r2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4413      	add	r3, r2
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	461a      	mov	r2, r3
 80013d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013d2:	4413      	add	r3, r2
 80013d4:	65fb      	str	r3, [r7, #92]	; 0x5c
			counter = counter + 1;
 80013d6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80013da:	3301      	adds	r3, #1
 80013dc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	for(uint32_t i = 0; i <= 18; ++i){
 80013e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013e2:	3301      	adds	r3, #1
 80013e4:	653b      	str	r3, [r7, #80]	; 0x50
 80013e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013e8:	2b12      	cmp	r3, #18
 80013ea:	d9e2      	bls.n	80013b2 <Scan_Region_Obstacles+0xa6>
		}
	}
	avg_angle = avg_angle / counter;
 80013ec:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80013f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80013f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f6:	65fb      	str	r3, [r7, #92]	; 0x5c

	if(abs(avg_angle - max_angle) <= 50){
 80013f8:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80013fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	f113 0f32 	cmn.w	r3, #50	; 0x32
 8001404:	db08      	blt.n	8001418 <Scan_Region_Obstacles+0x10c>
 8001406:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800140a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b32      	cmp	r3, #50	; 0x32
 8001410:	dc02      	bgt.n	8001418 <Scan_Region_Obstacles+0x10c>
		max_angle = avg_angle;
 8001412:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001414:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	}
	return max_angle;
 8001418:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
}
 800141c:	4618      	mov	r0, r3
 800141e:	3768      	adds	r7, #104	; 0x68
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	200000b0 	.word	0x200000b0
 8001428:	cccccccd 	.word	0xcccccccd

0800142c <Scan_Region_Brightness>:
 * @brief	This function scans the area in front and returns the location
 * 		  	that has the highest brightness value
 * @param 	None
 * @retval 	angle: uint8_t angle of max brightness
 */
uint8_t Scan_Region_Brightness(){
 800142c:	b5b0      	push	{r4, r5, r7, lr}
 800142e:	b090      	sub	sp, #64	; 0x40
 8001430:	af00      	add	r7, sp, #0
	Set_Angle(0, SERVO_MAX, SERVO_MIN);	//move servo to angle 0
 8001432:	2246      	movs	r2, #70	; 0x46
 8001434:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001438:	2000      	movs	r0, #0
 800143a:	f000 f8a1 	bl	8001580 <Set_Angle>
	HAL_Delay(1000);					//wait 1sec while servo moves
 800143e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001442:	f000 fd0f 	bl	8001e64 <HAL_Delay>
	uint8_t max_bright = 255; 			//init max brightness to angle 0
 8001446:	23ff      	movs	r3, #255	; 0xff
 8001448:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t max_angle = 0;  			//init max brightness to angle 0
 800144c:	2300      	movs	r3, #0
 800144e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	uint16_t brightnesses[19] = {[0 ... 18]=300};
 8001452:	4b49      	ldr	r3, [pc, #292]	; (8001578 <Scan_Region_Brightness+0x14c>)
 8001454:	1d3c      	adds	r4, r7, #4
 8001456:	461d      	mov	r5, r3
 8001458:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800145a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800145c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800145e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001460:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001464:	6020      	str	r0, [r4, #0]
 8001466:	3404      	adds	r4, #4
 8001468:	8021      	strh	r1, [r4, #0]
	uint32_t avg_angle = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	63bb      	str	r3, [r7, #56]	; 0x38
	uint8_t counter = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	for(uint32_t angle=0; angle <= 180; angle = angle + 10){
 8001474:	2300      	movs	r3, #0
 8001476:	633b      	str	r3, [r7, #48]	; 0x30
 8001478:	e02d      	b.n	80014d6 <Scan_Region_Brightness+0xaa>
		Set_Angle(angle, SERVO_MAX, SERVO_MIN);
 800147a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2246      	movs	r2, #70	; 0x46
 8001480:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001484:	4618      	mov	r0, r3
 8001486:	f000 f87b 	bl	8001580 <Set_Angle>
		HAL_Delay(125);
 800148a:	207d      	movs	r0, #125	; 0x7d
 800148c:	f000 fcea 	bl	8001e64 <HAL_Delay>
		uint8_t brightness = Read_Brightness();
 8001490:	f000 f8bc 	bl	800160c <Read_Brightness>
 8001494:	4603      	mov	r3, r0
 8001496:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		brightnesses[angle/10] = brightness;
 800149a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800149c:	4a37      	ldr	r2, [pc, #220]	; (800157c <Scan_Region_Brightness+0x150>)
 800149e:	fba2 2303 	umull	r2, r3, r2, r3
 80014a2:	08db      	lsrs	r3, r3, #3
 80014a4:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80014a8:	b292      	uxth	r2, r2
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	f107 0140 	add.w	r1, r7, #64	; 0x40
 80014b0:	440b      	add	r3, r1
 80014b2:	f823 2c3c 	strh.w	r2, [r3, #-60]
		if(brightness < max_bright){
 80014b6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80014ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80014be:	429a      	cmp	r2, r3
 80014c0:	d206      	bcs.n	80014d0 <Scan_Region_Brightness+0xa4>
			max_bright = brightness;
 80014c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80014c6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			max_angle = angle;
 80014ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014cc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	for(uint32_t angle=0; angle <= 180; angle = angle + 10){
 80014d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014d2:	330a      	adds	r3, #10
 80014d4:	633b      	str	r3, [r7, #48]	; 0x30
 80014d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014d8:	2bb4      	cmp	r3, #180	; 0xb4
 80014da:	d9ce      	bls.n	800147a <Scan_Region_Brightness+0x4e>
		}
	}

	for(uint32_t i=0; i <= 18; ++i){
 80014dc:	2300      	movs	r3, #0
 80014de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014e0:	e02b      	b.n	800153a <Scan_Region_Brightness+0x10e>
		if(abs(brightnesses[i] - max_bright) <= 10){
 80014e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80014ea:	4413      	add	r3, r2
 80014ec:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 80014f0:	461a      	mov	r2, r3
 80014f2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	f113 0f0a 	cmn.w	r3, #10
 80014fc:	db1a      	blt.n	8001534 <Scan_Region_Brightness+0x108>
 80014fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001506:	4413      	add	r3, r2
 8001508:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 800150c:	461a      	mov	r2, r3
 800150e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b0a      	cmp	r3, #10
 8001516:	dc0d      	bgt.n	8001534 <Scan_Region_Brightness+0x108>
			avg_angle = avg_angle + (i*10);
 8001518:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800151a:	4613      	mov	r3, r2
 800151c:	009b      	lsls	r3, r3, #2
 800151e:	4413      	add	r3, r2
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	461a      	mov	r2, r3
 8001524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001526:	4413      	add	r3, r2
 8001528:	63bb      	str	r3, [r7, #56]	; 0x38
			counter = counter + 1;
 800152a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800152e:	3301      	adds	r3, #1
 8001530:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	for(uint32_t i=0; i <= 18; ++i){
 8001534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001536:	3301      	adds	r3, #1
 8001538:	62fb      	str	r3, [r7, #44]	; 0x2c
 800153a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800153c:	2b12      	cmp	r3, #18
 800153e:	d9d0      	bls.n	80014e2 <Scan_Region_Brightness+0xb6>
		}
	}
	avg_angle = avg_angle / counter;
 8001540:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001544:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001546:	fbb2 f3f3 	udiv	r3, r2, r3
 800154a:	63bb      	str	r3, [r7, #56]	; 0x38

	if(abs(avg_angle - max_angle) <= 50){
 800154c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001550:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	f113 0f32 	cmn.w	r3, #50	; 0x32
 8001558:	db08      	blt.n	800156c <Scan_Region_Brightness+0x140>
 800155a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800155e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b32      	cmp	r3, #50	; 0x32
 8001564:	dc02      	bgt.n	800156c <Scan_Region_Brightness+0x140>
		max_angle = avg_angle;
 8001566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001568:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	}
	return max_angle;
 800156c:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
}
 8001570:	4618      	mov	r0, r3
 8001572:	3740      	adds	r7, #64	; 0x40
 8001574:	46bd      	mov	sp, r7
 8001576:	bdb0      	pop	{r4, r5, r7, pc}
 8001578:	0800609c 	.word	0x0800609c
 800157c:	cccccccd 	.word	0xcccccccd

08001580 <Set_Angle>:
 * @param 	angle: a uint8_t specifying the angle to go to
 * @param 	max: a uint32_t specifying the max pwm
 * @param 	min: a uint32_t specifying the min pwm
 * @retval 	None
 */
void Set_Angle(uint8_t angle, uint32_t max, uint32_t min){
 8001580:	b480      	push	{r7}
 8001582:	b087      	sub	sp, #28
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
 800158c:	73fb      	strb	r3, [r7, #15]
	float pwm = ((float)(angle))/180;
 800158e:	7bfb      	ldrb	r3, [r7, #15]
 8001590:	ee07 3a90 	vmov	s15, r3
 8001594:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001598:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8001604 <Set_Angle+0x84>
 800159c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015a0:	edc7 7a05 	vstr	s15, [r7, #20]
	pwm = (pwm * (max - min)) + min;
 80015a4:	68ba      	ldr	r2, [r7, #8]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	ee07 3a90 	vmov	s15, r3
 80015ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80015b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	ee07 3a90 	vmov	s15, r3
 80015c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015c8:	edc7 7a05 	vstr	s15, [r7, #20]
	pwm = (max + min) - pwm;
 80015cc:	68ba      	ldr	r2, [r7, #8]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4413      	add	r3, r2
 80015d2:	ee07 3a90 	vmov	s15, r3
 80015d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015da:	edd7 7a05 	vldr	s15, [r7, #20]
 80015de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015e2:	edc7 7a05 	vstr	s15, [r7, #20]
	__HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_3, (uint32_t)pwm);
 80015e6:	4b08      	ldr	r3, [pc, #32]	; (8001608 <Set_Angle+0x88>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80015ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015f2:	ee17 2a90 	vmov	r2, s15
 80015f6:	63da      	str	r2, [r3, #60]	; 0x3c
	return;
 80015f8:	bf00      	nop
}
 80015fa:	371c      	adds	r7, #28
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	43340000 	.word	0x43340000
 8001608:	200001f0 	.word	0x200001f0

0800160c <Read_Brightness>:
/*
 * @brief	This function takes a brightness reading
 * @param 	None
 * @retval 	raw: a uint8_t raw value of brightness reading
 */
uint8_t Read_Brightness(){
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af02      	add	r7, sp, #8
	buf[0] = PCF8591_ADC_CH0;
 8001612:	4b28      	ldr	r3, [pc, #160]	; (80016b4 <Read_Brightness+0xa8>)
 8001614:	2240      	movs	r2, #64	; 0x40
 8001616:	701a      	strb	r2, [r3, #0]
	ret = HAL_I2C_Master_Transmit(&hi2c1, PCF8591_ADDR, buf, 1, HAL_MAX_DELAY);
 8001618:	f04f 33ff 	mov.w	r3, #4294967295
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	2301      	movs	r3, #1
 8001620:	4a24      	ldr	r2, [pc, #144]	; (80016b4 <Read_Brightness+0xa8>)
 8001622:	2190      	movs	r1, #144	; 0x90
 8001624:	4824      	ldr	r0, [pc, #144]	; (80016b8 <Read_Brightness+0xac>)
 8001626:	f001 f825 	bl	8002674 <HAL_I2C_Master_Transmit>
 800162a:	4603      	mov	r3, r0
 800162c:	461a      	mov	r2, r3
 800162e:	4b23      	ldr	r3, [pc, #140]	; (80016bc <Read_Brightness+0xb0>)
 8001630:	701a      	strb	r2, [r3, #0]
	if(ret!=HAL_OK){
 8001632:	4b22      	ldr	r3, [pc, #136]	; (80016bc <Read_Brightness+0xb0>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d007      	beq.n	800164a <Read_Brightness+0x3e>
	  strcpy((char*)buf, "Err Tx 2\r\n");
 800163a:	4b1e      	ldr	r3, [pc, #120]	; (80016b4 <Read_Brightness+0xa8>)
 800163c:	4a20      	ldr	r2, [pc, #128]	; (80016c0 <Read_Brightness+0xb4>)
 800163e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001640:	c303      	stmia	r3!, {r0, r1}
 8001642:	801a      	strh	r2, [r3, #0]
 8001644:	3302      	adds	r3, #2
 8001646:	0c12      	lsrs	r2, r2, #16
 8001648:	701a      	strb	r2, [r3, #0]
	}

	ret = HAL_I2C_Master_Receive(&hi2c1, PCF8591_ADDR, buf, 2, HAL_MAX_DELAY);
 800164a:	f04f 33ff 	mov.w	r3, #4294967295
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	2302      	movs	r3, #2
 8001652:	4a18      	ldr	r2, [pc, #96]	; (80016b4 <Read_Brightness+0xa8>)
 8001654:	2190      	movs	r1, #144	; 0x90
 8001656:	4818      	ldr	r0, [pc, #96]	; (80016b8 <Read_Brightness+0xac>)
 8001658:	f001 f90a 	bl	8002870 <HAL_I2C_Master_Receive>
 800165c:	4603      	mov	r3, r0
 800165e:	461a      	mov	r2, r3
 8001660:	4b16      	ldr	r3, [pc, #88]	; (80016bc <Read_Brightness+0xb0>)
 8001662:	701a      	strb	r2, [r3, #0]
	if ( ret != HAL_OK ) {
 8001664:	4b15      	ldr	r3, [pc, #84]	; (80016bc <Read_Brightness+0xb0>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d004      	beq.n	8001676 <Read_Brightness+0x6a>
	  strcpy((char*)buf, "Err Rx\r\n");
 800166c:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <Read_Brightness+0xa8>)
 800166e:	4a15      	ldr	r2, [pc, #84]	; (80016c4 <Read_Brightness+0xb8>)
 8001670:	ca07      	ldmia	r2, {r0, r1, r2}
 8001672:	c303      	stmia	r3!, {r0, r1}
 8001674:	701a      	strb	r2, [r3, #0]
	}

	raw = buf[1];
 8001676:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <Read_Brightness+0xa8>)
 8001678:	785a      	ldrb	r2, [r3, #1]
 800167a:	4b13      	ldr	r3, [pc, #76]	; (80016c8 <Read_Brightness+0xbc>)
 800167c:	701a      	strb	r2, [r3, #0]

	if(DEBUGGING == 1){
		sprintf((char*)buf,
 800167e:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <Read_Brightness+0xbc>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	461a      	mov	r2, r3
 8001684:	4911      	ldr	r1, [pc, #68]	; (80016cc <Read_Brightness+0xc0>)
 8001686:	480b      	ldr	r0, [pc, #44]	; (80016b4 <Read_Brightness+0xa8>)
 8001688:	f004 f8f6 	bl	8005878 <siprintf>
			  "%u raw\r\n",
			  ((unsigned int)raw));
		HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 800168c:	4809      	ldr	r0, [pc, #36]	; (80016b4 <Read_Brightness+0xa8>)
 800168e:	f7fe fda7 	bl	80001e0 <strlen>
 8001692:	4603      	mov	r3, r0
 8001694:	b29a      	uxth	r2, r3
 8001696:	f04f 33ff 	mov.w	r3, #4294967295
 800169a:	4906      	ldr	r1, [pc, #24]	; (80016b4 <Read_Brightness+0xa8>)
 800169c:	480c      	ldr	r0, [pc, #48]	; (80016d0 <Read_Brightness+0xc4>)
 800169e:	f003 fc5a 	bl	8004f56 <HAL_UART_Transmit>
		HAL_Delay(10);
 80016a2:	200a      	movs	r0, #10
 80016a4:	f000 fbde 	bl	8001e64 <HAL_Delay>
	}

	return raw;
 80016a8:	4b07      	ldr	r3, [pc, #28]	; (80016c8 <Read_Brightness+0xbc>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000090 	.word	0x20000090
 80016b8:	2000011c 	.word	0x2000011c
 80016bc:	200000af 	.word	0x200000af
 80016c0:	080060c4 	.word	0x080060c4
 80016c4:	080060d0 	.word	0x080060d0
 80016c8:	200000ae 	.word	0x200000ae
 80016cc:	080060dc 	.word	0x080060dc
 80016d0:	20000270 	.word	0x20000270

080016d4 <Read_Distance>:
/*
 * @brief	This function takes a distance reading
 * @param 	debug: a boolean that will enable putty output
 * @retval 	raw: a uint32_t raw value of distance reading
 */
void Read_Distance(uint8_t num_times){
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	71fb      	strb	r3, [r7, #7]
	//start reading
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 2);	//set trigger with 20us pulse)
 80016de:	4b09      	ldr	r3, [pc, #36]	; (8001704 <Read_Distance+0x30>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2202      	movs	r2, #2
 80016e4:	63da      	str	r2, [r3, #60]	; 0x3c

	//give time to grab reading
	HAL_Delay(200*num_times);
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	22c8      	movs	r2, #200	; 0xc8
 80016ea:	fb02 f303 	mul.w	r3, r2, r3
 80016ee:	4618      	mov	r0, r3
 80016f0:	f000 fbb8 	bl	8001e64 <HAL_Delay>

	//stop sending trigger to read
	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, 0);	//set trigger with no pulse)
 80016f4:	4b03      	ldr	r3, [pc, #12]	; (8001704 <Read_Distance+0x30>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2200      	movs	r2, #0
 80016fa:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	20000230 	.word	0x20000230

08001708 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM5){
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a30      	ldr	r2, [pc, #192]	; (80017d8 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d15a      	bne.n	80017d0 <HAL_TIM_IC_CaptureCallback+0xc8>
		//reset counter after input capture interrupt occurs
		if(polarity == TIM_INPUTCHANNELPOLARITY_RISING){
 800171a:	4b30      	ldr	r3, [pc, #192]	; (80017dc <HAL_TIM_IC_CaptureCallback+0xd4>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d117      	bne.n	8001752 <HAL_TIM_IC_CaptureCallback+0x4a>
			__HAL_TIM_SetCounter(htim, 0);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2200      	movs	r2, #0
 8001728:	625a      	str	r2, [r3, #36]	; 0x24
			polarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800172a:	4b2c      	ldr	r3, [pc, #176]	; (80017dc <HAL_TIM_IC_CaptureCallback+0xd4>)
 800172c:	2202      	movs	r2, #2
 800172e:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6a1a      	ldr	r2, [r3, #32]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800173e:	621a      	str	r2, [r3, #32]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6a1a      	ldr	r2, [r3, #32]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f042 0220 	orr.w	r2, r2, #32
 800174e:	621a      	str	r2, [r3, #32]
				sprintf(buf, "Distance: %lu inches\r\n", distance);
				HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
			}//if
		}//else if
	}//if
}
 8001750:	e03e      	b.n	80017d0 <HAL_TIM_IC_CaptureCallback+0xc8>
		else if(polarity == TIM_INPUTCHANNELPOLARITY_FALLING){
 8001752:	4b22      	ldr	r3, [pc, #136]	; (80017dc <HAL_TIM_IC_CaptureCallback+0xd4>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	2b02      	cmp	r3, #2
 8001758:	d13a      	bne.n	80017d0 <HAL_TIM_IC_CaptureCallback+0xc8>
			distance = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);// - capture;
 800175a:	2104      	movs	r1, #4
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f002 fe83 	bl	8004468 <HAL_TIM_ReadCapturedValue>
 8001762:	4602      	mov	r2, r0
 8001764:	4b1e      	ldr	r3, [pc, #120]	; (80017e0 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8001766:	601a      	str	r2, [r3, #0]
			distance = distance / 148;
 8001768:	4b1d      	ldr	r3, [pc, #116]	; (80017e0 <HAL_TIM_IC_CaptureCallback+0xd8>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	089b      	lsrs	r3, r3, #2
 800176e:	4a1d      	ldr	r2, [pc, #116]	; (80017e4 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8001770:	fba2 2303 	umull	r2, r3, r2, r3
 8001774:	089b      	lsrs	r3, r3, #2
 8001776:	4a1a      	ldr	r2, [pc, #104]	; (80017e0 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8001778:	6013      	str	r3, [r2, #0]
			polarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800177a:	4b18      	ldr	r3, [pc, #96]	; (80017dc <HAL_TIM_IC_CaptureCallback+0xd4>)
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, polarity);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6a1a      	ldr	r2, [r3, #32]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800178e:	621a      	str	r2, [r3, #32]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6a19      	ldr	r1, [r3, #32]
 8001796:	4b11      	ldr	r3, [pc, #68]	; (80017dc <HAL_TIM_IC_CaptureCallback+0xd4>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	011a      	lsls	r2, r3, #4
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	430a      	orrs	r2, r1
 80017a2:	621a      	str	r2, [r3, #32]
			__HAL_TIM_SetCounter(htim, 0);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2200      	movs	r2, #0
 80017aa:	625a      	str	r2, [r3, #36]	; 0x24
				sprintf(buf, "Distance: %lu inches\r\n", distance);
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <HAL_TIM_IC_CaptureCallback+0xd8>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	461a      	mov	r2, r3
 80017b2:	490d      	ldr	r1, [pc, #52]	; (80017e8 <HAL_TIM_IC_CaptureCallback+0xe0>)
 80017b4:	480d      	ldr	r0, [pc, #52]	; (80017ec <HAL_TIM_IC_CaptureCallback+0xe4>)
 80017b6:	f004 f85f 	bl	8005878 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)buf, strlen(buf), HAL_MAX_DELAY);
 80017ba:	480c      	ldr	r0, [pc, #48]	; (80017ec <HAL_TIM_IC_CaptureCallback+0xe4>)
 80017bc:	f7fe fd10 	bl	80001e0 <strlen>
 80017c0:	4603      	mov	r3, r0
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	f04f 33ff 	mov.w	r3, #4294967295
 80017c8:	4908      	ldr	r1, [pc, #32]	; (80017ec <HAL_TIM_IC_CaptureCallback+0xe4>)
 80017ca:	4809      	ldr	r0, [pc, #36]	; (80017f0 <HAL_TIM_IC_CaptureCallback+0xe8>)
 80017cc:	f003 fbc3 	bl	8004f56 <HAL_UART_Transmit>
}
 80017d0:	bf00      	nop
 80017d2:	3708      	adds	r7, #8
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40000c00 	.word	0x40000c00
 80017dc:	200000b4 	.word	0x200000b4
 80017e0:	200000b0 	.word	0x200000b0
 80017e4:	1bacf915 	.word	0x1bacf915
 80017e8:	080060e8 	.word	0x080060e8
 80017ec:	20000090 	.word	0x20000090
 80017f0:	20000270 	.word	0x20000270

080017f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
	...

08001804 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	607b      	str	r3, [r7, #4]
 800180e:	4b10      	ldr	r3, [pc, #64]	; (8001850 <HAL_MspInit+0x4c>)
 8001810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001812:	4a0f      	ldr	r2, [pc, #60]	; (8001850 <HAL_MspInit+0x4c>)
 8001814:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001818:	6453      	str	r3, [r2, #68]	; 0x44
 800181a:	4b0d      	ldr	r3, [pc, #52]	; (8001850 <HAL_MspInit+0x4c>)
 800181c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001822:	607b      	str	r3, [r7, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	603b      	str	r3, [r7, #0]
 800182a:	4b09      	ldr	r3, [pc, #36]	; (8001850 <HAL_MspInit+0x4c>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	4a08      	ldr	r2, [pc, #32]	; (8001850 <HAL_MspInit+0x4c>)
 8001830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001834:	6413      	str	r3, [r2, #64]	; 0x40
 8001836:	4b06      	ldr	r3, [pc, #24]	; (8001850 <HAL_MspInit+0x4c>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183e:	603b      	str	r3, [r7, #0]
 8001840:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001842:	2007      	movs	r0, #7
 8001844:	f000 fc00 	bl	8002048 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001848:	bf00      	nop
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40023800 	.word	0x40023800

08001854 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b08a      	sub	sp, #40	; 0x28
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185c:	f107 0314 	add.w	r3, r7, #20
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a19      	ldr	r2, [pc, #100]	; (80018d8 <HAL_I2C_MspInit+0x84>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d12c      	bne.n	80018d0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	613b      	str	r3, [r7, #16]
 800187a:	4b18      	ldr	r3, [pc, #96]	; (80018dc <HAL_I2C_MspInit+0x88>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a17      	ldr	r2, [pc, #92]	; (80018dc <HAL_I2C_MspInit+0x88>)
 8001880:	f043 0302 	orr.w	r3, r3, #2
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b15      	ldr	r3, [pc, #84]	; (80018dc <HAL_I2C_MspInit+0x88>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0302 	and.w	r3, r3, #2
 800188e:	613b      	str	r3, [r7, #16]
 8001890:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001892:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001898:	2312      	movs	r3, #18
 800189a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800189c:	2301      	movs	r3, #1
 800189e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a0:	2303      	movs	r3, #3
 80018a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018a4:	2304      	movs	r3, #4
 80018a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	4619      	mov	r1, r3
 80018ae:	480c      	ldr	r0, [pc, #48]	; (80018e0 <HAL_I2C_MspInit+0x8c>)
 80018b0:	f000 fc0c 	bl	80020cc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018b4:	2300      	movs	r3, #0
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	4b08      	ldr	r3, [pc, #32]	; (80018dc <HAL_I2C_MspInit+0x88>)
 80018ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018bc:	4a07      	ldr	r2, [pc, #28]	; (80018dc <HAL_I2C_MspInit+0x88>)
 80018be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80018c2:	6413      	str	r3, [r2, #64]	; 0x40
 80018c4:	4b05      	ldr	r3, [pc, #20]	; (80018dc <HAL_I2C_MspInit+0x88>)
 80018c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018d0:	bf00      	nop
 80018d2:	3728      	adds	r7, #40	; 0x28
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40005400 	.word	0x40005400
 80018dc:	40023800 	.word	0x40023800
 80018e0:	40020400 	.word	0x40020400

080018e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08c      	sub	sp, #48	; 0x30
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ec:	f107 031c 	add.w	r3, r7, #28
 80018f0:	2200      	movs	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]
 80018f4:	605a      	str	r2, [r3, #4]
 80018f6:	609a      	str	r2, [r3, #8]
 80018f8:	60da      	str	r2, [r3, #12]
 80018fa:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a3b      	ldr	r2, [pc, #236]	; (80019f0 <HAL_TIM_Base_MspInit+0x10c>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d10e      	bne.n	8001924 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	61bb      	str	r3, [r7, #24]
 800190a:	4b3a      	ldr	r3, [pc, #232]	; (80019f4 <HAL_TIM_Base_MspInit+0x110>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190e:	4a39      	ldr	r2, [pc, #228]	; (80019f4 <HAL_TIM_Base_MspInit+0x110>)
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	6453      	str	r3, [r2, #68]	; 0x44
 8001916:	4b37      	ldr	r3, [pc, #220]	; (80019f4 <HAL_TIM_Base_MspInit+0x110>)
 8001918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	61bb      	str	r3, [r7, #24]
 8001920:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001922:	e060      	b.n	80019e6 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM3)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a33      	ldr	r2, [pc, #204]	; (80019f8 <HAL_TIM_Base_MspInit+0x114>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d10e      	bne.n	800194c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	617b      	str	r3, [r7, #20]
 8001932:	4b30      	ldr	r3, [pc, #192]	; (80019f4 <HAL_TIM_Base_MspInit+0x110>)
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	4a2f      	ldr	r2, [pc, #188]	; (80019f4 <HAL_TIM_Base_MspInit+0x110>)
 8001938:	f043 0302 	orr.w	r3, r3, #2
 800193c:	6413      	str	r3, [r2, #64]	; 0x40
 800193e:	4b2d      	ldr	r3, [pc, #180]	; (80019f4 <HAL_TIM_Base_MspInit+0x110>)
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	617b      	str	r3, [r7, #20]
 8001948:	697b      	ldr	r3, [r7, #20]
}
 800194a:	e04c      	b.n	80019e6 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM4)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a2a      	ldr	r2, [pc, #168]	; (80019fc <HAL_TIM_Base_MspInit+0x118>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d10e      	bne.n	8001974 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	613b      	str	r3, [r7, #16]
 800195a:	4b26      	ldr	r3, [pc, #152]	; (80019f4 <HAL_TIM_Base_MspInit+0x110>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	4a25      	ldr	r2, [pc, #148]	; (80019f4 <HAL_TIM_Base_MspInit+0x110>)
 8001960:	f043 0304 	orr.w	r3, r3, #4
 8001964:	6413      	str	r3, [r2, #64]	; 0x40
 8001966:	4b23      	ldr	r3, [pc, #140]	; (80019f4 <HAL_TIM_Base_MspInit+0x110>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	f003 0304 	and.w	r3, r3, #4
 800196e:	613b      	str	r3, [r7, #16]
 8001970:	693b      	ldr	r3, [r7, #16]
}
 8001972:	e038      	b.n	80019e6 <HAL_TIM_Base_MspInit+0x102>
  else if(htim_base->Instance==TIM5)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a21      	ldr	r2, [pc, #132]	; (8001a00 <HAL_TIM_Base_MspInit+0x11c>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d133      	bne.n	80019e6 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	4b1c      	ldr	r3, [pc, #112]	; (80019f4 <HAL_TIM_Base_MspInit+0x110>)
 8001984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001986:	4a1b      	ldr	r2, [pc, #108]	; (80019f4 <HAL_TIM_Base_MspInit+0x110>)
 8001988:	f043 0308 	orr.w	r3, r3, #8
 800198c:	6413      	str	r3, [r2, #64]	; 0x40
 800198e:	4b19      	ldr	r3, [pc, #100]	; (80019f4 <HAL_TIM_Base_MspInit+0x110>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	f003 0308 	and.w	r3, r3, #8
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	4b15      	ldr	r3, [pc, #84]	; (80019f4 <HAL_TIM_Base_MspInit+0x110>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	4a14      	ldr	r2, [pc, #80]	; (80019f4 <HAL_TIM_Base_MspInit+0x110>)
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	6313      	str	r3, [r2, #48]	; 0x30
 80019aa:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <HAL_TIM_Base_MspInit+0x110>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80019b6:	2302      	movs	r3, #2
 80019b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ba:	2302      	movs	r3, #2
 80019bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c2:	2300      	movs	r3, #0
 80019c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80019c6:	2302      	movs	r3, #2
 80019c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ca:	f107 031c 	add.w	r3, r7, #28
 80019ce:	4619      	mov	r1, r3
 80019d0:	480c      	ldr	r0, [pc, #48]	; (8001a04 <HAL_TIM_Base_MspInit+0x120>)
 80019d2:	f000 fb7b 	bl	80020cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80019d6:	2200      	movs	r2, #0
 80019d8:	2100      	movs	r1, #0
 80019da:	2032      	movs	r0, #50	; 0x32
 80019dc:	f000 fb3f 	bl	800205e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80019e0:	2032      	movs	r0, #50	; 0x32
 80019e2:	f000 fb58 	bl	8002096 <HAL_NVIC_EnableIRQ>
}
 80019e6:	bf00      	nop
 80019e8:	3730      	adds	r7, #48	; 0x30
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40010000 	.word	0x40010000
 80019f4:	40023800 	.word	0x40023800
 80019f8:	40000400 	.word	0x40000400
 80019fc:	40000800 	.word	0x40000800
 8001a00:	40000c00 	.word	0x40000c00
 8001a04:	40020000 	.word	0x40020000

08001a08 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a18:	d10d      	bne.n	8001a36 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <HAL_TIM_PWM_MspInit+0x3c>)
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a22:	4a08      	ldr	r2, [pc, #32]	; (8001a44 <HAL_TIM_PWM_MspInit+0x3c>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	6413      	str	r3, [r2, #64]	; 0x40
 8001a2a:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <HAL_TIM_PWM_MspInit+0x3c>)
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	f003 0301 	and.w	r3, r3, #1
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a36:	bf00      	nop
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	40023800 	.word	0x40023800

08001a48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08c      	sub	sp, #48	; 0x30
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a50:	f107 031c 	add.w	r3, r7, #28
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a49      	ldr	r2, [pc, #292]	; (8001b8c <HAL_TIM_MspPostInit+0x144>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d11f      	bne.n	8001aaa <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61bb      	str	r3, [r7, #24]
 8001a6e:	4b48      	ldr	r3, [pc, #288]	; (8001b90 <HAL_TIM_MspPostInit+0x148>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4a47      	ldr	r2, [pc, #284]	; (8001b90 <HAL_TIM_MspPostInit+0x148>)
 8001a74:	f043 0301 	orr.w	r3, r3, #1
 8001a78:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7a:	4b45      	ldr	r3, [pc, #276]	; (8001b90 <HAL_TIM_MspPostInit+0x148>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	61bb      	str	r3, [r7, #24]
 8001a84:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a90:	2300      	movs	r3, #0
 8001a92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a94:	2300      	movs	r3, #0
 8001a96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a9c:	f107 031c 	add.w	r3, r7, #28
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	483c      	ldr	r0, [pc, #240]	; (8001b94 <HAL_TIM_MspPostInit+0x14c>)
 8001aa4:	f000 fb12 	bl	80020cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001aa8:	e06b      	b.n	8001b82 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM2)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ab2:	d11f      	bne.n	8001af4 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	4b35      	ldr	r3, [pc, #212]	; (8001b90 <HAL_TIM_MspPostInit+0x148>)
 8001aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abc:	4a34      	ldr	r2, [pc, #208]	; (8001b90 <HAL_TIM_MspPostInit+0x148>)
 8001abe:	f043 0302 	orr.w	r3, r3, #2
 8001ac2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac4:	4b32      	ldr	r3, [pc, #200]	; (8001b90 <HAL_TIM_MspPostInit+0x148>)
 8001ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	617b      	str	r3, [r7, #20]
 8001ace:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ad0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ae6:	f107 031c 	add.w	r3, r7, #28
 8001aea:	4619      	mov	r1, r3
 8001aec:	482a      	ldr	r0, [pc, #168]	; (8001b98 <HAL_TIM_MspPostInit+0x150>)
 8001aee:	f000 faed 	bl	80020cc <HAL_GPIO_Init>
}
 8001af2:	e046      	b.n	8001b82 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM3)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a28      	ldr	r2, [pc, #160]	; (8001b9c <HAL_TIM_MspPostInit+0x154>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d11e      	bne.n	8001b3c <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]
 8001b02:	4b23      	ldr	r3, [pc, #140]	; (8001b90 <HAL_TIM_MspPostInit+0x148>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	4a22      	ldr	r2, [pc, #136]	; (8001b90 <HAL_TIM_MspPostInit+0x148>)
 8001b08:	f043 0304 	orr.w	r3, r3, #4
 8001b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0e:	4b20      	ldr	r3, [pc, #128]	; (8001b90 <HAL_TIM_MspPostInit+0x148>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	f003 0304 	and.w	r3, r3, #4
 8001b16:	613b      	str	r3, [r7, #16]
 8001b18:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001b1a:	2380      	movs	r3, #128	; 0x80
 8001b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b26:	2300      	movs	r3, #0
 8001b28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b2e:	f107 031c 	add.w	r3, r7, #28
 8001b32:	4619      	mov	r1, r3
 8001b34:	481a      	ldr	r0, [pc, #104]	; (8001ba0 <HAL_TIM_MspPostInit+0x158>)
 8001b36:	f000 fac9 	bl	80020cc <HAL_GPIO_Init>
}
 8001b3a:	e022      	b.n	8001b82 <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM4)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a18      	ldr	r2, [pc, #96]	; (8001ba4 <HAL_TIM_MspPostInit+0x15c>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d11d      	bne.n	8001b82 <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <HAL_TIM_MspPostInit+0x148>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	4a10      	ldr	r2, [pc, #64]	; (8001b90 <HAL_TIM_MspPostInit+0x148>)
 8001b50:	f043 0302 	orr.w	r3, r3, #2
 8001b54:	6313      	str	r3, [r2, #48]	; 0x30
 8001b56:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <HAL_TIM_MspPostInit+0x148>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b62:	2340      	movs	r3, #64	; 0x40
 8001b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b66:	2302      	movs	r3, #2
 8001b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001b72:	2302      	movs	r3, #2
 8001b74:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b76:	f107 031c 	add.w	r3, r7, #28
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4806      	ldr	r0, [pc, #24]	; (8001b98 <HAL_TIM_MspPostInit+0x150>)
 8001b7e:	f000 faa5 	bl	80020cc <HAL_GPIO_Init>
}
 8001b82:	bf00      	nop
 8001b84:	3730      	adds	r7, #48	; 0x30
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	40010000 	.word	0x40010000
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40020000 	.word	0x40020000
 8001b98:	40020400 	.word	0x40020400
 8001b9c:	40000400 	.word	0x40000400
 8001ba0:	40020800 	.word	0x40020800
 8001ba4:	40000800 	.word	0x40000800

08001ba8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08a      	sub	sp, #40	; 0x28
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb0:	f107 0314 	add.w	r3, r7, #20
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
 8001bbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a19      	ldr	r2, [pc, #100]	; (8001c2c <HAL_UART_MspInit+0x84>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d12b      	bne.n	8001c22 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bca:	2300      	movs	r3, #0
 8001bcc:	613b      	str	r3, [r7, #16]
 8001bce:	4b18      	ldr	r3, [pc, #96]	; (8001c30 <HAL_UART_MspInit+0x88>)
 8001bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd2:	4a17      	ldr	r2, [pc, #92]	; (8001c30 <HAL_UART_MspInit+0x88>)
 8001bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bda:	4b15      	ldr	r3, [pc, #84]	; (8001c30 <HAL_UART_MspInit+0x88>)
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be2:	613b      	str	r3, [r7, #16]
 8001be4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <HAL_UART_MspInit+0x88>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	4a10      	ldr	r2, [pc, #64]	; (8001c30 <HAL_UART_MspInit+0x88>)
 8001bf0:	f043 0301 	orr.w	r3, r3, #1
 8001bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf6:	4b0e      	ldr	r3, [pc, #56]	; (8001c30 <HAL_UART_MspInit+0x88>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	f003 0301 	and.w	r3, r3, #1
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c02:	230c      	movs	r3, #12
 8001c04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c06:	2302      	movs	r3, #2
 8001c08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c12:	2307      	movs	r3, #7
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c16:	f107 0314 	add.w	r3, r7, #20
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4805      	ldr	r0, [pc, #20]	; (8001c34 <HAL_UART_MspInit+0x8c>)
 8001c1e:	f000 fa55 	bl	80020cc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c22:	bf00      	nop
 8001c24:	3728      	adds	r7, #40	; 0x28
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40004400 	.word	0x40004400
 8001c30:	40023800 	.word	0x40023800
 8001c34:	40020000 	.word	0x40020000

08001c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c46:	b480      	push	{r7}
 8001c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c4a:	e7fe      	b.n	8001c4a <HardFault_Handler+0x4>

08001c4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c50:	e7fe      	b.n	8001c50 <MemManage_Handler+0x4>

08001c52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c52:	b480      	push	{r7}
 8001c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c56:	e7fe      	b.n	8001c56 <BusFault_Handler+0x4>

08001c58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c5c:	e7fe      	b.n	8001c5c <UsageFault_Handler+0x4>

08001c5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c62:	bf00      	nop
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c8c:	f000 f8ca 	bl	8001e24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c90:	bf00      	nop
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001c98:	4802      	ldr	r0, [pc, #8]	; (8001ca4 <TIM5_IRQHandler+0x10>)
 8001c9a:	f002 f8c3 	bl	8003e24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001c9e:	bf00      	nop
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20000170 	.word	0x20000170

08001ca8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001cb0:	4b11      	ldr	r3, [pc, #68]	; (8001cf8 <_sbrk+0x50>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d102      	bne.n	8001cbe <_sbrk+0x16>
		heap_end = &end;
 8001cb8:	4b0f      	ldr	r3, [pc, #60]	; (8001cf8 <_sbrk+0x50>)
 8001cba:	4a10      	ldr	r2, [pc, #64]	; (8001cfc <_sbrk+0x54>)
 8001cbc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001cbe:	4b0e      	ldr	r3, [pc, #56]	; (8001cf8 <_sbrk+0x50>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	; (8001cf8 <_sbrk+0x50>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4413      	add	r3, r2
 8001ccc:	466a      	mov	r2, sp
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d907      	bls.n	8001ce2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001cd2:	f003 fd9f 	bl	8005814 <__errno>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	230c      	movs	r3, #12
 8001cda:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce0:	e006      	b.n	8001cf0 <_sbrk+0x48>
	}

	heap_end += incr;
 8001ce2:	4b05      	ldr	r3, [pc, #20]	; (8001cf8 <_sbrk+0x50>)
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4413      	add	r3, r2
 8001cea:	4a03      	ldr	r2, [pc, #12]	; (8001cf8 <_sbrk+0x50>)
 8001cec:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001cee:	68fb      	ldr	r3, [r7, #12]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	200000d0 	.word	0x200000d0
 8001cfc:	200002b8 	.word	0x200002b8

08001d00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d04:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <SystemInit+0x28>)
 8001d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d0a:	4a07      	ldr	r2, [pc, #28]	; (8001d28 <SystemInit+0x28>)
 8001d0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d14:	4b04      	ldr	r3, [pc, #16]	; (8001d28 <SystemInit+0x28>)
 8001d16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d1a:	609a      	str	r2, [r3, #8]
#endif
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	e000ed00 	.word	0xe000ed00

08001d2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d64 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d30:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d32:	e003      	b.n	8001d3c <LoopCopyDataInit>

08001d34 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d34:	4b0c      	ldr	r3, [pc, #48]	; (8001d68 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d36:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d38:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d3a:	3104      	adds	r1, #4

08001d3c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d3c:	480b      	ldr	r0, [pc, #44]	; (8001d6c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d3e:	4b0c      	ldr	r3, [pc, #48]	; (8001d70 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d40:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d42:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d44:	d3f6      	bcc.n	8001d34 <CopyDataInit>
  ldr  r2, =_sbss
 8001d46:	4a0b      	ldr	r2, [pc, #44]	; (8001d74 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d48:	e002      	b.n	8001d50 <LoopFillZerobss>

08001d4a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d4a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d4c:	f842 3b04 	str.w	r3, [r2], #4

08001d50 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d50:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d52:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d54:	d3f9      	bcc.n	8001d4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d56:	f7ff ffd3 	bl	8001d00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d5a:	f003 fd61 	bl	8005820 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d5e:	f7fe fc17 	bl	8000590 <main>
  bx  lr    
 8001d62:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d64:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001d68:	0800615c 	.word	0x0800615c
  ldr  r0, =_sdata
 8001d6c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d70:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 8001d74:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8001d78:	200002b8 	.word	0x200002b8

08001d7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d7c:	e7fe      	b.n	8001d7c <ADC_IRQHandler>
	...

08001d80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d84:	4b0e      	ldr	r3, [pc, #56]	; (8001dc0 <HAL_Init+0x40>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a0d      	ldr	r2, [pc, #52]	; (8001dc0 <HAL_Init+0x40>)
 8001d8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d90:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <HAL_Init+0x40>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a0a      	ldr	r2, [pc, #40]	; (8001dc0 <HAL_Init+0x40>)
 8001d96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d9c:	4b08      	ldr	r3, [pc, #32]	; (8001dc0 <HAL_Init+0x40>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a07      	ldr	r2, [pc, #28]	; (8001dc0 <HAL_Init+0x40>)
 8001da2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001da8:	2003      	movs	r0, #3
 8001daa:	f000 f94d 	bl	8002048 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dae:	2000      	movs	r0, #0
 8001db0:	f000 f808 	bl	8001dc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001db4:	f7ff fd26 	bl	8001804 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001db8:	2300      	movs	r3, #0
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	40023c00 	.word	0x40023c00

08001dc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dcc:	4b12      	ldr	r3, [pc, #72]	; (8001e18 <HAL_InitTick+0x54>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <HAL_InitTick+0x58>)
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001de2:	4618      	mov	r0, r3
 8001de4:	f000 f965 	bl	80020b2 <HAL_SYSTICK_Config>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e00e      	b.n	8001e10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b0f      	cmp	r3, #15
 8001df6:	d80a      	bhi.n	8001e0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001df8:	2200      	movs	r2, #0
 8001dfa:	6879      	ldr	r1, [r7, #4]
 8001dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001e00:	f000 f92d 	bl	800205e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e04:	4a06      	ldr	r2, [pc, #24]	; (8001e20 <HAL_InitTick+0x5c>)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	e000      	b.n	8001e10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3708      	adds	r7, #8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20000004 	.word	0x20000004
 8001e1c:	2000000c 	.word	0x2000000c
 8001e20:	20000008 	.word	0x20000008

08001e24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e28:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_IncTick+0x20>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	4b06      	ldr	r3, [pc, #24]	; (8001e48 <HAL_IncTick+0x24>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4413      	add	r3, r2
 8001e34:	4a04      	ldr	r2, [pc, #16]	; (8001e48 <HAL_IncTick+0x24>)
 8001e36:	6013      	str	r3, [r2, #0]
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	2000000c 	.word	0x2000000c
 8001e48:	200002b0 	.word	0x200002b0

08001e4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e50:	4b03      	ldr	r3, [pc, #12]	; (8001e60 <HAL_GetTick+0x14>)
 8001e52:	681b      	ldr	r3, [r3, #0]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	200002b0 	.word	0x200002b0

08001e64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e6c:	f7ff ffee 	bl	8001e4c <HAL_GetTick>
 8001e70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e7c:	d005      	beq.n	8001e8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e7e:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <HAL_Delay+0x40>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	461a      	mov	r2, r3
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4413      	add	r3, r2
 8001e88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e8a:	bf00      	nop
 8001e8c:	f7ff ffde 	bl	8001e4c <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	68fa      	ldr	r2, [r7, #12]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d8f7      	bhi.n	8001e8c <HAL_Delay+0x28>
  {
  }
}
 8001e9c:	bf00      	nop
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	2000000c 	.word	0x2000000c

08001ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f003 0307 	and.w	r3, r3, #7
 8001eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <__NVIC_SetPriorityGrouping+0x44>)
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ebe:	68ba      	ldr	r2, [r7, #8]
 8001ec0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ed0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eda:	4a04      	ldr	r2, [pc, #16]	; (8001eec <__NVIC_SetPriorityGrouping+0x44>)
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	60d3      	str	r3, [r2, #12]
}
 8001ee0:	bf00      	nop
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr
 8001eec:	e000ed00 	.word	0xe000ed00

08001ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ef4:	4b04      	ldr	r3, [pc, #16]	; (8001f08 <__NVIC_GetPriorityGrouping+0x18>)
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	0a1b      	lsrs	r3, r3, #8
 8001efa:	f003 0307 	and.w	r3, r3, #7
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr
 8001f08:	e000ed00 	.word	0xe000ed00

08001f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	db0b      	blt.n	8001f36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	f003 021f 	and.w	r2, r3, #31
 8001f24:	4907      	ldr	r1, [pc, #28]	; (8001f44 <__NVIC_EnableIRQ+0x38>)
 8001f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2a:	095b      	lsrs	r3, r3, #5
 8001f2c:	2001      	movs	r0, #1
 8001f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	e000e100 	.word	0xe000e100

08001f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	6039      	str	r1, [r7, #0]
 8001f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	db0a      	blt.n	8001f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	490c      	ldr	r1, [pc, #48]	; (8001f94 <__NVIC_SetPriority+0x4c>)
 8001f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f66:	0112      	lsls	r2, r2, #4
 8001f68:	b2d2      	uxtb	r2, r2
 8001f6a:	440b      	add	r3, r1
 8001f6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f70:	e00a      	b.n	8001f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	4908      	ldr	r1, [pc, #32]	; (8001f98 <__NVIC_SetPriority+0x50>)
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	3b04      	subs	r3, #4
 8001f80:	0112      	lsls	r2, r2, #4
 8001f82:	b2d2      	uxtb	r2, r2
 8001f84:	440b      	add	r3, r1
 8001f86:	761a      	strb	r2, [r3, #24]
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	e000e100 	.word	0xe000e100
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b089      	sub	sp, #36	; 0x24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60f8      	str	r0, [r7, #12]
 8001fa4:	60b9      	str	r1, [r7, #8]
 8001fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	f1c3 0307 	rsb	r3, r3, #7
 8001fb6:	2b04      	cmp	r3, #4
 8001fb8:	bf28      	it	cs
 8001fba:	2304      	movcs	r3, #4
 8001fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	3304      	adds	r3, #4
 8001fc2:	2b06      	cmp	r3, #6
 8001fc4:	d902      	bls.n	8001fcc <NVIC_EncodePriority+0x30>
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	3b03      	subs	r3, #3
 8001fca:	e000      	b.n	8001fce <NVIC_EncodePriority+0x32>
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	43da      	mvns	r2, r3
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	401a      	ands	r2, r3
 8001fe0:	697b      	ldr	r3, [r7, #20]
 8001fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	fa01 f303 	lsl.w	r3, r1, r3
 8001fee:	43d9      	mvns	r1, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff4:	4313      	orrs	r3, r2
         );
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3724      	adds	r7, #36	; 0x24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
	...

08002004 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3b01      	subs	r3, #1
 8002010:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002014:	d301      	bcc.n	800201a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002016:	2301      	movs	r3, #1
 8002018:	e00f      	b.n	800203a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800201a:	4a0a      	ldr	r2, [pc, #40]	; (8002044 <SysTick_Config+0x40>)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3b01      	subs	r3, #1
 8002020:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002022:	210f      	movs	r1, #15
 8002024:	f04f 30ff 	mov.w	r0, #4294967295
 8002028:	f7ff ff8e 	bl	8001f48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800202c:	4b05      	ldr	r3, [pc, #20]	; (8002044 <SysTick_Config+0x40>)
 800202e:	2200      	movs	r2, #0
 8002030:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002032:	4b04      	ldr	r3, [pc, #16]	; (8002044 <SysTick_Config+0x40>)
 8002034:	2207      	movs	r2, #7
 8002036:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	e000e010 	.word	0xe000e010

08002048 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f7ff ff29 	bl	8001ea8 <__NVIC_SetPriorityGrouping>
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800205e:	b580      	push	{r7, lr}
 8002060:	b086      	sub	sp, #24
 8002062:	af00      	add	r7, sp, #0
 8002064:	4603      	mov	r3, r0
 8002066:	60b9      	str	r1, [r7, #8]
 8002068:	607a      	str	r2, [r7, #4]
 800206a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002070:	f7ff ff3e 	bl	8001ef0 <__NVIC_GetPriorityGrouping>
 8002074:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	68b9      	ldr	r1, [r7, #8]
 800207a:	6978      	ldr	r0, [r7, #20]
 800207c:	f7ff ff8e 	bl	8001f9c <NVIC_EncodePriority>
 8002080:	4602      	mov	r2, r0
 8002082:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002086:	4611      	mov	r1, r2
 8002088:	4618      	mov	r0, r3
 800208a:	f7ff ff5d 	bl	8001f48 <__NVIC_SetPriority>
}
 800208e:	bf00      	nop
 8002090:	3718      	adds	r7, #24
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b082      	sub	sp, #8
 800209a:	af00      	add	r7, sp, #0
 800209c:	4603      	mov	r3, r0
 800209e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff ff31 	bl	8001f0c <__NVIC_EnableIRQ>
}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b082      	sub	sp, #8
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7ff ffa2 	bl	8002004 <SysTick_Config>
 80020c0:	4603      	mov	r3, r0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3708      	adds	r7, #8
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
	...

080020cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b089      	sub	sp, #36	; 0x24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020d6:	2300      	movs	r3, #0
 80020d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020da:	2300      	movs	r3, #0
 80020dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020de:	2300      	movs	r3, #0
 80020e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020e2:	2300      	movs	r3, #0
 80020e4:	61fb      	str	r3, [r7, #28]
 80020e6:	e159      	b.n	800239c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020e8:	2201      	movs	r2, #1
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	697a      	ldr	r2, [r7, #20]
 80020f8:	4013      	ands	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020fc:	693a      	ldr	r2, [r7, #16]
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	429a      	cmp	r2, r3
 8002102:	f040 8148 	bne.w	8002396 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b01      	cmp	r3, #1
 800210c:	d00b      	beq.n	8002126 <HAL_GPIO_Init+0x5a>
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b02      	cmp	r3, #2
 8002114:	d007      	beq.n	8002126 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800211a:	2b11      	cmp	r3, #17
 800211c:	d003      	beq.n	8002126 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b12      	cmp	r3, #18
 8002124:	d130      	bne.n	8002188 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	2203      	movs	r2, #3
 8002132:	fa02 f303 	lsl.w	r3, r2, r3
 8002136:	43db      	mvns	r3, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4013      	ands	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	68da      	ldr	r2, [r3, #12]
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4313      	orrs	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800215c:	2201      	movs	r2, #1
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	43db      	mvns	r3, r3
 8002166:	69ba      	ldr	r2, [r7, #24]
 8002168:	4013      	ands	r3, r2
 800216a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	091b      	lsrs	r3, r3, #4
 8002172:	f003 0201 	and.w	r2, r3, #1
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4313      	orrs	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	2203      	movs	r2, #3
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4013      	ands	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d003      	beq.n	80021c8 <HAL_GPIO_Init+0xfc>
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	2b12      	cmp	r3, #18
 80021c6:	d123      	bne.n	8002210 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	08da      	lsrs	r2, r3, #3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	3208      	adds	r2, #8
 80021d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	220f      	movs	r2, #15
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4013      	ands	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	691a      	ldr	r2, [r3, #16]
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002202:	69fb      	ldr	r3, [r7, #28]
 8002204:	08da      	lsrs	r2, r3, #3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	3208      	adds	r2, #8
 800220a:	69b9      	ldr	r1, [r7, #24]
 800220c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	2203      	movs	r2, #3
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4013      	ands	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f003 0203 	and.w	r2, r3, #3
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4313      	orrs	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800224c:	2b00      	cmp	r3, #0
 800224e:	f000 80a2 	beq.w	8002396 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	60fb      	str	r3, [r7, #12]
 8002256:	4b56      	ldr	r3, [pc, #344]	; (80023b0 <HAL_GPIO_Init+0x2e4>)
 8002258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225a:	4a55      	ldr	r2, [pc, #340]	; (80023b0 <HAL_GPIO_Init+0x2e4>)
 800225c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002260:	6453      	str	r3, [r2, #68]	; 0x44
 8002262:	4b53      	ldr	r3, [pc, #332]	; (80023b0 <HAL_GPIO_Init+0x2e4>)
 8002264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800226e:	4a51      	ldr	r2, [pc, #324]	; (80023b4 <HAL_GPIO_Init+0x2e8>)
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	089b      	lsrs	r3, r3, #2
 8002274:	3302      	adds	r3, #2
 8002276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800227a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	f003 0303 	and.w	r3, r3, #3
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	220f      	movs	r2, #15
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43db      	mvns	r3, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4013      	ands	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a48      	ldr	r2, [pc, #288]	; (80023b8 <HAL_GPIO_Init+0x2ec>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d019      	beq.n	80022ce <HAL_GPIO_Init+0x202>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a47      	ldr	r2, [pc, #284]	; (80023bc <HAL_GPIO_Init+0x2f0>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d013      	beq.n	80022ca <HAL_GPIO_Init+0x1fe>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a46      	ldr	r2, [pc, #280]	; (80023c0 <HAL_GPIO_Init+0x2f4>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d00d      	beq.n	80022c6 <HAL_GPIO_Init+0x1fa>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a45      	ldr	r2, [pc, #276]	; (80023c4 <HAL_GPIO_Init+0x2f8>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d007      	beq.n	80022c2 <HAL_GPIO_Init+0x1f6>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a44      	ldr	r2, [pc, #272]	; (80023c8 <HAL_GPIO_Init+0x2fc>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d101      	bne.n	80022be <HAL_GPIO_Init+0x1f2>
 80022ba:	2304      	movs	r3, #4
 80022bc:	e008      	b.n	80022d0 <HAL_GPIO_Init+0x204>
 80022be:	2307      	movs	r3, #7
 80022c0:	e006      	b.n	80022d0 <HAL_GPIO_Init+0x204>
 80022c2:	2303      	movs	r3, #3
 80022c4:	e004      	b.n	80022d0 <HAL_GPIO_Init+0x204>
 80022c6:	2302      	movs	r3, #2
 80022c8:	e002      	b.n	80022d0 <HAL_GPIO_Init+0x204>
 80022ca:	2301      	movs	r3, #1
 80022cc:	e000      	b.n	80022d0 <HAL_GPIO_Init+0x204>
 80022ce:	2300      	movs	r3, #0
 80022d0:	69fa      	ldr	r2, [r7, #28]
 80022d2:	f002 0203 	and.w	r2, r2, #3
 80022d6:	0092      	lsls	r2, r2, #2
 80022d8:	4093      	lsls	r3, r2
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4313      	orrs	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022e0:	4934      	ldr	r1, [pc, #208]	; (80023b4 <HAL_GPIO_Init+0x2e8>)
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	089b      	lsrs	r3, r3, #2
 80022e6:	3302      	adds	r3, #2
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022ee:	4b37      	ldr	r3, [pc, #220]	; (80023cc <HAL_GPIO_Init+0x300>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	43db      	mvns	r3, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4013      	ands	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	693b      	ldr	r3, [r7, #16]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002312:	4a2e      	ldr	r2, [pc, #184]	; (80023cc <HAL_GPIO_Init+0x300>)
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002318:	4b2c      	ldr	r3, [pc, #176]	; (80023cc <HAL_GPIO_Init+0x300>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	43db      	mvns	r3, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4013      	ands	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d003      	beq.n	800233c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800233c:	4a23      	ldr	r2, [pc, #140]	; (80023cc <HAL_GPIO_Init+0x300>)
 800233e:	69bb      	ldr	r3, [r7, #24]
 8002340:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002342:	4b22      	ldr	r3, [pc, #136]	; (80023cc <HAL_GPIO_Init+0x300>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	43db      	mvns	r3, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4013      	ands	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	4313      	orrs	r3, r2
 8002364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002366:	4a19      	ldr	r2, [pc, #100]	; (80023cc <HAL_GPIO_Init+0x300>)
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800236c:	4b17      	ldr	r3, [pc, #92]	; (80023cc <HAL_GPIO_Init+0x300>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	43db      	mvns	r3, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4013      	ands	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d003      	beq.n	8002390 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	4313      	orrs	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002390:	4a0e      	ldr	r2, [pc, #56]	; (80023cc <HAL_GPIO_Init+0x300>)
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	3301      	adds	r3, #1
 800239a:	61fb      	str	r3, [r7, #28]
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	2b0f      	cmp	r3, #15
 80023a0:	f67f aea2 	bls.w	80020e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023a4:	bf00      	nop
 80023a6:	3724      	adds	r7, #36	; 0x24
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	40023800 	.word	0x40023800
 80023b4:	40013800 	.word	0x40013800
 80023b8:	40020000 	.word	0x40020000
 80023bc:	40020400 	.word	0x40020400
 80023c0:	40020800 	.word	0x40020800
 80023c4:	40020c00 	.word	0x40020c00
 80023c8:	40021000 	.word	0x40021000
 80023cc:	40013c00 	.word	0x40013c00

080023d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	460b      	mov	r3, r1
 80023da:	807b      	strh	r3, [r7, #2]
 80023dc:	4613      	mov	r3, r2
 80023de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023e0:	787b      	ldrb	r3, [r7, #1]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d003      	beq.n	80023ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023e6:	887a      	ldrh	r2, [r7, #2]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023ec:	e003      	b.n	80023f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023ee:	887b      	ldrh	r3, [r7, #2]
 80023f0:	041a      	lsls	r2, r3, #16
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	619a      	str	r2, [r3, #24]
}
 80023f6:	bf00      	nop
 80023f8:	370c      	adds	r7, #12
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
	...

08002404 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d101      	bne.n	8002416 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e11f      	b.n	8002656 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d106      	bne.n	8002430 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7ff fa12 	bl	8001854 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2224      	movs	r2, #36	; 0x24
 8002434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f022 0201 	bic.w	r2, r2, #1
 8002446:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002456:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002466:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002468:	f001 fb8e 	bl	8003b88 <HAL_RCC_GetPCLK1Freq>
 800246c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	4a7b      	ldr	r2, [pc, #492]	; (8002660 <HAL_I2C_Init+0x25c>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d807      	bhi.n	8002488 <HAL_I2C_Init+0x84>
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	4a7a      	ldr	r2, [pc, #488]	; (8002664 <HAL_I2C_Init+0x260>)
 800247c:	4293      	cmp	r3, r2
 800247e:	bf94      	ite	ls
 8002480:	2301      	movls	r3, #1
 8002482:	2300      	movhi	r3, #0
 8002484:	b2db      	uxtb	r3, r3
 8002486:	e006      	b.n	8002496 <HAL_I2C_Init+0x92>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	4a77      	ldr	r2, [pc, #476]	; (8002668 <HAL_I2C_Init+0x264>)
 800248c:	4293      	cmp	r3, r2
 800248e:	bf94      	ite	ls
 8002490:	2301      	movls	r3, #1
 8002492:	2300      	movhi	r3, #0
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e0db      	b.n	8002656 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	4a72      	ldr	r2, [pc, #456]	; (800266c <HAL_I2C_Init+0x268>)
 80024a2:	fba2 2303 	umull	r2, r3, r2, r3
 80024a6:	0c9b      	lsrs	r3, r3, #18
 80024a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68ba      	ldr	r2, [r7, #8]
 80024ba:	430a      	orrs	r2, r1
 80024bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	4a64      	ldr	r2, [pc, #400]	; (8002660 <HAL_I2C_Init+0x25c>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d802      	bhi.n	80024d8 <HAL_I2C_Init+0xd4>
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	3301      	adds	r3, #1
 80024d6:	e009      	b.n	80024ec <HAL_I2C_Init+0xe8>
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80024de:	fb02 f303 	mul.w	r3, r2, r3
 80024e2:	4a63      	ldr	r2, [pc, #396]	; (8002670 <HAL_I2C_Init+0x26c>)
 80024e4:	fba2 2303 	umull	r2, r3, r2, r3
 80024e8:	099b      	lsrs	r3, r3, #6
 80024ea:	3301      	adds	r3, #1
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	6812      	ldr	r2, [r2, #0]
 80024f0:	430b      	orrs	r3, r1
 80024f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	69db      	ldr	r3, [r3, #28]
 80024fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80024fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	4956      	ldr	r1, [pc, #344]	; (8002660 <HAL_I2C_Init+0x25c>)
 8002508:	428b      	cmp	r3, r1
 800250a:	d80d      	bhi.n	8002528 <HAL_I2C_Init+0x124>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	1e59      	subs	r1, r3, #1
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	fbb1 f3f3 	udiv	r3, r1, r3
 800251a:	3301      	adds	r3, #1
 800251c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002520:	2b04      	cmp	r3, #4
 8002522:	bf38      	it	cc
 8002524:	2304      	movcc	r3, #4
 8002526:	e04f      	b.n	80025c8 <HAL_I2C_Init+0x1c4>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d111      	bne.n	8002554 <HAL_I2C_Init+0x150>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	1e58      	subs	r0, r3, #1
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6859      	ldr	r1, [r3, #4]
 8002538:	460b      	mov	r3, r1
 800253a:	005b      	lsls	r3, r3, #1
 800253c:	440b      	add	r3, r1
 800253e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002542:	3301      	adds	r3, #1
 8002544:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002548:	2b00      	cmp	r3, #0
 800254a:	bf0c      	ite	eq
 800254c:	2301      	moveq	r3, #1
 800254e:	2300      	movne	r3, #0
 8002550:	b2db      	uxtb	r3, r3
 8002552:	e012      	b.n	800257a <HAL_I2C_Init+0x176>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	1e58      	subs	r0, r3, #1
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6859      	ldr	r1, [r3, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	0099      	lsls	r1, r3, #2
 8002564:	440b      	add	r3, r1
 8002566:	fbb0 f3f3 	udiv	r3, r0, r3
 800256a:	3301      	adds	r3, #1
 800256c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002570:	2b00      	cmp	r3, #0
 8002572:	bf0c      	ite	eq
 8002574:	2301      	moveq	r3, #1
 8002576:	2300      	movne	r3, #0
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <HAL_I2C_Init+0x17e>
 800257e:	2301      	movs	r3, #1
 8002580:	e022      	b.n	80025c8 <HAL_I2C_Init+0x1c4>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10e      	bne.n	80025a8 <HAL_I2C_Init+0x1a4>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	1e58      	subs	r0, r3, #1
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6859      	ldr	r1, [r3, #4]
 8002592:	460b      	mov	r3, r1
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	440b      	add	r3, r1
 8002598:	fbb0 f3f3 	udiv	r3, r0, r3
 800259c:	3301      	adds	r3, #1
 800259e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025a6:	e00f      	b.n	80025c8 <HAL_I2C_Init+0x1c4>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	1e58      	subs	r0, r3, #1
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6859      	ldr	r1, [r3, #4]
 80025b0:	460b      	mov	r3, r1
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	0099      	lsls	r1, r3, #2
 80025b8:	440b      	add	r3, r1
 80025ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80025be:	3301      	adds	r3, #1
 80025c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	6809      	ldr	r1, [r1, #0]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	69da      	ldr	r2, [r3, #28]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a1b      	ldr	r3, [r3, #32]
 80025e2:	431a      	orrs	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	430a      	orrs	r2, r1
 80025ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80025f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	6911      	ldr	r1, [r2, #16]
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	68d2      	ldr	r2, [r2, #12]
 8002602:	4311      	orrs	r1, r2
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6812      	ldr	r2, [r2, #0]
 8002608:	430b      	orrs	r3, r1
 800260a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	695a      	ldr	r2, [r3, #20]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	431a      	orrs	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	430a      	orrs	r2, r1
 8002626:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f042 0201 	orr.w	r2, r2, #1
 8002636:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2220      	movs	r2, #32
 8002642:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	000186a0 	.word	0x000186a0
 8002664:	001e847f 	.word	0x001e847f
 8002668:	003d08ff 	.word	0x003d08ff
 800266c:	431bde83 	.word	0x431bde83
 8002670:	10624dd3 	.word	0x10624dd3

08002674 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b088      	sub	sp, #32
 8002678:	af02      	add	r7, sp, #8
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	607a      	str	r2, [r7, #4]
 800267e:	461a      	mov	r2, r3
 8002680:	460b      	mov	r3, r1
 8002682:	817b      	strh	r3, [r7, #10]
 8002684:	4613      	mov	r3, r2
 8002686:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002688:	f7ff fbe0 	bl	8001e4c <HAL_GetTick>
 800268c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b20      	cmp	r3, #32
 8002698:	f040 80e0 	bne.w	800285c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	9300      	str	r3, [sp, #0]
 80026a0:	2319      	movs	r3, #25
 80026a2:	2201      	movs	r2, #1
 80026a4:	4970      	ldr	r1, [pc, #448]	; (8002868 <HAL_I2C_Master_Transmit+0x1f4>)
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f000 fc56 	bl	8002f58 <I2C_WaitOnFlagUntilTimeout>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80026b2:	2302      	movs	r3, #2
 80026b4:	e0d3      	b.n	800285e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d101      	bne.n	80026c4 <HAL_I2C_Master_Transmit+0x50>
 80026c0:	2302      	movs	r3, #2
 80026c2:	e0cc      	b.n	800285e <HAL_I2C_Master_Transmit+0x1ea>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d007      	beq.n	80026ea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f042 0201 	orr.w	r2, r2, #1
 80026e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2221      	movs	r2, #33	; 0x21
 80026fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2210      	movs	r2, #16
 8002706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2200      	movs	r2, #0
 800270e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	893a      	ldrh	r2, [r7, #8]
 800271a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002720:	b29a      	uxth	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	4a50      	ldr	r2, [pc, #320]	; (800286c <HAL_I2C_Master_Transmit+0x1f8>)
 800272a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800272c:	8979      	ldrh	r1, [r7, #10]
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	6a3a      	ldr	r2, [r7, #32]
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f000 fac2 	bl	8002cbc <I2C_MasterRequestWrite>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d001      	beq.n	8002742 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e08d      	b.n	800285e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002742:	2300      	movs	r3, #0
 8002744:	613b      	str	r3, [r7, #16]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	613b      	str	r3, [r7, #16]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	613b      	str	r3, [r7, #16]
 8002756:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002758:	e066      	b.n	8002828 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	6a39      	ldr	r1, [r7, #32]
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f000 fcd0 	bl	8003104 <I2C_WaitOnTXEFlagUntilTimeout>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00d      	beq.n	8002786 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	2b04      	cmp	r3, #4
 8002770:	d107      	bne.n	8002782 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002780:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e06b      	b.n	800285e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278a:	781a      	ldrb	r2, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002796:	1c5a      	adds	r2, r3, #1
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a0:	b29b      	uxth	r3, r3
 80027a2:	3b01      	subs	r3, #1
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ae:	3b01      	subs	r3, #1
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	695b      	ldr	r3, [r3, #20]
 80027bc:	f003 0304 	and.w	r3, r3, #4
 80027c0:	2b04      	cmp	r3, #4
 80027c2:	d11b      	bne.n	80027fc <HAL_I2C_Master_Transmit+0x188>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d017      	beq.n	80027fc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d0:	781a      	ldrb	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027dc:	1c5a      	adds	r2, r3, #1
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	3b01      	subs	r3, #1
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f4:	3b01      	subs	r3, #1
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	6a39      	ldr	r1, [r7, #32]
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f000 fcc0 	bl	8003186 <I2C_WaitOnBTFFlagUntilTimeout>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00d      	beq.n	8002828 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002810:	2b04      	cmp	r3, #4
 8002812:	d107      	bne.n	8002824 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002822:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e01a      	b.n	800285e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800282c:	2b00      	cmp	r3, #0
 800282e:	d194      	bne.n	800275a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800283e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2220      	movs	r2, #32
 8002844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002858:	2300      	movs	r3, #0
 800285a:	e000      	b.n	800285e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800285c:	2302      	movs	r3, #2
  }
}
 800285e:	4618      	mov	r0, r3
 8002860:	3718      	adds	r7, #24
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	00100002 	.word	0x00100002
 800286c:	ffff0000 	.word	0xffff0000

08002870 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b08c      	sub	sp, #48	; 0x30
 8002874:	af02      	add	r7, sp, #8
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	607a      	str	r2, [r7, #4]
 800287a:	461a      	mov	r2, r3
 800287c:	460b      	mov	r3, r1
 800287e:	817b      	strh	r3, [r7, #10]
 8002880:	4613      	mov	r3, r2
 8002882:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002884:	f7ff fae2 	bl	8001e4c <HAL_GetTick>
 8002888:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b20      	cmp	r3, #32
 8002894:	f040 820b 	bne.w	8002cae <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289a:	9300      	str	r3, [sp, #0]
 800289c:	2319      	movs	r3, #25
 800289e:	2201      	movs	r2, #1
 80028a0:	497c      	ldr	r1, [pc, #496]	; (8002a94 <HAL_I2C_Master_Receive+0x224>)
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f000 fb58 	bl	8002f58 <I2C_WaitOnFlagUntilTimeout>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80028ae:	2302      	movs	r3, #2
 80028b0:	e1fe      	b.n	8002cb0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d101      	bne.n	80028c0 <HAL_I2C_Master_Receive+0x50>
 80028bc:	2302      	movs	r3, #2
 80028be:	e1f7      	b.n	8002cb0 <HAL_I2C_Master_Receive+0x440>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0301 	and.w	r3, r3, #1
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d007      	beq.n	80028e6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f042 0201 	orr.w	r2, r2, #1
 80028e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2222      	movs	r2, #34	; 0x22
 80028fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2210      	movs	r2, #16
 8002902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	893a      	ldrh	r2, [r7, #8]
 8002916:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800291c:	b29a      	uxth	r2, r3
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	4a5c      	ldr	r2, [pc, #368]	; (8002a98 <HAL_I2C_Master_Receive+0x228>)
 8002926:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002928:	8979      	ldrh	r1, [r7, #10]
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f000 fa46 	bl	8002dc0 <I2C_MasterRequestRead>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e1b8      	b.n	8002cb0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002942:	2b00      	cmp	r3, #0
 8002944:	d113      	bne.n	800296e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002946:	2300      	movs	r3, #0
 8002948:	623b      	str	r3, [r7, #32]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	695b      	ldr	r3, [r3, #20]
 8002950:	623b      	str	r3, [r7, #32]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	623b      	str	r3, [r7, #32]
 800295a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	e18c      	b.n	8002c88 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002972:	2b01      	cmp	r3, #1
 8002974:	d11b      	bne.n	80029ae <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002984:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002986:	2300      	movs	r3, #0
 8002988:	61fb      	str	r3, [r7, #28]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	695b      	ldr	r3, [r3, #20]
 8002990:	61fb      	str	r3, [r7, #28]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	61fb      	str	r3, [r7, #28]
 800299a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	e16c      	b.n	8002c88 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d11b      	bne.n	80029ee <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029c4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029d6:	2300      	movs	r3, #0
 80029d8:	61bb      	str	r3, [r7, #24]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	695b      	ldr	r3, [r3, #20]
 80029e0:	61bb      	str	r3, [r7, #24]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	699b      	ldr	r3, [r3, #24]
 80029e8:	61bb      	str	r3, [r7, #24]
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	e14c      	b.n	8002c88 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029fe:	2300      	movs	r3, #0
 8002a00:	617b      	str	r3, [r7, #20]
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	617b      	str	r3, [r7, #20]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	617b      	str	r3, [r7, #20]
 8002a12:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002a14:	e138      	b.n	8002c88 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a1a:	2b03      	cmp	r3, #3
 8002a1c:	f200 80f1 	bhi.w	8002c02 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d123      	bne.n	8002a70 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f000 fbeb 	bl	8003208 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e139      	b.n	8002cb0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	691a      	ldr	r2, [r3, #16]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a46:	b2d2      	uxtb	r2, r2
 8002a48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4e:	1c5a      	adds	r2, r3, #1
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	3b01      	subs	r3, #1
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a6e:	e10b      	b.n	8002c88 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d14e      	bne.n	8002b16 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7a:	9300      	str	r3, [sp, #0]
 8002a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7e:	2200      	movs	r2, #0
 8002a80:	4906      	ldr	r1, [pc, #24]	; (8002a9c <HAL_I2C_Master_Receive+0x22c>)
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f000 fa68 	bl	8002f58 <I2C_WaitOnFlagUntilTimeout>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d008      	beq.n	8002aa0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e10e      	b.n	8002cb0 <HAL_I2C_Master_Receive+0x440>
 8002a92:	bf00      	nop
 8002a94:	00100002 	.word	0x00100002
 8002a98:	ffff0000 	.word	0xffff0000
 8002a9c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	691a      	ldr	r2, [r3, #16]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	b2d2      	uxtb	r2, r2
 8002abc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac2:	1c5a      	adds	r2, r3, #1
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002acc:	3b01      	subs	r3, #1
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	3b01      	subs	r3, #1
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	691a      	ldr	r2, [r3, #16]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	1c5a      	adds	r2, r3, #1
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002afe:	3b01      	subs	r3, #1
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	b29a      	uxth	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b14:	e0b8      	b.n	8002c88 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	4966      	ldr	r1, [pc, #408]	; (8002cb8 <HAL_I2C_Master_Receive+0x448>)
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f000 fa19 	bl	8002f58 <I2C_WaitOnFlagUntilTimeout>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e0bf      	b.n	8002cb0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	691a      	ldr	r2, [r3, #16]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b52:	1c5a      	adds	r2, r3, #1
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b74:	9300      	str	r3, [sp, #0]
 8002b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b78:	2200      	movs	r2, #0
 8002b7a:	494f      	ldr	r1, [pc, #316]	; (8002cb8 <HAL_I2C_Master_Receive+0x448>)
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f000 f9eb 	bl	8002f58 <I2C_WaitOnFlagUntilTimeout>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e091      	b.n	8002cb0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	691a      	ldr	r2, [r3, #16]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba6:	b2d2      	uxtb	r2, r2
 8002ba8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bae:	1c5a      	adds	r2, r3, #1
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	b29a      	uxth	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	691a      	ldr	r2, [r3, #16]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	b2d2      	uxtb	r2, r2
 8002bda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be0:	1c5a      	adds	r2, r3, #1
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bea:	3b01      	subs	r3, #1
 8002bec:	b29a      	uxth	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	b29a      	uxth	r2, r3
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c00:	e042      	b.n	8002c88 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c06:	68f8      	ldr	r0, [r7, #12]
 8002c08:	f000 fafe 	bl	8003208 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d001      	beq.n	8002c16 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e04c      	b.n	8002cb0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	691a      	ldr	r2, [r3, #16]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c20:	b2d2      	uxtb	r2, r2
 8002c22:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	1c5a      	adds	r2, r3, #1
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c32:	3b01      	subs	r3, #1
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	3b01      	subs	r3, #1
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	f003 0304 	and.w	r3, r3, #4
 8002c52:	2b04      	cmp	r3, #4
 8002c54:	d118      	bne.n	8002c88 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	691a      	ldr	r2, [r3, #16]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c60:	b2d2      	uxtb	r2, r2
 8002c62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c68:	1c5a      	adds	r2, r3, #1
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c72:	3b01      	subs	r3, #1
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	3b01      	subs	r3, #1
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f47f aec2 	bne.w	8002a16 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2220      	movs	r2, #32
 8002c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002caa:	2300      	movs	r3, #0
 8002cac:	e000      	b.n	8002cb0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002cae:	2302      	movs	r3, #2
  }
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3728      	adds	r7, #40	; 0x28
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	00010004 	.word	0x00010004

08002cbc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b088      	sub	sp, #32
 8002cc0:	af02      	add	r7, sp, #8
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	607a      	str	r2, [r7, #4]
 8002cc6:	603b      	str	r3, [r7, #0]
 8002cc8:	460b      	mov	r3, r1
 8002cca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	2b08      	cmp	r3, #8
 8002cd6:	d006      	beq.n	8002ce6 <I2C_MasterRequestWrite+0x2a>
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d003      	beq.n	8002ce6 <I2C_MasterRequestWrite+0x2a>
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ce4:	d108      	bne.n	8002cf8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	e00b      	b.n	8002d10 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cfc:	2b12      	cmp	r3, #18
 8002cfe:	d107      	bne.n	8002d10 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d0e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	9300      	str	r3, [sp, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d1c:	68f8      	ldr	r0, [r7, #12]
 8002d1e:	f000 f91b 	bl	8002f58 <I2C_WaitOnFlagUntilTimeout>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00c      	beq.n	8002d42 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d3c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e035      	b.n	8002dae <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d4a:	d108      	bne.n	8002d5e <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d4c:	897b      	ldrh	r3, [r7, #10]
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	461a      	mov	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d5a:	611a      	str	r2, [r3, #16]
 8002d5c:	e01b      	b.n	8002d96 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d5e:	897b      	ldrh	r3, [r7, #10]
 8002d60:	11db      	asrs	r3, r3, #7
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	f003 0306 	and.w	r3, r3, #6
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	f063 030f 	orn	r3, r3, #15
 8002d6e:	b2da      	uxtb	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	490f      	ldr	r1, [pc, #60]	; (8002db8 <I2C_MasterRequestWrite+0xfc>)
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f000 f942 	bl	8003006 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e010      	b.n	8002dae <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d8c:	897b      	ldrh	r3, [r7, #10]
 8002d8e:	b2da      	uxtb	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	4908      	ldr	r1, [pc, #32]	; (8002dbc <I2C_MasterRequestWrite+0x100>)
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f000 f932 	bl	8003006 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e000      	b.n	8002dae <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3718      	adds	r7, #24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	00010008 	.word	0x00010008
 8002dbc:	00010002 	.word	0x00010002

08002dc0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b088      	sub	sp, #32
 8002dc4:	af02      	add	r7, sp, #8
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	607a      	str	r2, [r7, #4]
 8002dca:	603b      	str	r3, [r7, #0]
 8002dcc:	460b      	mov	r3, r1
 8002dce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002de4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	2b08      	cmp	r3, #8
 8002dea:	d006      	beq.n	8002dfa <I2C_MasterRequestRead+0x3a>
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d003      	beq.n	8002dfa <I2C_MasterRequestRead+0x3a>
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002df8:	d108      	bne.n	8002e0c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e08:	601a      	str	r2, [r3, #0]
 8002e0a:	e00b      	b.n	8002e24 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e10:	2b11      	cmp	r3, #17
 8002e12:	d107      	bne.n	8002e24 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e22:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e30:	68f8      	ldr	r0, [r7, #12]
 8002e32:	f000 f891 	bl	8002f58 <I2C_WaitOnFlagUntilTimeout>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00c      	beq.n	8002e56 <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e50:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e078      	b.n	8002f48 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e5e:	d108      	bne.n	8002e72 <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002e60:	897b      	ldrh	r3, [r7, #10]
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	f043 0301 	orr.w	r3, r3, #1
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	611a      	str	r2, [r3, #16]
 8002e70:	e05e      	b.n	8002f30 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e72:	897b      	ldrh	r3, [r7, #10]
 8002e74:	11db      	asrs	r3, r3, #7
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	f003 0306 	and.w	r3, r3, #6
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	f063 030f 	orn	r3, r3, #15
 8002e82:	b2da      	uxtb	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	4930      	ldr	r1, [pc, #192]	; (8002f50 <I2C_MasterRequestRead+0x190>)
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f000 f8b8 	bl	8003006 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e053      	b.n	8002f48 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ea0:	897b      	ldrh	r3, [r7, #10]
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	4929      	ldr	r1, [pc, #164]	; (8002f54 <I2C_MasterRequestRead+0x194>)
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f000 f8a8 	bl	8003006 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e043      	b.n	8002f48 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	613b      	str	r3, [r7, #16]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	613b      	str	r3, [r7, #16]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	613b      	str	r3, [r7, #16]
 8002ed4:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ee4:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	9300      	str	r3, [sp, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 f830 	bl	8002f58 <I2C_WaitOnFlagUntilTimeout>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00c      	beq.n	8002f18 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d003      	beq.n	8002f14 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f12:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002f14:	2303      	movs	r3, #3
 8002f16:	e017      	b.n	8002f48 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002f18:	897b      	ldrh	r3, [r7, #10]
 8002f1a:	11db      	asrs	r3, r3, #7
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	f003 0306 	and.w	r3, r3, #6
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	f063 030e 	orn	r3, r3, #14
 8002f28:	b2da      	uxtb	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	4907      	ldr	r1, [pc, #28]	; (8002f54 <I2C_MasterRequestRead+0x194>)
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 f865 	bl	8003006 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e000      	b.n	8002f48 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3718      	adds	r7, #24
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	00010008 	.word	0x00010008
 8002f54:	00010002 	.word	0x00010002

08002f58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	603b      	str	r3, [r7, #0]
 8002f64:	4613      	mov	r3, r2
 8002f66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f68:	e025      	b.n	8002fb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f70:	d021      	beq.n	8002fb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f72:	f7fe ff6b 	bl	8001e4c <HAL_GetTick>
 8002f76:	4602      	mov	r2, r0
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	1ad3      	subs	r3, r2, r3
 8002f7c:	683a      	ldr	r2, [r7, #0]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d302      	bcc.n	8002f88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d116      	bne.n	8002fb6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2220      	movs	r2, #32
 8002f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa2:	f043 0220 	orr.w	r2, r3, #32
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	e023      	b.n	8002ffe <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	0c1b      	lsrs	r3, r3, #16
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d10d      	bne.n	8002fdc <I2C_WaitOnFlagUntilTimeout+0x84>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	43da      	mvns	r2, r3
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	bf0c      	ite	eq
 8002fd2:	2301      	moveq	r3, #1
 8002fd4:	2300      	movne	r3, #0
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	461a      	mov	r2, r3
 8002fda:	e00c      	b.n	8002ff6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	43da      	mvns	r2, r3
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	bf0c      	ite	eq
 8002fee:	2301      	moveq	r3, #1
 8002ff0:	2300      	movne	r3, #0
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	79fb      	ldrb	r3, [r7, #7]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d0b6      	beq.n	8002f6a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003006:	b580      	push	{r7, lr}
 8003008:	b084      	sub	sp, #16
 800300a:	af00      	add	r7, sp, #0
 800300c:	60f8      	str	r0, [r7, #12]
 800300e:	60b9      	str	r1, [r7, #8]
 8003010:	607a      	str	r2, [r7, #4]
 8003012:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003014:	e051      	b.n	80030ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003024:	d123      	bne.n	800306e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003034:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800303e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2220      	movs	r2, #32
 800304a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	f043 0204 	orr.w	r2, r3, #4
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e046      	b.n	80030fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003074:	d021      	beq.n	80030ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003076:	f7fe fee9 	bl	8001e4c <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	429a      	cmp	r2, r3
 8003084:	d302      	bcc.n	800308c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d116      	bne.n	80030ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2220      	movs	r2, #32
 8003096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	f043 0220 	orr.w	r2, r3, #32
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e020      	b.n	80030fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	0c1b      	lsrs	r3, r3, #16
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d10c      	bne.n	80030de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	43da      	mvns	r2, r3
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	4013      	ands	r3, r2
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	bf14      	ite	ne
 80030d6:	2301      	movne	r3, #1
 80030d8:	2300      	moveq	r3, #0
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	e00b      	b.n	80030f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	699b      	ldr	r3, [r3, #24]
 80030e4:	43da      	mvns	r2, r3
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	4013      	ands	r3, r2
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	bf14      	ite	ne
 80030f0:	2301      	movne	r3, #1
 80030f2:	2300      	moveq	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d18d      	bne.n	8003016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003110:	e02d      	b.n	800316e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f000 f8ce 	bl	80032b4 <I2C_IsAcknowledgeFailed>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d001      	beq.n	8003122 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e02d      	b.n	800317e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003128:	d021      	beq.n	800316e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800312a:	f7fe fe8f 	bl	8001e4c <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	429a      	cmp	r2, r3
 8003138:	d302      	bcc.n	8003140 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d116      	bne.n	800316e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2220      	movs	r2, #32
 800314a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	f043 0220 	orr.w	r2, r3, #32
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e007      	b.n	800317e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003178:	2b80      	cmp	r3, #128	; 0x80
 800317a:	d1ca      	bne.n	8003112 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b084      	sub	sp, #16
 800318a:	af00      	add	r7, sp, #0
 800318c:	60f8      	str	r0, [r7, #12]
 800318e:	60b9      	str	r1, [r7, #8]
 8003190:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003192:	e02d      	b.n	80031f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f000 f88d 	bl	80032b4 <I2C_IsAcknowledgeFailed>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e02d      	b.n	8003200 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031aa:	d021      	beq.n	80031f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ac:	f7fe fe4e 	bl	8001e4c <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	68ba      	ldr	r2, [r7, #8]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d302      	bcc.n	80031c2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d116      	bne.n	80031f0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2220      	movs	r2, #32
 80031cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031dc:	f043 0220 	orr.w	r2, r3, #32
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e007      	b.n	8003200 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	f003 0304 	and.w	r3, r3, #4
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	d1ca      	bne.n	8003194 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b084      	sub	sp, #16
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003214:	e042      	b.n	800329c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	f003 0310 	and.w	r3, r3, #16
 8003220:	2b10      	cmp	r3, #16
 8003222:	d119      	bne.n	8003258 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f06f 0210 	mvn.w	r2, #16
 800322c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2220      	movs	r2, #32
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2200      	movs	r2, #0
 8003250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e029      	b.n	80032ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003258:	f7fe fdf8 	bl	8001e4c <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	68ba      	ldr	r2, [r7, #8]
 8003264:	429a      	cmp	r2, r3
 8003266:	d302      	bcc.n	800326e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d116      	bne.n	800329c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2220      	movs	r2, #32
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003288:	f043 0220 	orr.w	r2, r3, #32
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e007      	b.n	80032ac <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a6:	2b40      	cmp	r3, #64	; 0x40
 80032a8:	d1b5      	bne.n	8003216 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032ca:	d11b      	bne.n	8003304 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80032d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2220      	movs	r2, #32
 80032e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f0:	f043 0204 	orr.w	r2, r3, #4
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e000      	b.n	8003306 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
	...

08003314 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e25b      	b.n	80037de <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b00      	cmp	r3, #0
 8003330:	d075      	beq.n	800341e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003332:	4ba3      	ldr	r3, [pc, #652]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f003 030c 	and.w	r3, r3, #12
 800333a:	2b04      	cmp	r3, #4
 800333c:	d00c      	beq.n	8003358 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800333e:	4ba0      	ldr	r3, [pc, #640]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003346:	2b08      	cmp	r3, #8
 8003348:	d112      	bne.n	8003370 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800334a:	4b9d      	ldr	r3, [pc, #628]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003352:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003356:	d10b      	bne.n	8003370 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003358:	4b99      	ldr	r3, [pc, #612]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d05b      	beq.n	800341c <HAL_RCC_OscConfig+0x108>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d157      	bne.n	800341c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e236      	b.n	80037de <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003378:	d106      	bne.n	8003388 <HAL_RCC_OscConfig+0x74>
 800337a:	4b91      	ldr	r3, [pc, #580]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a90      	ldr	r2, [pc, #576]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 8003380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003384:	6013      	str	r3, [r2, #0]
 8003386:	e01d      	b.n	80033c4 <HAL_RCC_OscConfig+0xb0>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003390:	d10c      	bne.n	80033ac <HAL_RCC_OscConfig+0x98>
 8003392:	4b8b      	ldr	r3, [pc, #556]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a8a      	ldr	r2, [pc, #552]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 8003398:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800339c:	6013      	str	r3, [r2, #0]
 800339e:	4b88      	ldr	r3, [pc, #544]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a87      	ldr	r2, [pc, #540]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 80033a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033a8:	6013      	str	r3, [r2, #0]
 80033aa:	e00b      	b.n	80033c4 <HAL_RCC_OscConfig+0xb0>
 80033ac:	4b84      	ldr	r3, [pc, #528]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a83      	ldr	r2, [pc, #524]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 80033b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033b6:	6013      	str	r3, [r2, #0]
 80033b8:	4b81      	ldr	r3, [pc, #516]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a80      	ldr	r2, [pc, #512]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 80033be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d013      	beq.n	80033f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033cc:	f7fe fd3e 	bl	8001e4c <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033d4:	f7fe fd3a 	bl	8001e4c <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b64      	cmp	r3, #100	; 0x64
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e1fb      	b.n	80037de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033e6:	4b76      	ldr	r3, [pc, #472]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0f0      	beq.n	80033d4 <HAL_RCC_OscConfig+0xc0>
 80033f2:	e014      	b.n	800341e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f4:	f7fe fd2a 	bl	8001e4c <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033fc:	f7fe fd26 	bl	8001e4c <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b64      	cmp	r3, #100	; 0x64
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e1e7      	b.n	80037de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800340e:	4b6c      	ldr	r3, [pc, #432]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1f0      	bne.n	80033fc <HAL_RCC_OscConfig+0xe8>
 800341a:	e000      	b.n	800341e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800341c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d063      	beq.n	80034f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800342a:	4b65      	ldr	r3, [pc, #404]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 030c 	and.w	r3, r3, #12
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00b      	beq.n	800344e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003436:	4b62      	ldr	r3, [pc, #392]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800343e:	2b08      	cmp	r3, #8
 8003440:	d11c      	bne.n	800347c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003442:	4b5f      	ldr	r3, [pc, #380]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d116      	bne.n	800347c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800344e:	4b5c      	ldr	r3, [pc, #368]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0302 	and.w	r3, r3, #2
 8003456:	2b00      	cmp	r3, #0
 8003458:	d005      	beq.n	8003466 <HAL_RCC_OscConfig+0x152>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d001      	beq.n	8003466 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e1bb      	b.n	80037de <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003466:	4b56      	ldr	r3, [pc, #344]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	00db      	lsls	r3, r3, #3
 8003474:	4952      	ldr	r1, [pc, #328]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 8003476:	4313      	orrs	r3, r2
 8003478:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800347a:	e03a      	b.n	80034f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d020      	beq.n	80034c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003484:	4b4f      	ldr	r3, [pc, #316]	; (80035c4 <HAL_RCC_OscConfig+0x2b0>)
 8003486:	2201      	movs	r2, #1
 8003488:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800348a:	f7fe fcdf 	bl	8001e4c <HAL_GetTick>
 800348e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003490:	e008      	b.n	80034a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003492:	f7fe fcdb 	bl	8001e4c <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b02      	cmp	r3, #2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e19c      	b.n	80037de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034a4:	4b46      	ldr	r3, [pc, #280]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d0f0      	beq.n	8003492 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b0:	4b43      	ldr	r3, [pc, #268]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	691b      	ldr	r3, [r3, #16]
 80034bc:	00db      	lsls	r3, r3, #3
 80034be:	4940      	ldr	r1, [pc, #256]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	600b      	str	r3, [r1, #0]
 80034c4:	e015      	b.n	80034f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034c6:	4b3f      	ldr	r3, [pc, #252]	; (80035c4 <HAL_RCC_OscConfig+0x2b0>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034cc:	f7fe fcbe 	bl	8001e4c <HAL_GetTick>
 80034d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034d2:	e008      	b.n	80034e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034d4:	f7fe fcba 	bl	8001e4c <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d901      	bls.n	80034e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e17b      	b.n	80037de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034e6:	4b36      	ldr	r3, [pc, #216]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1f0      	bne.n	80034d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0308 	and.w	r3, r3, #8
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d030      	beq.n	8003560 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d016      	beq.n	8003534 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003506:	4b30      	ldr	r3, [pc, #192]	; (80035c8 <HAL_RCC_OscConfig+0x2b4>)
 8003508:	2201      	movs	r2, #1
 800350a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800350c:	f7fe fc9e 	bl	8001e4c <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003514:	f7fe fc9a 	bl	8001e4c <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e15b      	b.n	80037de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003526:	4b26      	ldr	r3, [pc, #152]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 8003528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d0f0      	beq.n	8003514 <HAL_RCC_OscConfig+0x200>
 8003532:	e015      	b.n	8003560 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003534:	4b24      	ldr	r3, [pc, #144]	; (80035c8 <HAL_RCC_OscConfig+0x2b4>)
 8003536:	2200      	movs	r2, #0
 8003538:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800353a:	f7fe fc87 	bl	8001e4c <HAL_GetTick>
 800353e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003540:	e008      	b.n	8003554 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003542:	f7fe fc83 	bl	8001e4c <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e144      	b.n	80037de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003554:	4b1a      	ldr	r3, [pc, #104]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 8003556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1f0      	bne.n	8003542 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b00      	cmp	r3, #0
 800356a:	f000 80a0 	beq.w	80036ae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800356e:	2300      	movs	r3, #0
 8003570:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003572:	4b13      	ldr	r3, [pc, #76]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10f      	bne.n	800359e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800357e:	2300      	movs	r3, #0
 8003580:	60bb      	str	r3, [r7, #8]
 8003582:	4b0f      	ldr	r3, [pc, #60]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	4a0e      	ldr	r2, [pc, #56]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 8003588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800358c:	6413      	str	r3, [r2, #64]	; 0x40
 800358e:	4b0c      	ldr	r3, [pc, #48]	; (80035c0 <HAL_RCC_OscConfig+0x2ac>)
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003596:	60bb      	str	r3, [r7, #8]
 8003598:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800359a:	2301      	movs	r3, #1
 800359c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800359e:	4b0b      	ldr	r3, [pc, #44]	; (80035cc <HAL_RCC_OscConfig+0x2b8>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d121      	bne.n	80035ee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035aa:	4b08      	ldr	r3, [pc, #32]	; (80035cc <HAL_RCC_OscConfig+0x2b8>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a07      	ldr	r2, [pc, #28]	; (80035cc <HAL_RCC_OscConfig+0x2b8>)
 80035b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035b6:	f7fe fc49 	bl	8001e4c <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035bc:	e011      	b.n	80035e2 <HAL_RCC_OscConfig+0x2ce>
 80035be:	bf00      	nop
 80035c0:	40023800 	.word	0x40023800
 80035c4:	42470000 	.word	0x42470000
 80035c8:	42470e80 	.word	0x42470e80
 80035cc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035d0:	f7fe fc3c 	bl	8001e4c <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e0fd      	b.n	80037de <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e2:	4b81      	ldr	r3, [pc, #516]	; (80037e8 <HAL_RCC_OscConfig+0x4d4>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0f0      	beq.n	80035d0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d106      	bne.n	8003604 <HAL_RCC_OscConfig+0x2f0>
 80035f6:	4b7d      	ldr	r3, [pc, #500]	; (80037ec <HAL_RCC_OscConfig+0x4d8>)
 80035f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fa:	4a7c      	ldr	r2, [pc, #496]	; (80037ec <HAL_RCC_OscConfig+0x4d8>)
 80035fc:	f043 0301 	orr.w	r3, r3, #1
 8003600:	6713      	str	r3, [r2, #112]	; 0x70
 8003602:	e01c      	b.n	800363e <HAL_RCC_OscConfig+0x32a>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	2b05      	cmp	r3, #5
 800360a:	d10c      	bne.n	8003626 <HAL_RCC_OscConfig+0x312>
 800360c:	4b77      	ldr	r3, [pc, #476]	; (80037ec <HAL_RCC_OscConfig+0x4d8>)
 800360e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003610:	4a76      	ldr	r2, [pc, #472]	; (80037ec <HAL_RCC_OscConfig+0x4d8>)
 8003612:	f043 0304 	orr.w	r3, r3, #4
 8003616:	6713      	str	r3, [r2, #112]	; 0x70
 8003618:	4b74      	ldr	r3, [pc, #464]	; (80037ec <HAL_RCC_OscConfig+0x4d8>)
 800361a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361c:	4a73      	ldr	r2, [pc, #460]	; (80037ec <HAL_RCC_OscConfig+0x4d8>)
 800361e:	f043 0301 	orr.w	r3, r3, #1
 8003622:	6713      	str	r3, [r2, #112]	; 0x70
 8003624:	e00b      	b.n	800363e <HAL_RCC_OscConfig+0x32a>
 8003626:	4b71      	ldr	r3, [pc, #452]	; (80037ec <HAL_RCC_OscConfig+0x4d8>)
 8003628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800362a:	4a70      	ldr	r2, [pc, #448]	; (80037ec <HAL_RCC_OscConfig+0x4d8>)
 800362c:	f023 0301 	bic.w	r3, r3, #1
 8003630:	6713      	str	r3, [r2, #112]	; 0x70
 8003632:	4b6e      	ldr	r3, [pc, #440]	; (80037ec <HAL_RCC_OscConfig+0x4d8>)
 8003634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003636:	4a6d      	ldr	r2, [pc, #436]	; (80037ec <HAL_RCC_OscConfig+0x4d8>)
 8003638:	f023 0304 	bic.w	r3, r3, #4
 800363c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d015      	beq.n	8003672 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003646:	f7fe fc01 	bl	8001e4c <HAL_GetTick>
 800364a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800364c:	e00a      	b.n	8003664 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800364e:	f7fe fbfd 	bl	8001e4c <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	f241 3288 	movw	r2, #5000	; 0x1388
 800365c:	4293      	cmp	r3, r2
 800365e:	d901      	bls.n	8003664 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e0bc      	b.n	80037de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003664:	4b61      	ldr	r3, [pc, #388]	; (80037ec <HAL_RCC_OscConfig+0x4d8>)
 8003666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d0ee      	beq.n	800364e <HAL_RCC_OscConfig+0x33a>
 8003670:	e014      	b.n	800369c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003672:	f7fe fbeb 	bl	8001e4c <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003678:	e00a      	b.n	8003690 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800367a:	f7fe fbe7 	bl	8001e4c <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	f241 3288 	movw	r2, #5000	; 0x1388
 8003688:	4293      	cmp	r3, r2
 800368a:	d901      	bls.n	8003690 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e0a6      	b.n	80037de <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003690:	4b56      	ldr	r3, [pc, #344]	; (80037ec <HAL_RCC_OscConfig+0x4d8>)
 8003692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1ee      	bne.n	800367a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800369c:	7dfb      	ldrb	r3, [r7, #23]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d105      	bne.n	80036ae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036a2:	4b52      	ldr	r3, [pc, #328]	; (80037ec <HAL_RCC_OscConfig+0x4d8>)
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	4a51      	ldr	r2, [pc, #324]	; (80037ec <HAL_RCC_OscConfig+0x4d8>)
 80036a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	699b      	ldr	r3, [r3, #24]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 8092 	beq.w	80037dc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036b8:	4b4c      	ldr	r3, [pc, #304]	; (80037ec <HAL_RCC_OscConfig+0x4d8>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f003 030c 	and.w	r3, r3, #12
 80036c0:	2b08      	cmp	r3, #8
 80036c2:	d05c      	beq.n	800377e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	699b      	ldr	r3, [r3, #24]
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d141      	bne.n	8003750 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036cc:	4b48      	ldr	r3, [pc, #288]	; (80037f0 <HAL_RCC_OscConfig+0x4dc>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d2:	f7fe fbbb 	bl	8001e4c <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036da:	f7fe fbb7 	bl	8001e4c <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e078      	b.n	80037de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ec:	4b3f      	ldr	r3, [pc, #252]	; (80037ec <HAL_RCC_OscConfig+0x4d8>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1f0      	bne.n	80036da <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	69da      	ldr	r2, [r3, #28]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	431a      	orrs	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003706:	019b      	lsls	r3, r3, #6
 8003708:	431a      	orrs	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370e:	085b      	lsrs	r3, r3, #1
 8003710:	3b01      	subs	r3, #1
 8003712:	041b      	lsls	r3, r3, #16
 8003714:	431a      	orrs	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800371a:	061b      	lsls	r3, r3, #24
 800371c:	4933      	ldr	r1, [pc, #204]	; (80037ec <HAL_RCC_OscConfig+0x4d8>)
 800371e:	4313      	orrs	r3, r2
 8003720:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003722:	4b33      	ldr	r3, [pc, #204]	; (80037f0 <HAL_RCC_OscConfig+0x4dc>)
 8003724:	2201      	movs	r2, #1
 8003726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003728:	f7fe fb90 	bl	8001e4c <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003730:	f7fe fb8c 	bl	8001e4c <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b02      	cmp	r3, #2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e04d      	b.n	80037de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003742:	4b2a      	ldr	r3, [pc, #168]	; (80037ec <HAL_RCC_OscConfig+0x4d8>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d0f0      	beq.n	8003730 <HAL_RCC_OscConfig+0x41c>
 800374e:	e045      	b.n	80037dc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003750:	4b27      	ldr	r3, [pc, #156]	; (80037f0 <HAL_RCC_OscConfig+0x4dc>)
 8003752:	2200      	movs	r2, #0
 8003754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003756:	f7fe fb79 	bl	8001e4c <HAL_GetTick>
 800375a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800375c:	e008      	b.n	8003770 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800375e:	f7fe fb75 	bl	8001e4c <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e036      	b.n	80037de <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003770:	4b1e      	ldr	r3, [pc, #120]	; (80037ec <HAL_RCC_OscConfig+0x4d8>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1f0      	bne.n	800375e <HAL_RCC_OscConfig+0x44a>
 800377c:	e02e      	b.n	80037dc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d101      	bne.n	800378a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e029      	b.n	80037de <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800378a:	4b18      	ldr	r3, [pc, #96]	; (80037ec <HAL_RCC_OscConfig+0x4d8>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	69db      	ldr	r3, [r3, #28]
 800379a:	429a      	cmp	r2, r3
 800379c:	d11c      	bne.n	80037d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d115      	bne.n	80037d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037b2:	4013      	ands	r3, r2
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d10d      	bne.n	80037d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d106      	bne.n	80037d8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d001      	beq.n	80037dc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e000      	b.n	80037de <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3718      	adds	r7, #24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	40007000 	.word	0x40007000
 80037ec:	40023800 	.word	0x40023800
 80037f0:	42470060 	.word	0x42470060

080037f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b084      	sub	sp, #16
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d101      	bne.n	8003808 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e0cc      	b.n	80039a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003808:	4b68      	ldr	r3, [pc, #416]	; (80039ac <HAL_RCC_ClockConfig+0x1b8>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 030f 	and.w	r3, r3, #15
 8003810:	683a      	ldr	r2, [r7, #0]
 8003812:	429a      	cmp	r2, r3
 8003814:	d90c      	bls.n	8003830 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003816:	4b65      	ldr	r3, [pc, #404]	; (80039ac <HAL_RCC_ClockConfig+0x1b8>)
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	b2d2      	uxtb	r2, r2
 800381c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800381e:	4b63      	ldr	r3, [pc, #396]	; (80039ac <HAL_RCC_ClockConfig+0x1b8>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 030f 	and.w	r3, r3, #15
 8003826:	683a      	ldr	r2, [r7, #0]
 8003828:	429a      	cmp	r2, r3
 800382a:	d001      	beq.n	8003830 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e0b8      	b.n	80039a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d020      	beq.n	800387e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0304 	and.w	r3, r3, #4
 8003844:	2b00      	cmp	r3, #0
 8003846:	d005      	beq.n	8003854 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003848:	4b59      	ldr	r3, [pc, #356]	; (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	4a58      	ldr	r2, [pc, #352]	; (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 800384e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003852:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0308 	and.w	r3, r3, #8
 800385c:	2b00      	cmp	r3, #0
 800385e:	d005      	beq.n	800386c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003860:	4b53      	ldr	r3, [pc, #332]	; (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	4a52      	ldr	r2, [pc, #328]	; (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003866:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800386a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800386c:	4b50      	ldr	r3, [pc, #320]	; (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	494d      	ldr	r1, [pc, #308]	; (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 800387a:	4313      	orrs	r3, r2
 800387c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b00      	cmp	r3, #0
 8003888:	d044      	beq.n	8003914 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d107      	bne.n	80038a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003892:	4b47      	ldr	r3, [pc, #284]	; (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d119      	bne.n	80038d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e07f      	b.n	80039a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d003      	beq.n	80038b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038ae:	2b03      	cmp	r3, #3
 80038b0:	d107      	bne.n	80038c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038b2:	4b3f      	ldr	r3, [pc, #252]	; (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d109      	bne.n	80038d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e06f      	b.n	80039a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c2:	4b3b      	ldr	r3, [pc, #236]	; (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e067      	b.n	80039a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038d2:	4b37      	ldr	r3, [pc, #220]	; (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f023 0203 	bic.w	r2, r3, #3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	4934      	ldr	r1, [pc, #208]	; (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 80038e0:	4313      	orrs	r3, r2
 80038e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038e4:	f7fe fab2 	bl	8001e4c <HAL_GetTick>
 80038e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ea:	e00a      	b.n	8003902 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038ec:	f7fe faae 	bl	8001e4c <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e04f      	b.n	80039a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003902:	4b2b      	ldr	r3, [pc, #172]	; (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f003 020c 	and.w	r2, r3, #12
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	429a      	cmp	r2, r3
 8003912:	d1eb      	bne.n	80038ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003914:	4b25      	ldr	r3, [pc, #148]	; (80039ac <HAL_RCC_ClockConfig+0x1b8>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 030f 	and.w	r3, r3, #15
 800391c:	683a      	ldr	r2, [r7, #0]
 800391e:	429a      	cmp	r2, r3
 8003920:	d20c      	bcs.n	800393c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003922:	4b22      	ldr	r3, [pc, #136]	; (80039ac <HAL_RCC_ClockConfig+0x1b8>)
 8003924:	683a      	ldr	r2, [r7, #0]
 8003926:	b2d2      	uxtb	r2, r2
 8003928:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800392a:	4b20      	ldr	r3, [pc, #128]	; (80039ac <HAL_RCC_ClockConfig+0x1b8>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 030f 	and.w	r3, r3, #15
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	429a      	cmp	r2, r3
 8003936:	d001      	beq.n	800393c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e032      	b.n	80039a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0304 	and.w	r3, r3, #4
 8003944:	2b00      	cmp	r3, #0
 8003946:	d008      	beq.n	800395a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003948:	4b19      	ldr	r3, [pc, #100]	; (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	4916      	ldr	r1, [pc, #88]	; (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003956:	4313      	orrs	r3, r2
 8003958:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0308 	and.w	r3, r3, #8
 8003962:	2b00      	cmp	r3, #0
 8003964:	d009      	beq.n	800397a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003966:	4b12      	ldr	r3, [pc, #72]	; (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	490e      	ldr	r1, [pc, #56]	; (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003976:	4313      	orrs	r3, r2
 8003978:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800397a:	f000 f821 	bl	80039c0 <HAL_RCC_GetSysClockFreq>
 800397e:	4601      	mov	r1, r0
 8003980:	4b0b      	ldr	r3, [pc, #44]	; (80039b0 <HAL_RCC_ClockConfig+0x1bc>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	091b      	lsrs	r3, r3, #4
 8003986:	f003 030f 	and.w	r3, r3, #15
 800398a:	4a0a      	ldr	r2, [pc, #40]	; (80039b4 <HAL_RCC_ClockConfig+0x1c0>)
 800398c:	5cd3      	ldrb	r3, [r2, r3]
 800398e:	fa21 f303 	lsr.w	r3, r1, r3
 8003992:	4a09      	ldr	r2, [pc, #36]	; (80039b8 <HAL_RCC_ClockConfig+0x1c4>)
 8003994:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003996:	4b09      	ldr	r3, [pc, #36]	; (80039bc <HAL_RCC_ClockConfig+0x1c8>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4618      	mov	r0, r3
 800399c:	f7fe fa12 	bl	8001dc4 <HAL_InitTick>

  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	40023c00 	.word	0x40023c00
 80039b0:	40023800 	.word	0x40023800
 80039b4:	08006100 	.word	0x08006100
 80039b8:	20000004 	.word	0x20000004
 80039bc:	20000008 	.word	0x20000008

080039c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80039c6:	2300      	movs	r3, #0
 80039c8:	607b      	str	r3, [r7, #4]
 80039ca:	2300      	movs	r3, #0
 80039cc:	60fb      	str	r3, [r7, #12]
 80039ce:	2300      	movs	r3, #0
 80039d0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80039d2:	2300      	movs	r3, #0
 80039d4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039d6:	4b63      	ldr	r3, [pc, #396]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f003 030c 	and.w	r3, r3, #12
 80039de:	2b04      	cmp	r3, #4
 80039e0:	d007      	beq.n	80039f2 <HAL_RCC_GetSysClockFreq+0x32>
 80039e2:	2b08      	cmp	r3, #8
 80039e4:	d008      	beq.n	80039f8 <HAL_RCC_GetSysClockFreq+0x38>
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f040 80b4 	bne.w	8003b54 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039ec:	4b5e      	ldr	r3, [pc, #376]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80039ee:	60bb      	str	r3, [r7, #8]
       break;
 80039f0:	e0b3      	b.n	8003b5a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039f2:	4b5e      	ldr	r3, [pc, #376]	; (8003b6c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80039f4:	60bb      	str	r3, [r7, #8]
      break;
 80039f6:	e0b0      	b.n	8003b5a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039f8:	4b5a      	ldr	r3, [pc, #360]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a00:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a02:	4b58      	ldr	r3, [pc, #352]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d04a      	beq.n	8003aa4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a0e:	4b55      	ldr	r3, [pc, #340]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	099b      	lsrs	r3, r3, #6
 8003a14:	f04f 0400 	mov.w	r4, #0
 8003a18:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a1c:	f04f 0200 	mov.w	r2, #0
 8003a20:	ea03 0501 	and.w	r5, r3, r1
 8003a24:	ea04 0602 	and.w	r6, r4, r2
 8003a28:	4629      	mov	r1, r5
 8003a2a:	4632      	mov	r2, r6
 8003a2c:	f04f 0300 	mov.w	r3, #0
 8003a30:	f04f 0400 	mov.w	r4, #0
 8003a34:	0154      	lsls	r4, r2, #5
 8003a36:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003a3a:	014b      	lsls	r3, r1, #5
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	4622      	mov	r2, r4
 8003a40:	1b49      	subs	r1, r1, r5
 8003a42:	eb62 0206 	sbc.w	r2, r2, r6
 8003a46:	f04f 0300 	mov.w	r3, #0
 8003a4a:	f04f 0400 	mov.w	r4, #0
 8003a4e:	0194      	lsls	r4, r2, #6
 8003a50:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003a54:	018b      	lsls	r3, r1, #6
 8003a56:	1a5b      	subs	r3, r3, r1
 8003a58:	eb64 0402 	sbc.w	r4, r4, r2
 8003a5c:	f04f 0100 	mov.w	r1, #0
 8003a60:	f04f 0200 	mov.w	r2, #0
 8003a64:	00e2      	lsls	r2, r4, #3
 8003a66:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003a6a:	00d9      	lsls	r1, r3, #3
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	4614      	mov	r4, r2
 8003a70:	195b      	adds	r3, r3, r5
 8003a72:	eb44 0406 	adc.w	r4, r4, r6
 8003a76:	f04f 0100 	mov.w	r1, #0
 8003a7a:	f04f 0200 	mov.w	r2, #0
 8003a7e:	0262      	lsls	r2, r4, #9
 8003a80:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003a84:	0259      	lsls	r1, r3, #9
 8003a86:	460b      	mov	r3, r1
 8003a88:	4614      	mov	r4, r2
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	4621      	mov	r1, r4
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f04f 0400 	mov.w	r4, #0
 8003a94:	461a      	mov	r2, r3
 8003a96:	4623      	mov	r3, r4
 8003a98:	f7fc fbfa 	bl	8000290 <__aeabi_uldivmod>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	460c      	mov	r4, r1
 8003aa0:	60fb      	str	r3, [r7, #12]
 8003aa2:	e049      	b.n	8003b38 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aa4:	4b2f      	ldr	r3, [pc, #188]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	099b      	lsrs	r3, r3, #6
 8003aaa:	f04f 0400 	mov.w	r4, #0
 8003aae:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ab2:	f04f 0200 	mov.w	r2, #0
 8003ab6:	ea03 0501 	and.w	r5, r3, r1
 8003aba:	ea04 0602 	and.w	r6, r4, r2
 8003abe:	4629      	mov	r1, r5
 8003ac0:	4632      	mov	r2, r6
 8003ac2:	f04f 0300 	mov.w	r3, #0
 8003ac6:	f04f 0400 	mov.w	r4, #0
 8003aca:	0154      	lsls	r4, r2, #5
 8003acc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003ad0:	014b      	lsls	r3, r1, #5
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	4622      	mov	r2, r4
 8003ad6:	1b49      	subs	r1, r1, r5
 8003ad8:	eb62 0206 	sbc.w	r2, r2, r6
 8003adc:	f04f 0300 	mov.w	r3, #0
 8003ae0:	f04f 0400 	mov.w	r4, #0
 8003ae4:	0194      	lsls	r4, r2, #6
 8003ae6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003aea:	018b      	lsls	r3, r1, #6
 8003aec:	1a5b      	subs	r3, r3, r1
 8003aee:	eb64 0402 	sbc.w	r4, r4, r2
 8003af2:	f04f 0100 	mov.w	r1, #0
 8003af6:	f04f 0200 	mov.w	r2, #0
 8003afa:	00e2      	lsls	r2, r4, #3
 8003afc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003b00:	00d9      	lsls	r1, r3, #3
 8003b02:	460b      	mov	r3, r1
 8003b04:	4614      	mov	r4, r2
 8003b06:	195b      	adds	r3, r3, r5
 8003b08:	eb44 0406 	adc.w	r4, r4, r6
 8003b0c:	f04f 0100 	mov.w	r1, #0
 8003b10:	f04f 0200 	mov.w	r2, #0
 8003b14:	02a2      	lsls	r2, r4, #10
 8003b16:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003b1a:	0299      	lsls	r1, r3, #10
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	4614      	mov	r4, r2
 8003b20:	4618      	mov	r0, r3
 8003b22:	4621      	mov	r1, r4
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f04f 0400 	mov.w	r4, #0
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	4623      	mov	r3, r4
 8003b2e:	f7fc fbaf 	bl	8000290 <__aeabi_uldivmod>
 8003b32:	4603      	mov	r3, r0
 8003b34:	460c      	mov	r4, r1
 8003b36:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b38:	4b0a      	ldr	r3, [pc, #40]	; (8003b64 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	0c1b      	lsrs	r3, r3, #16
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	3301      	adds	r3, #1
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b50:	60bb      	str	r3, [r7, #8]
      break;
 8003b52:	e002      	b.n	8003b5a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b54:	4b04      	ldr	r3, [pc, #16]	; (8003b68 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003b56:	60bb      	str	r3, [r7, #8]
      break;
 8003b58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b5a:	68bb      	ldr	r3, [r7, #8]
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3714      	adds	r7, #20
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b64:	40023800 	.word	0x40023800
 8003b68:	00f42400 	.word	0x00f42400
 8003b6c:	007a1200 	.word	0x007a1200

08003b70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b70:	b480      	push	{r7}
 8003b72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b74:	4b03      	ldr	r3, [pc, #12]	; (8003b84 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b76:	681b      	ldr	r3, [r3, #0]
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	20000004 	.word	0x20000004

08003b88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b8c:	f7ff fff0 	bl	8003b70 <HAL_RCC_GetHCLKFreq>
 8003b90:	4601      	mov	r1, r0
 8003b92:	4b05      	ldr	r3, [pc, #20]	; (8003ba8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	0a9b      	lsrs	r3, r3, #10
 8003b98:	f003 0307 	and.w	r3, r3, #7
 8003b9c:	4a03      	ldr	r2, [pc, #12]	; (8003bac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b9e:	5cd3      	ldrb	r3, [r2, r3]
 8003ba0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	40023800 	.word	0x40023800
 8003bac:	08006110 	.word	0x08006110

08003bb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003bb4:	f7ff ffdc 	bl	8003b70 <HAL_RCC_GetHCLKFreq>
 8003bb8:	4601      	mov	r1, r0
 8003bba:	4b05      	ldr	r3, [pc, #20]	; (8003bd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	0b5b      	lsrs	r3, r3, #13
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	4a03      	ldr	r2, [pc, #12]	; (8003bd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003bc6:	5cd3      	ldrb	r3, [r2, r3]
 8003bc8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	40023800 	.word	0x40023800
 8003bd4:	08006110 	.word	0x08006110

08003bd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e01d      	b.n	8003c26 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d106      	bne.n	8003c04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f7fd fe70 	bl	80018e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2202      	movs	r2, #2
 8003c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	3304      	adds	r3, #4
 8003c14:	4619      	mov	r1, r3
 8003c16:	4610      	mov	r0, r2
 8003c18:	f000 fc92 	bl	8004540 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b082      	sub	sp, #8
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d101      	bne.n	8003c40 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e01d      	b.n	8003c7c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d106      	bne.n	8003c5a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f7fd fed7 	bl	8001a08 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2202      	movs	r2, #2
 8003c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	3304      	adds	r3, #4
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	4610      	mov	r0, r2
 8003c6e:	f000 fc67 	bl	8004540 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3708      	adds	r7, #8
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2201      	movs	r2, #1
 8003c94:	6839      	ldr	r1, [r7, #0]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f001 f816 	bl	8004cc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a10      	ldr	r2, [pc, #64]	; (8003ce4 <HAL_TIM_PWM_Start+0x60>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d107      	bne.n	8003cb6 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cb4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2b06      	cmp	r3, #6
 8003cc6:	d007      	beq.n	8003cd8 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f042 0201 	orr.w	r2, r2, #1
 8003cd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	40010000 	.word	0x40010000

08003ce8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e01d      	b.n	8003d36 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d106      	bne.n	8003d14 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 f815 	bl	8003d3e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2202      	movs	r2, #2
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	3304      	adds	r3, #4
 8003d24:	4619      	mov	r1, r3
 8003d26:	4610      	mov	r0, r2
 8003d28:	f000 fc0a 	bl	8004540 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d34:	2300      	movs	r3, #0
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3708      	adds	r7, #8
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b083      	sub	sp, #12
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003d46:	bf00      	nop
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
	...

08003d54 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	2b0c      	cmp	r3, #12
 8003d62:	d841      	bhi.n	8003de8 <HAL_TIM_IC_Start_IT+0x94>
 8003d64:	a201      	add	r2, pc, #4	; (adr r2, 8003d6c <HAL_TIM_IC_Start_IT+0x18>)
 8003d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6a:	bf00      	nop
 8003d6c:	08003da1 	.word	0x08003da1
 8003d70:	08003de9 	.word	0x08003de9
 8003d74:	08003de9 	.word	0x08003de9
 8003d78:	08003de9 	.word	0x08003de9
 8003d7c:	08003db3 	.word	0x08003db3
 8003d80:	08003de9 	.word	0x08003de9
 8003d84:	08003de9 	.word	0x08003de9
 8003d88:	08003de9 	.word	0x08003de9
 8003d8c:	08003dc5 	.word	0x08003dc5
 8003d90:	08003de9 	.word	0x08003de9
 8003d94:	08003de9 	.word	0x08003de9
 8003d98:	08003de9 	.word	0x08003de9
 8003d9c:	08003dd7 	.word	0x08003dd7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68da      	ldr	r2, [r3, #12]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f042 0202 	orr.w	r2, r2, #2
 8003dae:	60da      	str	r2, [r3, #12]
      break;
 8003db0:	e01b      	b.n	8003dea <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68da      	ldr	r2, [r3, #12]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f042 0204 	orr.w	r2, r2, #4
 8003dc0:	60da      	str	r2, [r3, #12]
      break;
 8003dc2:	e012      	b.n	8003dea <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68da      	ldr	r2, [r3, #12]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f042 0208 	orr.w	r2, r2, #8
 8003dd2:	60da      	str	r2, [r3, #12]
      break;
 8003dd4:	e009      	b.n	8003dea <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68da      	ldr	r2, [r3, #12]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f042 0210 	orr.w	r2, r2, #16
 8003de4:	60da      	str	r2, [r3, #12]
      break;
 8003de6:	e000      	b.n	8003dea <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8003de8:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2201      	movs	r2, #1
 8003df0:	6839      	ldr	r1, [r7, #0]
 8003df2:	4618      	mov	r0, r3
 8003df4:	f000 ff68 	bl	8004cc8 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f003 0307 	and.w	r3, r3, #7
 8003e02:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2b06      	cmp	r3, #6
 8003e08:	d007      	beq.n	8003e1a <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f042 0201 	orr.w	r2, r2, #1
 8003e18:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e1a:	2300      	movs	r3, #0
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3710      	adds	r7, #16
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d122      	bne.n	8003e80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	f003 0302 	and.w	r3, r3, #2
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d11b      	bne.n	8003e80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f06f 0202 	mvn.w	r2, #2
 8003e50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	f003 0303 	and.w	r3, r3, #3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d003      	beq.n	8003e6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e66:	6878      	ldr	r0, [r7, #4]
 8003e68:	f7fd fc4e 	bl	8001708 <HAL_TIM_IC_CaptureCallback>
 8003e6c:	e005      	b.n	8003e7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 fb48 	bl	8004504 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 fb4f 	bl	8004518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	f003 0304 	and.w	r3, r3, #4
 8003e8a:	2b04      	cmp	r3, #4
 8003e8c:	d122      	bne.n	8003ed4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	f003 0304 	and.w	r3, r3, #4
 8003e98:	2b04      	cmp	r3, #4
 8003e9a:	d11b      	bne.n	8003ed4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f06f 0204 	mvn.w	r2, #4
 8003ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2202      	movs	r2, #2
 8003eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d003      	beq.n	8003ec2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f7fd fc24 	bl	8001708 <HAL_TIM_IC_CaptureCallback>
 8003ec0:	e005      	b.n	8003ece <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f000 fb1e 	bl	8004504 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	f000 fb25 	bl	8004518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	f003 0308 	and.w	r3, r3, #8
 8003ede:	2b08      	cmp	r3, #8
 8003ee0:	d122      	bne.n	8003f28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	f003 0308 	and.w	r3, r3, #8
 8003eec:	2b08      	cmp	r3, #8
 8003eee:	d11b      	bne.n	8003f28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f06f 0208 	mvn.w	r2, #8
 8003ef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2204      	movs	r2, #4
 8003efe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	69db      	ldr	r3, [r3, #28]
 8003f06:	f003 0303 	and.w	r3, r3, #3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7fd fbfa 	bl	8001708 <HAL_TIM_IC_CaptureCallback>
 8003f14:	e005      	b.n	8003f22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 faf4 	bl	8004504 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 fafb 	bl	8004518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	f003 0310 	and.w	r3, r3, #16
 8003f32:	2b10      	cmp	r3, #16
 8003f34:	d122      	bne.n	8003f7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	f003 0310 	and.w	r3, r3, #16
 8003f40:	2b10      	cmp	r3, #16
 8003f42:	d11b      	bne.n	8003f7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f06f 0210 	mvn.w	r2, #16
 8003f4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2208      	movs	r2, #8
 8003f52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	69db      	ldr	r3, [r3, #28]
 8003f5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d003      	beq.n	8003f6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7fd fbd0 	bl	8001708 <HAL_TIM_IC_CaptureCallback>
 8003f68:	e005      	b.n	8003f76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 faca 	bl	8004504 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 fad1 	bl	8004518 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d10e      	bne.n	8003fa8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	f003 0301 	and.w	r3, r3, #1
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d107      	bne.n	8003fa8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f06f 0201 	mvn.w	r2, #1
 8003fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 faa4 	bl	80044f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fb2:	2b80      	cmp	r3, #128	; 0x80
 8003fb4:	d10e      	bne.n	8003fd4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fc0:	2b80      	cmp	r3, #128	; 0x80
 8003fc2:	d107      	bne.n	8003fd4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 ff6a 	bl	8004ea8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fde:	2b40      	cmp	r3, #64	; 0x40
 8003fe0:	d10e      	bne.n	8004000 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fec:	2b40      	cmp	r3, #64	; 0x40
 8003fee:	d107      	bne.n	8004000 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 fa96 	bl	800452c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	f003 0320 	and.w	r3, r3, #32
 800400a:	2b20      	cmp	r3, #32
 800400c:	d10e      	bne.n	800402c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	f003 0320 	and.w	r3, r3, #32
 8004018:	2b20      	cmp	r3, #32
 800401a:	d107      	bne.n	800402c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f06f 0220 	mvn.w	r2, #32
 8004024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 ff34 	bl	8004e94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800402c:	bf00      	nop
 800402e:	3708      	adds	r7, #8
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004046:	2b01      	cmp	r3, #1
 8004048:	d101      	bne.n	800404e <HAL_TIM_IC_ConfigChannel+0x1a>
 800404a:	2302      	movs	r3, #2
 800404c:	e08a      	b.n	8004164 <HAL_TIM_IC_ConfigChannel+0x130>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2201      	movs	r2, #1
 8004052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2202      	movs	r2, #2
 800405a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d11b      	bne.n	800409c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6818      	ldr	r0, [r3, #0]
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	6819      	ldr	r1, [r3, #0]
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	685a      	ldr	r2, [r3, #4]
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	f000 fc70 	bl	8004958 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	699a      	ldr	r2, [r3, #24]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 020c 	bic.w	r2, r2, #12
 8004086:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6999      	ldr	r1, [r3, #24]
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	689a      	ldr	r2, [r3, #8]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	430a      	orrs	r2, r1
 8004098:	619a      	str	r2, [r3, #24]
 800409a:	e05a      	b.n	8004152 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b04      	cmp	r3, #4
 80040a0:	d11c      	bne.n	80040dc <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6818      	ldr	r0, [r3, #0]
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	6819      	ldr	r1, [r3, #0]
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	f000 fce8 	bl	8004a86 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	699a      	ldr	r2, [r3, #24]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80040c4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6999      	ldr	r1, [r3, #24]
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	021a      	lsls	r2, r3, #8
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	619a      	str	r2, [r3, #24]
 80040da:	e03a      	b.n	8004152 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b08      	cmp	r3, #8
 80040e0:	d11b      	bne.n	800411a <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6818      	ldr	r0, [r3, #0]
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	6819      	ldr	r1, [r3, #0]
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	685a      	ldr	r2, [r3, #4]
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	f000 fd35 	bl	8004b60 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	69da      	ldr	r2, [r3, #28]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 020c 	bic.w	r2, r2, #12
 8004104:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	69d9      	ldr	r1, [r3, #28]
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	689a      	ldr	r2, [r3, #8]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	430a      	orrs	r2, r1
 8004116:	61da      	str	r2, [r3, #28]
 8004118:	e01b      	b.n	8004152 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6818      	ldr	r0, [r3, #0]
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	6819      	ldr	r1, [r3, #0]
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	685a      	ldr	r2, [r3, #4]
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	f000 fd55 	bl	8004bd8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	69da      	ldr	r2, [r3, #28]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800413c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	69d9      	ldr	r1, [r3, #28]
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	021a      	lsls	r2, r3, #8
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3710      	adds	r7, #16
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800417e:	2b01      	cmp	r3, #1
 8004180:	d101      	bne.n	8004186 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004182:	2302      	movs	r3, #2
 8004184:	e0b4      	b.n	80042f0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2202      	movs	r2, #2
 8004192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2b0c      	cmp	r3, #12
 800419a:	f200 809f 	bhi.w	80042dc <HAL_TIM_PWM_ConfigChannel+0x170>
 800419e:	a201      	add	r2, pc, #4	; (adr r2, 80041a4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80041a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a4:	080041d9 	.word	0x080041d9
 80041a8:	080042dd 	.word	0x080042dd
 80041ac:	080042dd 	.word	0x080042dd
 80041b0:	080042dd 	.word	0x080042dd
 80041b4:	08004219 	.word	0x08004219
 80041b8:	080042dd 	.word	0x080042dd
 80041bc:	080042dd 	.word	0x080042dd
 80041c0:	080042dd 	.word	0x080042dd
 80041c4:	0800425b 	.word	0x0800425b
 80041c8:	080042dd 	.word	0x080042dd
 80041cc:	080042dd 	.word	0x080042dd
 80041d0:	080042dd 	.word	0x080042dd
 80041d4:	0800429b 	.word	0x0800429b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68b9      	ldr	r1, [r7, #8]
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 fa2e 	bl	8004640 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	699a      	ldr	r2, [r3, #24]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f042 0208 	orr.w	r2, r2, #8
 80041f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	699a      	ldr	r2, [r3, #24]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f022 0204 	bic.w	r2, r2, #4
 8004202:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6999      	ldr	r1, [r3, #24]
 800420a:	68bb      	ldr	r3, [r7, #8]
 800420c:	691a      	ldr	r2, [r3, #16]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	430a      	orrs	r2, r1
 8004214:	619a      	str	r2, [r3, #24]
      break;
 8004216:	e062      	b.n	80042de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	68b9      	ldr	r1, [r7, #8]
 800421e:	4618      	mov	r0, r3
 8004220:	f000 fa74 	bl	800470c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	699a      	ldr	r2, [r3, #24]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004232:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	699a      	ldr	r2, [r3, #24]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004242:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6999      	ldr	r1, [r3, #24]
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	021a      	lsls	r2, r3, #8
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	430a      	orrs	r2, r1
 8004256:	619a      	str	r2, [r3, #24]
      break;
 8004258:	e041      	b.n	80042de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68b9      	ldr	r1, [r7, #8]
 8004260:	4618      	mov	r0, r3
 8004262:	f000 fabf 	bl	80047e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	69da      	ldr	r2, [r3, #28]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f042 0208 	orr.w	r2, r2, #8
 8004274:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	69da      	ldr	r2, [r3, #28]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f022 0204 	bic.w	r2, r2, #4
 8004284:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	69d9      	ldr	r1, [r3, #28]
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	691a      	ldr	r2, [r3, #16]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	430a      	orrs	r2, r1
 8004296:	61da      	str	r2, [r3, #28]
      break;
 8004298:	e021      	b.n	80042de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68b9      	ldr	r1, [r7, #8]
 80042a0:	4618      	mov	r0, r3
 80042a2:	f000 fb09 	bl	80048b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	69da      	ldr	r2, [r3, #28]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	69da      	ldr	r2, [r3, #28]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	69d9      	ldr	r1, [r3, #28]
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	021a      	lsls	r2, r3, #8
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	430a      	orrs	r2, r1
 80042d8:	61da      	str	r2, [r3, #28]
      break;
 80042da:	e000      	b.n	80042de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80042dc:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004308:	2b01      	cmp	r3, #1
 800430a:	d101      	bne.n	8004310 <HAL_TIM_ConfigClockSource+0x18>
 800430c:	2302      	movs	r3, #2
 800430e:	e0a6      	b.n	800445e <HAL_TIM_ConfigClockSource+0x166>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2202      	movs	r2, #2
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800432e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004336:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2b40      	cmp	r3, #64	; 0x40
 8004346:	d067      	beq.n	8004418 <HAL_TIM_ConfigClockSource+0x120>
 8004348:	2b40      	cmp	r3, #64	; 0x40
 800434a:	d80b      	bhi.n	8004364 <HAL_TIM_ConfigClockSource+0x6c>
 800434c:	2b10      	cmp	r3, #16
 800434e:	d073      	beq.n	8004438 <HAL_TIM_ConfigClockSource+0x140>
 8004350:	2b10      	cmp	r3, #16
 8004352:	d802      	bhi.n	800435a <HAL_TIM_ConfigClockSource+0x62>
 8004354:	2b00      	cmp	r3, #0
 8004356:	d06f      	beq.n	8004438 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004358:	e078      	b.n	800444c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800435a:	2b20      	cmp	r3, #32
 800435c:	d06c      	beq.n	8004438 <HAL_TIM_ConfigClockSource+0x140>
 800435e:	2b30      	cmp	r3, #48	; 0x30
 8004360:	d06a      	beq.n	8004438 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004362:	e073      	b.n	800444c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004364:	2b70      	cmp	r3, #112	; 0x70
 8004366:	d00d      	beq.n	8004384 <HAL_TIM_ConfigClockSource+0x8c>
 8004368:	2b70      	cmp	r3, #112	; 0x70
 800436a:	d804      	bhi.n	8004376 <HAL_TIM_ConfigClockSource+0x7e>
 800436c:	2b50      	cmp	r3, #80	; 0x50
 800436e:	d033      	beq.n	80043d8 <HAL_TIM_ConfigClockSource+0xe0>
 8004370:	2b60      	cmp	r3, #96	; 0x60
 8004372:	d041      	beq.n	80043f8 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004374:	e06a      	b.n	800444c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800437a:	d066      	beq.n	800444a <HAL_TIM_ConfigClockSource+0x152>
 800437c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004380:	d017      	beq.n	80043b2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004382:	e063      	b.n	800444c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6818      	ldr	r0, [r3, #0]
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	6899      	ldr	r1, [r3, #8]
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f000 fc78 	bl	8004c88 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80043a6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	609a      	str	r2, [r3, #8]
      break;
 80043b0:	e04c      	b.n	800444c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6818      	ldr	r0, [r3, #0]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	6899      	ldr	r1, [r3, #8]
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	f000 fc61 	bl	8004c88 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	689a      	ldr	r2, [r3, #8]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043d4:	609a      	str	r2, [r3, #8]
      break;
 80043d6:	e039      	b.n	800444c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6818      	ldr	r0, [r3, #0]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	6859      	ldr	r1, [r3, #4]
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	461a      	mov	r2, r3
 80043e6:	f000 fb1f 	bl	8004a28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	2150      	movs	r1, #80	; 0x50
 80043f0:	4618      	mov	r0, r3
 80043f2:	f000 fc2e 	bl	8004c52 <TIM_ITRx_SetConfig>
      break;
 80043f6:	e029      	b.n	800444c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6818      	ldr	r0, [r3, #0]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	6859      	ldr	r1, [r3, #4]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	461a      	mov	r2, r3
 8004406:	f000 fb7b 	bl	8004b00 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	2160      	movs	r1, #96	; 0x60
 8004410:	4618      	mov	r0, r3
 8004412:	f000 fc1e 	bl	8004c52 <TIM_ITRx_SetConfig>
      break;
 8004416:	e019      	b.n	800444c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6818      	ldr	r0, [r3, #0]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	6859      	ldr	r1, [r3, #4]
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	461a      	mov	r2, r3
 8004426:	f000 faff 	bl	8004a28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	2140      	movs	r1, #64	; 0x40
 8004430:	4618      	mov	r0, r3
 8004432:	f000 fc0e 	bl	8004c52 <TIM_ITRx_SetConfig>
      break;
 8004436:	e009      	b.n	800444c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4619      	mov	r1, r3
 8004442:	4610      	mov	r0, r2
 8004444:	f000 fc05 	bl	8004c52 <TIM_ITRx_SetConfig>
      break;
 8004448:	e000      	b.n	800444c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800444a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
	...

08004468 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004472:	2300      	movs	r3, #0
 8004474:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	2b0c      	cmp	r3, #12
 800447a:	d831      	bhi.n	80044e0 <HAL_TIM_ReadCapturedValue+0x78>
 800447c:	a201      	add	r2, pc, #4	; (adr r2, 8004484 <HAL_TIM_ReadCapturedValue+0x1c>)
 800447e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004482:	bf00      	nop
 8004484:	080044b9 	.word	0x080044b9
 8004488:	080044e1 	.word	0x080044e1
 800448c:	080044e1 	.word	0x080044e1
 8004490:	080044e1 	.word	0x080044e1
 8004494:	080044c3 	.word	0x080044c3
 8004498:	080044e1 	.word	0x080044e1
 800449c:	080044e1 	.word	0x080044e1
 80044a0:	080044e1 	.word	0x080044e1
 80044a4:	080044cd 	.word	0x080044cd
 80044a8:	080044e1 	.word	0x080044e1
 80044ac:	080044e1 	.word	0x080044e1
 80044b0:	080044e1 	.word	0x080044e1
 80044b4:	080044d7 	.word	0x080044d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044be:	60fb      	str	r3, [r7, #12]

      break;
 80044c0:	e00f      	b.n	80044e2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c8:	60fb      	str	r3, [r7, #12]

      break;
 80044ca:	e00a      	b.n	80044e2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d2:	60fb      	str	r3, [r7, #12]

      break;
 80044d4:	e005      	b.n	80044e2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044dc:	60fb      	str	r3, [r7, #12]

      break;
 80044de:	e000      	b.n	80044e2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80044e0:	bf00      	nop
  }

  return tmpreg;
 80044e2:	68fb      	ldr	r3, [r7, #12]
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3714      	adds	r7, #20
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80044f8:	bf00      	nop
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800450c:	bf00      	nop
 800450e:	370c      	adds	r7, #12
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr

08004518 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004534:	bf00      	nop
 8004536:	370c      	adds	r7, #12
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a34      	ldr	r2, [pc, #208]	; (8004624 <TIM_Base_SetConfig+0xe4>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d00f      	beq.n	8004578 <TIM_Base_SetConfig+0x38>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800455e:	d00b      	beq.n	8004578 <TIM_Base_SetConfig+0x38>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a31      	ldr	r2, [pc, #196]	; (8004628 <TIM_Base_SetConfig+0xe8>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d007      	beq.n	8004578 <TIM_Base_SetConfig+0x38>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a30      	ldr	r2, [pc, #192]	; (800462c <TIM_Base_SetConfig+0xec>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d003      	beq.n	8004578 <TIM_Base_SetConfig+0x38>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a2f      	ldr	r2, [pc, #188]	; (8004630 <TIM_Base_SetConfig+0xf0>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d108      	bne.n	800458a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800457e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	4313      	orrs	r3, r2
 8004588:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a25      	ldr	r2, [pc, #148]	; (8004624 <TIM_Base_SetConfig+0xe4>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d01b      	beq.n	80045ca <TIM_Base_SetConfig+0x8a>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004598:	d017      	beq.n	80045ca <TIM_Base_SetConfig+0x8a>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a22      	ldr	r2, [pc, #136]	; (8004628 <TIM_Base_SetConfig+0xe8>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d013      	beq.n	80045ca <TIM_Base_SetConfig+0x8a>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a21      	ldr	r2, [pc, #132]	; (800462c <TIM_Base_SetConfig+0xec>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d00f      	beq.n	80045ca <TIM_Base_SetConfig+0x8a>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a20      	ldr	r2, [pc, #128]	; (8004630 <TIM_Base_SetConfig+0xf0>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d00b      	beq.n	80045ca <TIM_Base_SetConfig+0x8a>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a1f      	ldr	r2, [pc, #124]	; (8004634 <TIM_Base_SetConfig+0xf4>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d007      	beq.n	80045ca <TIM_Base_SetConfig+0x8a>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a1e      	ldr	r2, [pc, #120]	; (8004638 <TIM_Base_SetConfig+0xf8>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d003      	beq.n	80045ca <TIM_Base_SetConfig+0x8a>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a1d      	ldr	r2, [pc, #116]	; (800463c <TIM_Base_SetConfig+0xfc>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d108      	bne.n	80045dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	4313      	orrs	r3, r2
 80045da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	689a      	ldr	r2, [r3, #8]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a08      	ldr	r2, [pc, #32]	; (8004624 <TIM_Base_SetConfig+0xe4>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d103      	bne.n	8004610 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	691a      	ldr	r2, [r3, #16]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	615a      	str	r2, [r3, #20]
}
 8004616:	bf00      	nop
 8004618:	3714      	adds	r7, #20
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
 8004622:	bf00      	nop
 8004624:	40010000 	.word	0x40010000
 8004628:	40000400 	.word	0x40000400
 800462c:	40000800 	.word	0x40000800
 8004630:	40000c00 	.word	0x40000c00
 8004634:	40014000 	.word	0x40014000
 8004638:	40014400 	.word	0x40014400
 800463c:	40014800 	.word	0x40014800

08004640 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004640:	b480      	push	{r7}
 8004642:	b087      	sub	sp, #28
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	f023 0201 	bic.w	r2, r3, #1
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800466e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	f023 0303 	bic.w	r3, r3, #3
 8004676:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68fa      	ldr	r2, [r7, #12]
 800467e:	4313      	orrs	r3, r2
 8004680:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	f023 0302 	bic.w	r3, r3, #2
 8004688:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	697a      	ldr	r2, [r7, #20]
 8004690:	4313      	orrs	r3, r2
 8004692:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	4a1c      	ldr	r2, [pc, #112]	; (8004708 <TIM_OC1_SetConfig+0xc8>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d10c      	bne.n	80046b6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	f023 0308 	bic.w	r3, r3, #8
 80046a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f023 0304 	bic.w	r3, r3, #4
 80046b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a13      	ldr	r2, [pc, #76]	; (8004708 <TIM_OC1_SetConfig+0xc8>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d111      	bne.n	80046e2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80046c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80046cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	4313      	orrs	r3, r2
 80046e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	68fa      	ldr	r2, [r7, #12]
 80046ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685a      	ldr	r2, [r3, #4]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	621a      	str	r2, [r3, #32]
}
 80046fc:	bf00      	nop
 80046fe:	371c      	adds	r7, #28
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr
 8004708:	40010000 	.word	0x40010000

0800470c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800470c:	b480      	push	{r7}
 800470e:	b087      	sub	sp, #28
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	f023 0210 	bic.w	r2, r3, #16
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a1b      	ldr	r3, [r3, #32]
 8004726:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800473a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004742:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	021b      	lsls	r3, r3, #8
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	4313      	orrs	r3, r2
 800474e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	f023 0320 	bic.w	r3, r3, #32
 8004756:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	011b      	lsls	r3, r3, #4
 800475e:	697a      	ldr	r2, [r7, #20]
 8004760:	4313      	orrs	r3, r2
 8004762:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	4a1e      	ldr	r2, [pc, #120]	; (80047e0 <TIM_OC2_SetConfig+0xd4>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d10d      	bne.n	8004788 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004772:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	011b      	lsls	r3, r3, #4
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	4313      	orrs	r3, r2
 800477e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004786:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a15      	ldr	r2, [pc, #84]	; (80047e0 <TIM_OC2_SetConfig+0xd4>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d113      	bne.n	80047b8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004796:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800479e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	695b      	ldr	r3, [r3, #20]
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	693a      	ldr	r2, [r7, #16]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	699b      	ldr	r3, [r3, #24]
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	693a      	ldr	r2, [r7, #16]
 80047b4:	4313      	orrs	r3, r2
 80047b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	693a      	ldr	r2, [r7, #16]
 80047bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68fa      	ldr	r2, [r7, #12]
 80047c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	685a      	ldr	r2, [r3, #4]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	621a      	str	r2, [r3, #32]
}
 80047d2:	bf00      	nop
 80047d4:	371c      	adds	r7, #28
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr
 80047de:	bf00      	nop
 80047e0:	40010000 	.word	0x40010000

080047e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b087      	sub	sp, #28
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6a1b      	ldr	r3, [r3, #32]
 80047f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6a1b      	ldr	r3, [r3, #32]
 80047fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	69db      	ldr	r3, [r3, #28]
 800480a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f023 0303 	bic.w	r3, r3, #3
 800481a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	4313      	orrs	r3, r2
 8004824:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800482c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	021b      	lsls	r3, r3, #8
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	4313      	orrs	r3, r2
 8004838:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a1d      	ldr	r2, [pc, #116]	; (80048b4 <TIM_OC3_SetConfig+0xd0>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d10d      	bne.n	800485e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004848:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	021b      	lsls	r3, r3, #8
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	4313      	orrs	r3, r2
 8004854:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800485c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a14      	ldr	r2, [pc, #80]	; (80048b4 <TIM_OC3_SetConfig+0xd0>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d113      	bne.n	800488e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004866:	693b      	ldr	r3, [r7, #16]
 8004868:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800486c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004874:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	011b      	lsls	r3, r3, #4
 800487c:	693a      	ldr	r2, [r7, #16]
 800487e:	4313      	orrs	r3, r2
 8004880:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	011b      	lsls	r3, r3, #4
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	4313      	orrs	r3, r2
 800488c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	685a      	ldr	r2, [r3, #4]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	697a      	ldr	r2, [r7, #20]
 80048a6:	621a      	str	r2, [r3, #32]
}
 80048a8:	bf00      	nop
 80048aa:	371c      	adds	r7, #28
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr
 80048b4:	40010000 	.word	0x40010000

080048b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b087      	sub	sp, #28
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a1b      	ldr	r3, [r3, #32]
 80048c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a1b      	ldr	r3, [r3, #32]
 80048d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	69db      	ldr	r3, [r3, #28]
 80048de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	021b      	lsls	r3, r3, #8
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004902:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	031b      	lsls	r3, r3, #12
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	4313      	orrs	r3, r2
 800490e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	4a10      	ldr	r2, [pc, #64]	; (8004954 <TIM_OC4_SetConfig+0x9c>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d109      	bne.n	800492c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800491e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	019b      	lsls	r3, r3, #6
 8004926:	697a      	ldr	r2, [r7, #20]
 8004928:	4313      	orrs	r3, r2
 800492a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	697a      	ldr	r2, [r7, #20]
 8004930:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	685a      	ldr	r2, [r3, #4]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	621a      	str	r2, [r3, #32]
}
 8004946:	bf00      	nop
 8004948:	371c      	adds	r7, #28
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr
 8004952:	bf00      	nop
 8004954:	40010000 	.word	0x40010000

08004958 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004958:	b480      	push	{r7}
 800495a:	b087      	sub	sp, #28
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
 8004964:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	f023 0201 	bic.w	r2, r3, #1
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6a1b      	ldr	r3, [r3, #32]
 800497c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	4a24      	ldr	r2, [pc, #144]	; (8004a14 <TIM_TI1_SetConfig+0xbc>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d013      	beq.n	80049ae <TIM_TI1_SetConfig+0x56>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800498c:	d00f      	beq.n	80049ae <TIM_TI1_SetConfig+0x56>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	4a21      	ldr	r2, [pc, #132]	; (8004a18 <TIM_TI1_SetConfig+0xc0>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d00b      	beq.n	80049ae <TIM_TI1_SetConfig+0x56>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	4a20      	ldr	r2, [pc, #128]	; (8004a1c <TIM_TI1_SetConfig+0xc4>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d007      	beq.n	80049ae <TIM_TI1_SetConfig+0x56>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	4a1f      	ldr	r2, [pc, #124]	; (8004a20 <TIM_TI1_SetConfig+0xc8>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d003      	beq.n	80049ae <TIM_TI1_SetConfig+0x56>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	4a1e      	ldr	r2, [pc, #120]	; (8004a24 <TIM_TI1_SetConfig+0xcc>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d101      	bne.n	80049b2 <TIM_TI1_SetConfig+0x5a>
 80049ae:	2301      	movs	r3, #1
 80049b0:	e000      	b.n	80049b4 <TIM_TI1_SetConfig+0x5c>
 80049b2:	2300      	movs	r3, #0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d008      	beq.n	80049ca <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	f023 0303 	bic.w	r3, r3, #3
 80049be:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	617b      	str	r3, [r7, #20]
 80049c8:	e003      	b.n	80049d2 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	f043 0301 	orr.w	r3, r3, #1
 80049d0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	011b      	lsls	r3, r3, #4
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	697a      	ldr	r2, [r7, #20]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	f023 030a 	bic.w	r3, r3, #10
 80049ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	f003 030a 	and.w	r3, r3, #10
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	693a      	ldr	r2, [r7, #16]
 8004a04:	621a      	str	r2, [r3, #32]
}
 8004a06:	bf00      	nop
 8004a08:	371c      	adds	r7, #28
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	40010000 	.word	0x40010000
 8004a18:	40000400 	.word	0x40000400
 8004a1c:	40000800 	.word	0x40000800
 8004a20:	40000c00 	.word	0x40000c00
 8004a24:	40014000 	.word	0x40014000

08004a28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b087      	sub	sp, #28
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6a1b      	ldr	r3, [r3, #32]
 8004a3e:	f023 0201 	bic.w	r2, r3, #1
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	011b      	lsls	r3, r3, #4
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a5e:	697b      	ldr	r3, [r7, #20]
 8004a60:	f023 030a 	bic.w	r3, r3, #10
 8004a64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	621a      	str	r2, [r3, #32]
}
 8004a7a:	bf00      	nop
 8004a7c:	371c      	adds	r7, #28
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b087      	sub	sp, #28
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	60f8      	str	r0, [r7, #12]
 8004a8e:	60b9      	str	r1, [r7, #8]
 8004a90:	607a      	str	r2, [r7, #4]
 8004a92:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6a1b      	ldr	r3, [r3, #32]
 8004a98:	f023 0210 	bic.w	r2, r3, #16
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	699b      	ldr	r3, [r3, #24]
 8004aa4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ab2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	021b      	lsls	r3, r3, #8
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ac4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	031b      	lsls	r3, r3, #12
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	697a      	ldr	r2, [r7, #20]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004ad8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	011b      	lsls	r3, r3, #4
 8004ade:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004ae2:	693a      	ldr	r2, [r7, #16]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	621a      	str	r2, [r3, #32]
}
 8004af4:	bf00      	nop
 8004af6:	371c      	adds	r7, #28
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b087      	sub	sp, #28
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6a1b      	ldr	r3, [r3, #32]
 8004b10:	f023 0210 	bic.w	r2, r3, #16
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	699b      	ldr	r3, [r3, #24]
 8004b1c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b2a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	031b      	lsls	r3, r3, #12
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	4313      	orrs	r3, r2
 8004b34:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b3c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	011b      	lsls	r3, r3, #4
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	697a      	ldr	r2, [r7, #20]
 8004b4c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	693a      	ldr	r2, [r7, #16]
 8004b52:	621a      	str	r2, [r3, #32]
}
 8004b54:	bf00      	nop
 8004b56:	371c      	adds	r7, #28
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b087      	sub	sp, #28
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]
 8004b6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	6a1b      	ldr	r3, [r3, #32]
 8004b72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	69db      	ldr	r3, [r3, #28]
 8004b7e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6a1b      	ldr	r3, [r3, #32]
 8004b84:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	f023 0303 	bic.w	r3, r3, #3
 8004b8c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b9c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	011b      	lsls	r3, r3, #4
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	697a      	ldr	r2, [r7, #20]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004bb0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	021b      	lsls	r3, r3, #8
 8004bb6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	621a      	str	r2, [r3, #32]
}
 8004bcc:	bf00      	nop
 8004bce:	371c      	adds	r7, #28
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b087      	sub	sp, #28
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
 8004be4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	69db      	ldr	r3, [r3, #28]
 8004bf6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6a1b      	ldr	r3, [r3, #32]
 8004bfc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c04:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	021b      	lsls	r3, r3, #8
 8004c0a:	697a      	ldr	r2, [r7, #20]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004c16:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	031b      	lsls	r3, r3, #12
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004c2a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	031b      	lsls	r3, r3, #12
 8004c30:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	693a      	ldr	r2, [r7, #16]
 8004c44:	621a      	str	r2, [r3, #32]
}
 8004c46:	bf00      	nop
 8004c48:	371c      	adds	r7, #28
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c52:	b480      	push	{r7}
 8004c54:	b085      	sub	sp, #20
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
 8004c5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	f043 0307 	orr.w	r3, r3, #7
 8004c74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	68fa      	ldr	r2, [r7, #12]
 8004c7a:	609a      	str	r2, [r3, #8]
}
 8004c7c:	bf00      	nop
 8004c7e:	3714      	adds	r7, #20
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b087      	sub	sp, #28
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
 8004c94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ca2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	021a      	lsls	r2, r3, #8
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	431a      	orrs	r2, r3
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	697a      	ldr	r2, [r7, #20]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	609a      	str	r2, [r3, #8]
}
 8004cbc:	bf00      	nop
 8004cbe:	371c      	adds	r7, #28
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b087      	sub	sp, #28
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	f003 031f 	and.w	r3, r3, #31
 8004cda:	2201      	movs	r2, #1
 8004cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6a1a      	ldr	r2, [r3, #32]
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	43db      	mvns	r3, r3
 8004cea:	401a      	ands	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6a1a      	ldr	r2, [r3, #32]
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	f003 031f 	and.w	r3, r3, #31
 8004cfa:	6879      	ldr	r1, [r7, #4]
 8004cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8004d00:	431a      	orrs	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	621a      	str	r2, [r3, #32]
}
 8004d06:	bf00      	nop
 8004d08:	371c      	adds	r7, #28
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
	...

08004d14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d101      	bne.n	8004d2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d28:	2302      	movs	r3, #2
 8004d2a:	e050      	b.n	8004dce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2202      	movs	r2, #2
 8004d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a1c      	ldr	r2, [pc, #112]	; (8004ddc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d018      	beq.n	8004da2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d78:	d013      	beq.n	8004da2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a18      	ldr	r2, [pc, #96]	; (8004de0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d00e      	beq.n	8004da2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a16      	ldr	r2, [pc, #88]	; (8004de4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d009      	beq.n	8004da2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a15      	ldr	r2, [pc, #84]	; (8004de8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d004      	beq.n	8004da2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a13      	ldr	r2, [pc, #76]	; (8004dec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d10c      	bne.n	8004dbc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004da8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	68ba      	ldr	r2, [r7, #8]
 8004db0:	4313      	orrs	r3, r2
 8004db2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68ba      	ldr	r2, [r7, #8]
 8004dba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3714      	adds	r7, #20
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	40010000 	.word	0x40010000
 8004de0:	40000400 	.word	0x40000400
 8004de4:	40000800 	.word	0x40000800
 8004de8:	40000c00 	.word	0x40000c00
 8004dec:	40014000 	.word	0x40014000

08004df0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b085      	sub	sp, #20
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d101      	bne.n	8004e0c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004e08:	2302      	movs	r3, #2
 8004e0a:	e03d      	b.n	8004e88 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	695b      	ldr	r3, [r3, #20]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	69db      	ldr	r3, [r3, #28]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e86:	2300      	movs	r3, #0
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	3714      	adds	r7, #20
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e92:	4770      	bx	lr

08004e94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e03f      	b.n	8004f4e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d106      	bne.n	8004ee8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f7fc fe60 	bl	8001ba8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2224      	movs	r2, #36	; 0x24
 8004eec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68da      	ldr	r2, [r3, #12]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004efe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	f000 f90b 	bl	800511c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	691a      	ldr	r2, [r3, #16]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	695a      	ldr	r2, [r3, #20]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68da      	ldr	r2, [r3, #12]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2220      	movs	r2, #32
 8004f40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2220      	movs	r2, #32
 8004f48:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3708      	adds	r7, #8
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b088      	sub	sp, #32
 8004f5a:	af02      	add	r7, sp, #8
 8004f5c:	60f8      	str	r0, [r7, #12]
 8004f5e:	60b9      	str	r1, [r7, #8]
 8004f60:	603b      	str	r3, [r7, #0]
 8004f62:	4613      	mov	r3, r2
 8004f64:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004f66:	2300      	movs	r3, #0
 8004f68:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	2b20      	cmp	r3, #32
 8004f74:	f040 8083 	bne.w	800507e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d002      	beq.n	8004f84 <HAL_UART_Transmit+0x2e>
 8004f7e:	88fb      	ldrh	r3, [r7, #6]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d101      	bne.n	8004f88 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e07b      	b.n	8005080 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004f8e:	2b01      	cmp	r3, #1
 8004f90:	d101      	bne.n	8004f96 <HAL_UART_Transmit+0x40>
 8004f92:	2302      	movs	r3, #2
 8004f94:	e074      	b.n	8005080 <HAL_UART_Transmit+0x12a>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2221      	movs	r2, #33	; 0x21
 8004fa8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004fac:	f7fc ff4e 	bl	8001e4c <HAL_GetTick>
 8004fb0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	88fa      	ldrh	r2, [r7, #6]
 8004fb6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	88fa      	ldrh	r2, [r7, #6]
 8004fbc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004fc6:	e042      	b.n	800504e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004fcc:	b29b      	uxth	r3, r3
 8004fce:	3b01      	subs	r3, #1
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fde:	d122      	bne.n	8005026 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	9300      	str	r3, [sp, #0]
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	2180      	movs	r1, #128	; 0x80
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f000 f84c 	bl	8005088 <UART_WaitOnFlagUntilTimeout>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d001      	beq.n	8004ffa <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e042      	b.n	8005080 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	881b      	ldrh	r3, [r3, #0]
 8005002:	461a      	mov	r2, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800500c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	691b      	ldr	r3, [r3, #16]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d103      	bne.n	800501e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	3302      	adds	r3, #2
 800501a:	60bb      	str	r3, [r7, #8]
 800501c:	e017      	b.n	800504e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	3301      	adds	r3, #1
 8005022:	60bb      	str	r3, [r7, #8]
 8005024:	e013      	b.n	800504e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	9300      	str	r3, [sp, #0]
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	2200      	movs	r2, #0
 800502e:	2180      	movs	r1, #128	; 0x80
 8005030:	68f8      	ldr	r0, [r7, #12]
 8005032:	f000 f829 	bl	8005088 <UART_WaitOnFlagUntilTimeout>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d001      	beq.n	8005040 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e01f      	b.n	8005080 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	1c5a      	adds	r2, r3, #1
 8005044:	60ba      	str	r2, [r7, #8]
 8005046:	781a      	ldrb	r2, [r3, #0]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005052:	b29b      	uxth	r3, r3
 8005054:	2b00      	cmp	r3, #0
 8005056:	d1b7      	bne.n	8004fc8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	9300      	str	r3, [sp, #0]
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	2200      	movs	r2, #0
 8005060:	2140      	movs	r1, #64	; 0x40
 8005062:	68f8      	ldr	r0, [r7, #12]
 8005064:	f000 f810 	bl	8005088 <UART_WaitOnFlagUntilTimeout>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e006      	b.n	8005080 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2220      	movs	r2, #32
 8005076:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800507a:	2300      	movs	r3, #0
 800507c:	e000      	b.n	8005080 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800507e:	2302      	movs	r3, #2
  }
}
 8005080:	4618      	mov	r0, r3
 8005082:	3718      	adds	r7, #24
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}

08005088 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	603b      	str	r3, [r7, #0]
 8005094:	4613      	mov	r3, r2
 8005096:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005098:	e02c      	b.n	80050f4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050a0:	d028      	beq.n	80050f4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d007      	beq.n	80050b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80050a8:	f7fc fed0 	bl	8001e4c <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	69ba      	ldr	r2, [r7, #24]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d21d      	bcs.n	80050f4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68da      	ldr	r2, [r3, #12]
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80050c6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	695a      	ldr	r2, [r3, #20]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f022 0201 	bic.w	r2, r2, #1
 80050d6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2220      	movs	r2, #32
 80050dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2220      	movs	r2, #32
 80050e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e00f      	b.n	8005114 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	4013      	ands	r3, r2
 80050fe:	68ba      	ldr	r2, [r7, #8]
 8005100:	429a      	cmp	r2, r3
 8005102:	bf0c      	ite	eq
 8005104:	2301      	moveq	r3, #1
 8005106:	2300      	movne	r3, #0
 8005108:	b2db      	uxtb	r3, r3
 800510a:	461a      	mov	r2, r3
 800510c:	79fb      	ldrb	r3, [r7, #7]
 800510e:	429a      	cmp	r2, r3
 8005110:	d0c3      	beq.n	800509a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3710      	adds	r7, #16
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800511c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005120:	b085      	sub	sp, #20
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	691b      	ldr	r3, [r3, #16]
 800512c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	68da      	ldr	r2, [r3, #12]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	430a      	orrs	r2, r1
 800513a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	689a      	ldr	r2, [r3, #8]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	431a      	orrs	r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	431a      	orrs	r2, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	69db      	ldr	r3, [r3, #28]
 8005150:	4313      	orrs	r3, r2
 8005152:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800515e:	f023 030c 	bic.w	r3, r3, #12
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	6812      	ldr	r2, [r2, #0]
 8005166:	68f9      	ldr	r1, [r7, #12]
 8005168:	430b      	orrs	r3, r1
 800516a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	699a      	ldr	r2, [r3, #24]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	430a      	orrs	r2, r1
 8005180:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	69db      	ldr	r3, [r3, #28]
 8005186:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800518a:	f040 818b 	bne.w	80054a4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4ac1      	ldr	r2, [pc, #772]	; (8005498 <UART_SetConfig+0x37c>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d005      	beq.n	80051a4 <UART_SetConfig+0x88>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4abf      	ldr	r2, [pc, #764]	; (800549c <UART_SetConfig+0x380>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	f040 80bd 	bne.w	800531e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80051a4:	f7fe fd04 	bl	8003bb0 <HAL_RCC_GetPCLK2Freq>
 80051a8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	461d      	mov	r5, r3
 80051ae:	f04f 0600 	mov.w	r6, #0
 80051b2:	46a8      	mov	r8, r5
 80051b4:	46b1      	mov	r9, r6
 80051b6:	eb18 0308 	adds.w	r3, r8, r8
 80051ba:	eb49 0409 	adc.w	r4, r9, r9
 80051be:	4698      	mov	r8, r3
 80051c0:	46a1      	mov	r9, r4
 80051c2:	eb18 0805 	adds.w	r8, r8, r5
 80051c6:	eb49 0906 	adc.w	r9, r9, r6
 80051ca:	f04f 0100 	mov.w	r1, #0
 80051ce:	f04f 0200 	mov.w	r2, #0
 80051d2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80051d6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80051da:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80051de:	4688      	mov	r8, r1
 80051e0:	4691      	mov	r9, r2
 80051e2:	eb18 0005 	adds.w	r0, r8, r5
 80051e6:	eb49 0106 	adc.w	r1, r9, r6
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	461d      	mov	r5, r3
 80051f0:	f04f 0600 	mov.w	r6, #0
 80051f4:	196b      	adds	r3, r5, r5
 80051f6:	eb46 0406 	adc.w	r4, r6, r6
 80051fa:	461a      	mov	r2, r3
 80051fc:	4623      	mov	r3, r4
 80051fe:	f7fb f847 	bl	8000290 <__aeabi_uldivmod>
 8005202:	4603      	mov	r3, r0
 8005204:	460c      	mov	r4, r1
 8005206:	461a      	mov	r2, r3
 8005208:	4ba5      	ldr	r3, [pc, #660]	; (80054a0 <UART_SetConfig+0x384>)
 800520a:	fba3 2302 	umull	r2, r3, r3, r2
 800520e:	095b      	lsrs	r3, r3, #5
 8005210:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005214:	68bb      	ldr	r3, [r7, #8]
 8005216:	461d      	mov	r5, r3
 8005218:	f04f 0600 	mov.w	r6, #0
 800521c:	46a9      	mov	r9, r5
 800521e:	46b2      	mov	sl, r6
 8005220:	eb19 0309 	adds.w	r3, r9, r9
 8005224:	eb4a 040a 	adc.w	r4, sl, sl
 8005228:	4699      	mov	r9, r3
 800522a:	46a2      	mov	sl, r4
 800522c:	eb19 0905 	adds.w	r9, r9, r5
 8005230:	eb4a 0a06 	adc.w	sl, sl, r6
 8005234:	f04f 0100 	mov.w	r1, #0
 8005238:	f04f 0200 	mov.w	r2, #0
 800523c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005240:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005244:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005248:	4689      	mov	r9, r1
 800524a:	4692      	mov	sl, r2
 800524c:	eb19 0005 	adds.w	r0, r9, r5
 8005250:	eb4a 0106 	adc.w	r1, sl, r6
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	461d      	mov	r5, r3
 800525a:	f04f 0600 	mov.w	r6, #0
 800525e:	196b      	adds	r3, r5, r5
 8005260:	eb46 0406 	adc.w	r4, r6, r6
 8005264:	461a      	mov	r2, r3
 8005266:	4623      	mov	r3, r4
 8005268:	f7fb f812 	bl	8000290 <__aeabi_uldivmod>
 800526c:	4603      	mov	r3, r0
 800526e:	460c      	mov	r4, r1
 8005270:	461a      	mov	r2, r3
 8005272:	4b8b      	ldr	r3, [pc, #556]	; (80054a0 <UART_SetConfig+0x384>)
 8005274:	fba3 1302 	umull	r1, r3, r3, r2
 8005278:	095b      	lsrs	r3, r3, #5
 800527a:	2164      	movs	r1, #100	; 0x64
 800527c:	fb01 f303 	mul.w	r3, r1, r3
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	00db      	lsls	r3, r3, #3
 8005284:	3332      	adds	r3, #50	; 0x32
 8005286:	4a86      	ldr	r2, [pc, #536]	; (80054a0 <UART_SetConfig+0x384>)
 8005288:	fba2 2303 	umull	r2, r3, r2, r3
 800528c:	095b      	lsrs	r3, r3, #5
 800528e:	005b      	lsls	r3, r3, #1
 8005290:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005294:	4498      	add	r8, r3
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	461d      	mov	r5, r3
 800529a:	f04f 0600 	mov.w	r6, #0
 800529e:	46a9      	mov	r9, r5
 80052a0:	46b2      	mov	sl, r6
 80052a2:	eb19 0309 	adds.w	r3, r9, r9
 80052a6:	eb4a 040a 	adc.w	r4, sl, sl
 80052aa:	4699      	mov	r9, r3
 80052ac:	46a2      	mov	sl, r4
 80052ae:	eb19 0905 	adds.w	r9, r9, r5
 80052b2:	eb4a 0a06 	adc.w	sl, sl, r6
 80052b6:	f04f 0100 	mov.w	r1, #0
 80052ba:	f04f 0200 	mov.w	r2, #0
 80052be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80052c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80052ca:	4689      	mov	r9, r1
 80052cc:	4692      	mov	sl, r2
 80052ce:	eb19 0005 	adds.w	r0, r9, r5
 80052d2:	eb4a 0106 	adc.w	r1, sl, r6
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	461d      	mov	r5, r3
 80052dc:	f04f 0600 	mov.w	r6, #0
 80052e0:	196b      	adds	r3, r5, r5
 80052e2:	eb46 0406 	adc.w	r4, r6, r6
 80052e6:	461a      	mov	r2, r3
 80052e8:	4623      	mov	r3, r4
 80052ea:	f7fa ffd1 	bl	8000290 <__aeabi_uldivmod>
 80052ee:	4603      	mov	r3, r0
 80052f0:	460c      	mov	r4, r1
 80052f2:	461a      	mov	r2, r3
 80052f4:	4b6a      	ldr	r3, [pc, #424]	; (80054a0 <UART_SetConfig+0x384>)
 80052f6:	fba3 1302 	umull	r1, r3, r3, r2
 80052fa:	095b      	lsrs	r3, r3, #5
 80052fc:	2164      	movs	r1, #100	; 0x64
 80052fe:	fb01 f303 	mul.w	r3, r1, r3
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	00db      	lsls	r3, r3, #3
 8005306:	3332      	adds	r3, #50	; 0x32
 8005308:	4a65      	ldr	r2, [pc, #404]	; (80054a0 <UART_SetConfig+0x384>)
 800530a:	fba2 2303 	umull	r2, r3, r2, r3
 800530e:	095b      	lsrs	r3, r3, #5
 8005310:	f003 0207 	and.w	r2, r3, #7
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4442      	add	r2, r8
 800531a:	609a      	str	r2, [r3, #8]
 800531c:	e26f      	b.n	80057fe <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800531e:	f7fe fc33 	bl	8003b88 <HAL_RCC_GetPCLK1Freq>
 8005322:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	461d      	mov	r5, r3
 8005328:	f04f 0600 	mov.w	r6, #0
 800532c:	46a8      	mov	r8, r5
 800532e:	46b1      	mov	r9, r6
 8005330:	eb18 0308 	adds.w	r3, r8, r8
 8005334:	eb49 0409 	adc.w	r4, r9, r9
 8005338:	4698      	mov	r8, r3
 800533a:	46a1      	mov	r9, r4
 800533c:	eb18 0805 	adds.w	r8, r8, r5
 8005340:	eb49 0906 	adc.w	r9, r9, r6
 8005344:	f04f 0100 	mov.w	r1, #0
 8005348:	f04f 0200 	mov.w	r2, #0
 800534c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005350:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005354:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005358:	4688      	mov	r8, r1
 800535a:	4691      	mov	r9, r2
 800535c:	eb18 0005 	adds.w	r0, r8, r5
 8005360:	eb49 0106 	adc.w	r1, r9, r6
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	461d      	mov	r5, r3
 800536a:	f04f 0600 	mov.w	r6, #0
 800536e:	196b      	adds	r3, r5, r5
 8005370:	eb46 0406 	adc.w	r4, r6, r6
 8005374:	461a      	mov	r2, r3
 8005376:	4623      	mov	r3, r4
 8005378:	f7fa ff8a 	bl	8000290 <__aeabi_uldivmod>
 800537c:	4603      	mov	r3, r0
 800537e:	460c      	mov	r4, r1
 8005380:	461a      	mov	r2, r3
 8005382:	4b47      	ldr	r3, [pc, #284]	; (80054a0 <UART_SetConfig+0x384>)
 8005384:	fba3 2302 	umull	r2, r3, r3, r2
 8005388:	095b      	lsrs	r3, r3, #5
 800538a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	461d      	mov	r5, r3
 8005392:	f04f 0600 	mov.w	r6, #0
 8005396:	46a9      	mov	r9, r5
 8005398:	46b2      	mov	sl, r6
 800539a:	eb19 0309 	adds.w	r3, r9, r9
 800539e:	eb4a 040a 	adc.w	r4, sl, sl
 80053a2:	4699      	mov	r9, r3
 80053a4:	46a2      	mov	sl, r4
 80053a6:	eb19 0905 	adds.w	r9, r9, r5
 80053aa:	eb4a 0a06 	adc.w	sl, sl, r6
 80053ae:	f04f 0100 	mov.w	r1, #0
 80053b2:	f04f 0200 	mov.w	r2, #0
 80053b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80053be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80053c2:	4689      	mov	r9, r1
 80053c4:	4692      	mov	sl, r2
 80053c6:	eb19 0005 	adds.w	r0, r9, r5
 80053ca:	eb4a 0106 	adc.w	r1, sl, r6
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	461d      	mov	r5, r3
 80053d4:	f04f 0600 	mov.w	r6, #0
 80053d8:	196b      	adds	r3, r5, r5
 80053da:	eb46 0406 	adc.w	r4, r6, r6
 80053de:	461a      	mov	r2, r3
 80053e0:	4623      	mov	r3, r4
 80053e2:	f7fa ff55 	bl	8000290 <__aeabi_uldivmod>
 80053e6:	4603      	mov	r3, r0
 80053e8:	460c      	mov	r4, r1
 80053ea:	461a      	mov	r2, r3
 80053ec:	4b2c      	ldr	r3, [pc, #176]	; (80054a0 <UART_SetConfig+0x384>)
 80053ee:	fba3 1302 	umull	r1, r3, r3, r2
 80053f2:	095b      	lsrs	r3, r3, #5
 80053f4:	2164      	movs	r1, #100	; 0x64
 80053f6:	fb01 f303 	mul.w	r3, r1, r3
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	00db      	lsls	r3, r3, #3
 80053fe:	3332      	adds	r3, #50	; 0x32
 8005400:	4a27      	ldr	r2, [pc, #156]	; (80054a0 <UART_SetConfig+0x384>)
 8005402:	fba2 2303 	umull	r2, r3, r2, r3
 8005406:	095b      	lsrs	r3, r3, #5
 8005408:	005b      	lsls	r3, r3, #1
 800540a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800540e:	4498      	add	r8, r3
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	461d      	mov	r5, r3
 8005414:	f04f 0600 	mov.w	r6, #0
 8005418:	46a9      	mov	r9, r5
 800541a:	46b2      	mov	sl, r6
 800541c:	eb19 0309 	adds.w	r3, r9, r9
 8005420:	eb4a 040a 	adc.w	r4, sl, sl
 8005424:	4699      	mov	r9, r3
 8005426:	46a2      	mov	sl, r4
 8005428:	eb19 0905 	adds.w	r9, r9, r5
 800542c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005430:	f04f 0100 	mov.w	r1, #0
 8005434:	f04f 0200 	mov.w	r2, #0
 8005438:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800543c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005440:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005444:	4689      	mov	r9, r1
 8005446:	4692      	mov	sl, r2
 8005448:	eb19 0005 	adds.w	r0, r9, r5
 800544c:	eb4a 0106 	adc.w	r1, sl, r6
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	685b      	ldr	r3, [r3, #4]
 8005454:	461d      	mov	r5, r3
 8005456:	f04f 0600 	mov.w	r6, #0
 800545a:	196b      	adds	r3, r5, r5
 800545c:	eb46 0406 	adc.w	r4, r6, r6
 8005460:	461a      	mov	r2, r3
 8005462:	4623      	mov	r3, r4
 8005464:	f7fa ff14 	bl	8000290 <__aeabi_uldivmod>
 8005468:	4603      	mov	r3, r0
 800546a:	460c      	mov	r4, r1
 800546c:	461a      	mov	r2, r3
 800546e:	4b0c      	ldr	r3, [pc, #48]	; (80054a0 <UART_SetConfig+0x384>)
 8005470:	fba3 1302 	umull	r1, r3, r3, r2
 8005474:	095b      	lsrs	r3, r3, #5
 8005476:	2164      	movs	r1, #100	; 0x64
 8005478:	fb01 f303 	mul.w	r3, r1, r3
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	00db      	lsls	r3, r3, #3
 8005480:	3332      	adds	r3, #50	; 0x32
 8005482:	4a07      	ldr	r2, [pc, #28]	; (80054a0 <UART_SetConfig+0x384>)
 8005484:	fba2 2303 	umull	r2, r3, r2, r3
 8005488:	095b      	lsrs	r3, r3, #5
 800548a:	f003 0207 	and.w	r2, r3, #7
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4442      	add	r2, r8
 8005494:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005496:	e1b2      	b.n	80057fe <UART_SetConfig+0x6e2>
 8005498:	40011000 	.word	0x40011000
 800549c:	40011400 	.word	0x40011400
 80054a0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4ad7      	ldr	r2, [pc, #860]	; (8005808 <UART_SetConfig+0x6ec>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d005      	beq.n	80054ba <UART_SetConfig+0x39e>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4ad6      	ldr	r2, [pc, #856]	; (800580c <UART_SetConfig+0x6f0>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	f040 80d1 	bne.w	800565c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80054ba:	f7fe fb79 	bl	8003bb0 <HAL_RCC_GetPCLK2Freq>
 80054be:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	469a      	mov	sl, r3
 80054c4:	f04f 0b00 	mov.w	fp, #0
 80054c8:	46d0      	mov	r8, sl
 80054ca:	46d9      	mov	r9, fp
 80054cc:	eb18 0308 	adds.w	r3, r8, r8
 80054d0:	eb49 0409 	adc.w	r4, r9, r9
 80054d4:	4698      	mov	r8, r3
 80054d6:	46a1      	mov	r9, r4
 80054d8:	eb18 080a 	adds.w	r8, r8, sl
 80054dc:	eb49 090b 	adc.w	r9, r9, fp
 80054e0:	f04f 0100 	mov.w	r1, #0
 80054e4:	f04f 0200 	mov.w	r2, #0
 80054e8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80054ec:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80054f0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80054f4:	4688      	mov	r8, r1
 80054f6:	4691      	mov	r9, r2
 80054f8:	eb1a 0508 	adds.w	r5, sl, r8
 80054fc:	eb4b 0609 	adc.w	r6, fp, r9
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	4619      	mov	r1, r3
 8005506:	f04f 0200 	mov.w	r2, #0
 800550a:	f04f 0300 	mov.w	r3, #0
 800550e:	f04f 0400 	mov.w	r4, #0
 8005512:	0094      	lsls	r4, r2, #2
 8005514:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005518:	008b      	lsls	r3, r1, #2
 800551a:	461a      	mov	r2, r3
 800551c:	4623      	mov	r3, r4
 800551e:	4628      	mov	r0, r5
 8005520:	4631      	mov	r1, r6
 8005522:	f7fa feb5 	bl	8000290 <__aeabi_uldivmod>
 8005526:	4603      	mov	r3, r0
 8005528:	460c      	mov	r4, r1
 800552a:	461a      	mov	r2, r3
 800552c:	4bb8      	ldr	r3, [pc, #736]	; (8005810 <UART_SetConfig+0x6f4>)
 800552e:	fba3 2302 	umull	r2, r3, r3, r2
 8005532:	095b      	lsrs	r3, r3, #5
 8005534:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	469b      	mov	fp, r3
 800553c:	f04f 0c00 	mov.w	ip, #0
 8005540:	46d9      	mov	r9, fp
 8005542:	46e2      	mov	sl, ip
 8005544:	eb19 0309 	adds.w	r3, r9, r9
 8005548:	eb4a 040a 	adc.w	r4, sl, sl
 800554c:	4699      	mov	r9, r3
 800554e:	46a2      	mov	sl, r4
 8005550:	eb19 090b 	adds.w	r9, r9, fp
 8005554:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005558:	f04f 0100 	mov.w	r1, #0
 800555c:	f04f 0200 	mov.w	r2, #0
 8005560:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005564:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005568:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800556c:	4689      	mov	r9, r1
 800556e:	4692      	mov	sl, r2
 8005570:	eb1b 0509 	adds.w	r5, fp, r9
 8005574:	eb4c 060a 	adc.w	r6, ip, sl
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	4619      	mov	r1, r3
 800557e:	f04f 0200 	mov.w	r2, #0
 8005582:	f04f 0300 	mov.w	r3, #0
 8005586:	f04f 0400 	mov.w	r4, #0
 800558a:	0094      	lsls	r4, r2, #2
 800558c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005590:	008b      	lsls	r3, r1, #2
 8005592:	461a      	mov	r2, r3
 8005594:	4623      	mov	r3, r4
 8005596:	4628      	mov	r0, r5
 8005598:	4631      	mov	r1, r6
 800559a:	f7fa fe79 	bl	8000290 <__aeabi_uldivmod>
 800559e:	4603      	mov	r3, r0
 80055a0:	460c      	mov	r4, r1
 80055a2:	461a      	mov	r2, r3
 80055a4:	4b9a      	ldr	r3, [pc, #616]	; (8005810 <UART_SetConfig+0x6f4>)
 80055a6:	fba3 1302 	umull	r1, r3, r3, r2
 80055aa:	095b      	lsrs	r3, r3, #5
 80055ac:	2164      	movs	r1, #100	; 0x64
 80055ae:	fb01 f303 	mul.w	r3, r1, r3
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	011b      	lsls	r3, r3, #4
 80055b6:	3332      	adds	r3, #50	; 0x32
 80055b8:	4a95      	ldr	r2, [pc, #596]	; (8005810 <UART_SetConfig+0x6f4>)
 80055ba:	fba2 2303 	umull	r2, r3, r2, r3
 80055be:	095b      	lsrs	r3, r3, #5
 80055c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055c4:	4498      	add	r8, r3
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	469b      	mov	fp, r3
 80055ca:	f04f 0c00 	mov.w	ip, #0
 80055ce:	46d9      	mov	r9, fp
 80055d0:	46e2      	mov	sl, ip
 80055d2:	eb19 0309 	adds.w	r3, r9, r9
 80055d6:	eb4a 040a 	adc.w	r4, sl, sl
 80055da:	4699      	mov	r9, r3
 80055dc:	46a2      	mov	sl, r4
 80055de:	eb19 090b 	adds.w	r9, r9, fp
 80055e2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80055e6:	f04f 0100 	mov.w	r1, #0
 80055ea:	f04f 0200 	mov.w	r2, #0
 80055ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055f2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80055f6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80055fa:	4689      	mov	r9, r1
 80055fc:	4692      	mov	sl, r2
 80055fe:	eb1b 0509 	adds.w	r5, fp, r9
 8005602:	eb4c 060a 	adc.w	r6, ip, sl
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	4619      	mov	r1, r3
 800560c:	f04f 0200 	mov.w	r2, #0
 8005610:	f04f 0300 	mov.w	r3, #0
 8005614:	f04f 0400 	mov.w	r4, #0
 8005618:	0094      	lsls	r4, r2, #2
 800561a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800561e:	008b      	lsls	r3, r1, #2
 8005620:	461a      	mov	r2, r3
 8005622:	4623      	mov	r3, r4
 8005624:	4628      	mov	r0, r5
 8005626:	4631      	mov	r1, r6
 8005628:	f7fa fe32 	bl	8000290 <__aeabi_uldivmod>
 800562c:	4603      	mov	r3, r0
 800562e:	460c      	mov	r4, r1
 8005630:	461a      	mov	r2, r3
 8005632:	4b77      	ldr	r3, [pc, #476]	; (8005810 <UART_SetConfig+0x6f4>)
 8005634:	fba3 1302 	umull	r1, r3, r3, r2
 8005638:	095b      	lsrs	r3, r3, #5
 800563a:	2164      	movs	r1, #100	; 0x64
 800563c:	fb01 f303 	mul.w	r3, r1, r3
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	011b      	lsls	r3, r3, #4
 8005644:	3332      	adds	r3, #50	; 0x32
 8005646:	4a72      	ldr	r2, [pc, #456]	; (8005810 <UART_SetConfig+0x6f4>)
 8005648:	fba2 2303 	umull	r2, r3, r2, r3
 800564c:	095b      	lsrs	r3, r3, #5
 800564e:	f003 020f 	and.w	r2, r3, #15
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4442      	add	r2, r8
 8005658:	609a      	str	r2, [r3, #8]
 800565a:	e0d0      	b.n	80057fe <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800565c:	f7fe fa94 	bl	8003b88 <HAL_RCC_GetPCLK1Freq>
 8005660:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	469a      	mov	sl, r3
 8005666:	f04f 0b00 	mov.w	fp, #0
 800566a:	46d0      	mov	r8, sl
 800566c:	46d9      	mov	r9, fp
 800566e:	eb18 0308 	adds.w	r3, r8, r8
 8005672:	eb49 0409 	adc.w	r4, r9, r9
 8005676:	4698      	mov	r8, r3
 8005678:	46a1      	mov	r9, r4
 800567a:	eb18 080a 	adds.w	r8, r8, sl
 800567e:	eb49 090b 	adc.w	r9, r9, fp
 8005682:	f04f 0100 	mov.w	r1, #0
 8005686:	f04f 0200 	mov.w	r2, #0
 800568a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800568e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005692:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005696:	4688      	mov	r8, r1
 8005698:	4691      	mov	r9, r2
 800569a:	eb1a 0508 	adds.w	r5, sl, r8
 800569e:	eb4b 0609 	adc.w	r6, fp, r9
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	4619      	mov	r1, r3
 80056a8:	f04f 0200 	mov.w	r2, #0
 80056ac:	f04f 0300 	mov.w	r3, #0
 80056b0:	f04f 0400 	mov.w	r4, #0
 80056b4:	0094      	lsls	r4, r2, #2
 80056b6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80056ba:	008b      	lsls	r3, r1, #2
 80056bc:	461a      	mov	r2, r3
 80056be:	4623      	mov	r3, r4
 80056c0:	4628      	mov	r0, r5
 80056c2:	4631      	mov	r1, r6
 80056c4:	f7fa fde4 	bl	8000290 <__aeabi_uldivmod>
 80056c8:	4603      	mov	r3, r0
 80056ca:	460c      	mov	r4, r1
 80056cc:	461a      	mov	r2, r3
 80056ce:	4b50      	ldr	r3, [pc, #320]	; (8005810 <UART_SetConfig+0x6f4>)
 80056d0:	fba3 2302 	umull	r2, r3, r3, r2
 80056d4:	095b      	lsrs	r3, r3, #5
 80056d6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	469b      	mov	fp, r3
 80056de:	f04f 0c00 	mov.w	ip, #0
 80056e2:	46d9      	mov	r9, fp
 80056e4:	46e2      	mov	sl, ip
 80056e6:	eb19 0309 	adds.w	r3, r9, r9
 80056ea:	eb4a 040a 	adc.w	r4, sl, sl
 80056ee:	4699      	mov	r9, r3
 80056f0:	46a2      	mov	sl, r4
 80056f2:	eb19 090b 	adds.w	r9, r9, fp
 80056f6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80056fa:	f04f 0100 	mov.w	r1, #0
 80056fe:	f04f 0200 	mov.w	r2, #0
 8005702:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005706:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800570a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800570e:	4689      	mov	r9, r1
 8005710:	4692      	mov	sl, r2
 8005712:	eb1b 0509 	adds.w	r5, fp, r9
 8005716:	eb4c 060a 	adc.w	r6, ip, sl
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	4619      	mov	r1, r3
 8005720:	f04f 0200 	mov.w	r2, #0
 8005724:	f04f 0300 	mov.w	r3, #0
 8005728:	f04f 0400 	mov.w	r4, #0
 800572c:	0094      	lsls	r4, r2, #2
 800572e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005732:	008b      	lsls	r3, r1, #2
 8005734:	461a      	mov	r2, r3
 8005736:	4623      	mov	r3, r4
 8005738:	4628      	mov	r0, r5
 800573a:	4631      	mov	r1, r6
 800573c:	f7fa fda8 	bl	8000290 <__aeabi_uldivmod>
 8005740:	4603      	mov	r3, r0
 8005742:	460c      	mov	r4, r1
 8005744:	461a      	mov	r2, r3
 8005746:	4b32      	ldr	r3, [pc, #200]	; (8005810 <UART_SetConfig+0x6f4>)
 8005748:	fba3 1302 	umull	r1, r3, r3, r2
 800574c:	095b      	lsrs	r3, r3, #5
 800574e:	2164      	movs	r1, #100	; 0x64
 8005750:	fb01 f303 	mul.w	r3, r1, r3
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	011b      	lsls	r3, r3, #4
 8005758:	3332      	adds	r3, #50	; 0x32
 800575a:	4a2d      	ldr	r2, [pc, #180]	; (8005810 <UART_SetConfig+0x6f4>)
 800575c:	fba2 2303 	umull	r2, r3, r2, r3
 8005760:	095b      	lsrs	r3, r3, #5
 8005762:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005766:	4498      	add	r8, r3
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	469b      	mov	fp, r3
 800576c:	f04f 0c00 	mov.w	ip, #0
 8005770:	46d9      	mov	r9, fp
 8005772:	46e2      	mov	sl, ip
 8005774:	eb19 0309 	adds.w	r3, r9, r9
 8005778:	eb4a 040a 	adc.w	r4, sl, sl
 800577c:	4699      	mov	r9, r3
 800577e:	46a2      	mov	sl, r4
 8005780:	eb19 090b 	adds.w	r9, r9, fp
 8005784:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005788:	f04f 0100 	mov.w	r1, #0
 800578c:	f04f 0200 	mov.w	r2, #0
 8005790:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005794:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005798:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800579c:	4689      	mov	r9, r1
 800579e:	4692      	mov	sl, r2
 80057a0:	eb1b 0509 	adds.w	r5, fp, r9
 80057a4:	eb4c 060a 	adc.w	r6, ip, sl
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	4619      	mov	r1, r3
 80057ae:	f04f 0200 	mov.w	r2, #0
 80057b2:	f04f 0300 	mov.w	r3, #0
 80057b6:	f04f 0400 	mov.w	r4, #0
 80057ba:	0094      	lsls	r4, r2, #2
 80057bc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80057c0:	008b      	lsls	r3, r1, #2
 80057c2:	461a      	mov	r2, r3
 80057c4:	4623      	mov	r3, r4
 80057c6:	4628      	mov	r0, r5
 80057c8:	4631      	mov	r1, r6
 80057ca:	f7fa fd61 	bl	8000290 <__aeabi_uldivmod>
 80057ce:	4603      	mov	r3, r0
 80057d0:	460c      	mov	r4, r1
 80057d2:	461a      	mov	r2, r3
 80057d4:	4b0e      	ldr	r3, [pc, #56]	; (8005810 <UART_SetConfig+0x6f4>)
 80057d6:	fba3 1302 	umull	r1, r3, r3, r2
 80057da:	095b      	lsrs	r3, r3, #5
 80057dc:	2164      	movs	r1, #100	; 0x64
 80057de:	fb01 f303 	mul.w	r3, r1, r3
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	011b      	lsls	r3, r3, #4
 80057e6:	3332      	adds	r3, #50	; 0x32
 80057e8:	4a09      	ldr	r2, [pc, #36]	; (8005810 <UART_SetConfig+0x6f4>)
 80057ea:	fba2 2303 	umull	r2, r3, r2, r3
 80057ee:	095b      	lsrs	r3, r3, #5
 80057f0:	f003 020f 	and.w	r2, r3, #15
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4442      	add	r2, r8
 80057fa:	609a      	str	r2, [r3, #8]
}
 80057fc:	e7ff      	b.n	80057fe <UART_SetConfig+0x6e2>
 80057fe:	bf00      	nop
 8005800:	3714      	adds	r7, #20
 8005802:	46bd      	mov	sp, r7
 8005804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005808:	40011000 	.word	0x40011000
 800580c:	40011400 	.word	0x40011400
 8005810:	51eb851f 	.word	0x51eb851f

08005814 <__errno>:
 8005814:	4b01      	ldr	r3, [pc, #4]	; (800581c <__errno+0x8>)
 8005816:	6818      	ldr	r0, [r3, #0]
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	20000010 	.word	0x20000010

08005820 <__libc_init_array>:
 8005820:	b570      	push	{r4, r5, r6, lr}
 8005822:	4e0d      	ldr	r6, [pc, #52]	; (8005858 <__libc_init_array+0x38>)
 8005824:	4c0d      	ldr	r4, [pc, #52]	; (800585c <__libc_init_array+0x3c>)
 8005826:	1ba4      	subs	r4, r4, r6
 8005828:	10a4      	asrs	r4, r4, #2
 800582a:	2500      	movs	r5, #0
 800582c:	42a5      	cmp	r5, r4
 800582e:	d109      	bne.n	8005844 <__libc_init_array+0x24>
 8005830:	4e0b      	ldr	r6, [pc, #44]	; (8005860 <__libc_init_array+0x40>)
 8005832:	4c0c      	ldr	r4, [pc, #48]	; (8005864 <__libc_init_array+0x44>)
 8005834:	f000 fc26 	bl	8006084 <_init>
 8005838:	1ba4      	subs	r4, r4, r6
 800583a:	10a4      	asrs	r4, r4, #2
 800583c:	2500      	movs	r5, #0
 800583e:	42a5      	cmp	r5, r4
 8005840:	d105      	bne.n	800584e <__libc_init_array+0x2e>
 8005842:	bd70      	pop	{r4, r5, r6, pc}
 8005844:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005848:	4798      	blx	r3
 800584a:	3501      	adds	r5, #1
 800584c:	e7ee      	b.n	800582c <__libc_init_array+0xc>
 800584e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005852:	4798      	blx	r3
 8005854:	3501      	adds	r5, #1
 8005856:	e7f2      	b.n	800583e <__libc_init_array+0x1e>
 8005858:	08006154 	.word	0x08006154
 800585c:	08006154 	.word	0x08006154
 8005860:	08006154 	.word	0x08006154
 8005864:	08006158 	.word	0x08006158

08005868 <memset>:
 8005868:	4402      	add	r2, r0
 800586a:	4603      	mov	r3, r0
 800586c:	4293      	cmp	r3, r2
 800586e:	d100      	bne.n	8005872 <memset+0xa>
 8005870:	4770      	bx	lr
 8005872:	f803 1b01 	strb.w	r1, [r3], #1
 8005876:	e7f9      	b.n	800586c <memset+0x4>

08005878 <siprintf>:
 8005878:	b40e      	push	{r1, r2, r3}
 800587a:	b500      	push	{lr}
 800587c:	b09c      	sub	sp, #112	; 0x70
 800587e:	ab1d      	add	r3, sp, #116	; 0x74
 8005880:	9002      	str	r0, [sp, #8]
 8005882:	9006      	str	r0, [sp, #24]
 8005884:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005888:	4809      	ldr	r0, [pc, #36]	; (80058b0 <siprintf+0x38>)
 800588a:	9107      	str	r1, [sp, #28]
 800588c:	9104      	str	r1, [sp, #16]
 800588e:	4909      	ldr	r1, [pc, #36]	; (80058b4 <siprintf+0x3c>)
 8005890:	f853 2b04 	ldr.w	r2, [r3], #4
 8005894:	9105      	str	r1, [sp, #20]
 8005896:	6800      	ldr	r0, [r0, #0]
 8005898:	9301      	str	r3, [sp, #4]
 800589a:	a902      	add	r1, sp, #8
 800589c:	f000 f866 	bl	800596c <_svfiprintf_r>
 80058a0:	9b02      	ldr	r3, [sp, #8]
 80058a2:	2200      	movs	r2, #0
 80058a4:	701a      	strb	r2, [r3, #0]
 80058a6:	b01c      	add	sp, #112	; 0x70
 80058a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80058ac:	b003      	add	sp, #12
 80058ae:	4770      	bx	lr
 80058b0:	20000010 	.word	0x20000010
 80058b4:	ffff0208 	.word	0xffff0208

080058b8 <__ssputs_r>:
 80058b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058bc:	688e      	ldr	r6, [r1, #8]
 80058be:	429e      	cmp	r6, r3
 80058c0:	4682      	mov	sl, r0
 80058c2:	460c      	mov	r4, r1
 80058c4:	4690      	mov	r8, r2
 80058c6:	4699      	mov	r9, r3
 80058c8:	d837      	bhi.n	800593a <__ssputs_r+0x82>
 80058ca:	898a      	ldrh	r2, [r1, #12]
 80058cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80058d0:	d031      	beq.n	8005936 <__ssputs_r+0x7e>
 80058d2:	6825      	ldr	r5, [r4, #0]
 80058d4:	6909      	ldr	r1, [r1, #16]
 80058d6:	1a6f      	subs	r7, r5, r1
 80058d8:	6965      	ldr	r5, [r4, #20]
 80058da:	2302      	movs	r3, #2
 80058dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80058e0:	fb95 f5f3 	sdiv	r5, r5, r3
 80058e4:	f109 0301 	add.w	r3, r9, #1
 80058e8:	443b      	add	r3, r7
 80058ea:	429d      	cmp	r5, r3
 80058ec:	bf38      	it	cc
 80058ee:	461d      	movcc	r5, r3
 80058f0:	0553      	lsls	r3, r2, #21
 80058f2:	d530      	bpl.n	8005956 <__ssputs_r+0x9e>
 80058f4:	4629      	mov	r1, r5
 80058f6:	f000 fb2b 	bl	8005f50 <_malloc_r>
 80058fa:	4606      	mov	r6, r0
 80058fc:	b950      	cbnz	r0, 8005914 <__ssputs_r+0x5c>
 80058fe:	230c      	movs	r3, #12
 8005900:	f8ca 3000 	str.w	r3, [sl]
 8005904:	89a3      	ldrh	r3, [r4, #12]
 8005906:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800590a:	81a3      	strh	r3, [r4, #12]
 800590c:	f04f 30ff 	mov.w	r0, #4294967295
 8005910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005914:	463a      	mov	r2, r7
 8005916:	6921      	ldr	r1, [r4, #16]
 8005918:	f000 faa8 	bl	8005e6c <memcpy>
 800591c:	89a3      	ldrh	r3, [r4, #12]
 800591e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005926:	81a3      	strh	r3, [r4, #12]
 8005928:	6126      	str	r6, [r4, #16]
 800592a:	6165      	str	r5, [r4, #20]
 800592c:	443e      	add	r6, r7
 800592e:	1bed      	subs	r5, r5, r7
 8005930:	6026      	str	r6, [r4, #0]
 8005932:	60a5      	str	r5, [r4, #8]
 8005934:	464e      	mov	r6, r9
 8005936:	454e      	cmp	r6, r9
 8005938:	d900      	bls.n	800593c <__ssputs_r+0x84>
 800593a:	464e      	mov	r6, r9
 800593c:	4632      	mov	r2, r6
 800593e:	4641      	mov	r1, r8
 8005940:	6820      	ldr	r0, [r4, #0]
 8005942:	f000 fa9e 	bl	8005e82 <memmove>
 8005946:	68a3      	ldr	r3, [r4, #8]
 8005948:	1b9b      	subs	r3, r3, r6
 800594a:	60a3      	str	r3, [r4, #8]
 800594c:	6823      	ldr	r3, [r4, #0]
 800594e:	441e      	add	r6, r3
 8005950:	6026      	str	r6, [r4, #0]
 8005952:	2000      	movs	r0, #0
 8005954:	e7dc      	b.n	8005910 <__ssputs_r+0x58>
 8005956:	462a      	mov	r2, r5
 8005958:	f000 fb54 	bl	8006004 <_realloc_r>
 800595c:	4606      	mov	r6, r0
 800595e:	2800      	cmp	r0, #0
 8005960:	d1e2      	bne.n	8005928 <__ssputs_r+0x70>
 8005962:	6921      	ldr	r1, [r4, #16]
 8005964:	4650      	mov	r0, sl
 8005966:	f000 faa5 	bl	8005eb4 <_free_r>
 800596a:	e7c8      	b.n	80058fe <__ssputs_r+0x46>

0800596c <_svfiprintf_r>:
 800596c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005970:	461d      	mov	r5, r3
 8005972:	898b      	ldrh	r3, [r1, #12]
 8005974:	061f      	lsls	r7, r3, #24
 8005976:	b09d      	sub	sp, #116	; 0x74
 8005978:	4680      	mov	r8, r0
 800597a:	460c      	mov	r4, r1
 800597c:	4616      	mov	r6, r2
 800597e:	d50f      	bpl.n	80059a0 <_svfiprintf_r+0x34>
 8005980:	690b      	ldr	r3, [r1, #16]
 8005982:	b96b      	cbnz	r3, 80059a0 <_svfiprintf_r+0x34>
 8005984:	2140      	movs	r1, #64	; 0x40
 8005986:	f000 fae3 	bl	8005f50 <_malloc_r>
 800598a:	6020      	str	r0, [r4, #0]
 800598c:	6120      	str	r0, [r4, #16]
 800598e:	b928      	cbnz	r0, 800599c <_svfiprintf_r+0x30>
 8005990:	230c      	movs	r3, #12
 8005992:	f8c8 3000 	str.w	r3, [r8]
 8005996:	f04f 30ff 	mov.w	r0, #4294967295
 800599a:	e0c8      	b.n	8005b2e <_svfiprintf_r+0x1c2>
 800599c:	2340      	movs	r3, #64	; 0x40
 800599e:	6163      	str	r3, [r4, #20]
 80059a0:	2300      	movs	r3, #0
 80059a2:	9309      	str	r3, [sp, #36]	; 0x24
 80059a4:	2320      	movs	r3, #32
 80059a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059aa:	2330      	movs	r3, #48	; 0x30
 80059ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059b0:	9503      	str	r5, [sp, #12]
 80059b2:	f04f 0b01 	mov.w	fp, #1
 80059b6:	4637      	mov	r7, r6
 80059b8:	463d      	mov	r5, r7
 80059ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 80059be:	b10b      	cbz	r3, 80059c4 <_svfiprintf_r+0x58>
 80059c0:	2b25      	cmp	r3, #37	; 0x25
 80059c2:	d13e      	bne.n	8005a42 <_svfiprintf_r+0xd6>
 80059c4:	ebb7 0a06 	subs.w	sl, r7, r6
 80059c8:	d00b      	beq.n	80059e2 <_svfiprintf_r+0x76>
 80059ca:	4653      	mov	r3, sl
 80059cc:	4632      	mov	r2, r6
 80059ce:	4621      	mov	r1, r4
 80059d0:	4640      	mov	r0, r8
 80059d2:	f7ff ff71 	bl	80058b8 <__ssputs_r>
 80059d6:	3001      	adds	r0, #1
 80059d8:	f000 80a4 	beq.w	8005b24 <_svfiprintf_r+0x1b8>
 80059dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059de:	4453      	add	r3, sl
 80059e0:	9309      	str	r3, [sp, #36]	; 0x24
 80059e2:	783b      	ldrb	r3, [r7, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f000 809d 	beq.w	8005b24 <_svfiprintf_r+0x1b8>
 80059ea:	2300      	movs	r3, #0
 80059ec:	f04f 32ff 	mov.w	r2, #4294967295
 80059f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80059f4:	9304      	str	r3, [sp, #16]
 80059f6:	9307      	str	r3, [sp, #28]
 80059f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80059fc:	931a      	str	r3, [sp, #104]	; 0x68
 80059fe:	462f      	mov	r7, r5
 8005a00:	2205      	movs	r2, #5
 8005a02:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005a06:	4850      	ldr	r0, [pc, #320]	; (8005b48 <_svfiprintf_r+0x1dc>)
 8005a08:	f7fa fbf2 	bl	80001f0 <memchr>
 8005a0c:	9b04      	ldr	r3, [sp, #16]
 8005a0e:	b9d0      	cbnz	r0, 8005a46 <_svfiprintf_r+0xda>
 8005a10:	06d9      	lsls	r1, r3, #27
 8005a12:	bf44      	itt	mi
 8005a14:	2220      	movmi	r2, #32
 8005a16:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005a1a:	071a      	lsls	r2, r3, #28
 8005a1c:	bf44      	itt	mi
 8005a1e:	222b      	movmi	r2, #43	; 0x2b
 8005a20:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005a24:	782a      	ldrb	r2, [r5, #0]
 8005a26:	2a2a      	cmp	r2, #42	; 0x2a
 8005a28:	d015      	beq.n	8005a56 <_svfiprintf_r+0xea>
 8005a2a:	9a07      	ldr	r2, [sp, #28]
 8005a2c:	462f      	mov	r7, r5
 8005a2e:	2000      	movs	r0, #0
 8005a30:	250a      	movs	r5, #10
 8005a32:	4639      	mov	r1, r7
 8005a34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a38:	3b30      	subs	r3, #48	; 0x30
 8005a3a:	2b09      	cmp	r3, #9
 8005a3c:	d94d      	bls.n	8005ada <_svfiprintf_r+0x16e>
 8005a3e:	b1b8      	cbz	r0, 8005a70 <_svfiprintf_r+0x104>
 8005a40:	e00f      	b.n	8005a62 <_svfiprintf_r+0xf6>
 8005a42:	462f      	mov	r7, r5
 8005a44:	e7b8      	b.n	80059b8 <_svfiprintf_r+0x4c>
 8005a46:	4a40      	ldr	r2, [pc, #256]	; (8005b48 <_svfiprintf_r+0x1dc>)
 8005a48:	1a80      	subs	r0, r0, r2
 8005a4a:	fa0b f000 	lsl.w	r0, fp, r0
 8005a4e:	4318      	orrs	r0, r3
 8005a50:	9004      	str	r0, [sp, #16]
 8005a52:	463d      	mov	r5, r7
 8005a54:	e7d3      	b.n	80059fe <_svfiprintf_r+0x92>
 8005a56:	9a03      	ldr	r2, [sp, #12]
 8005a58:	1d11      	adds	r1, r2, #4
 8005a5a:	6812      	ldr	r2, [r2, #0]
 8005a5c:	9103      	str	r1, [sp, #12]
 8005a5e:	2a00      	cmp	r2, #0
 8005a60:	db01      	blt.n	8005a66 <_svfiprintf_r+0xfa>
 8005a62:	9207      	str	r2, [sp, #28]
 8005a64:	e004      	b.n	8005a70 <_svfiprintf_r+0x104>
 8005a66:	4252      	negs	r2, r2
 8005a68:	f043 0302 	orr.w	r3, r3, #2
 8005a6c:	9207      	str	r2, [sp, #28]
 8005a6e:	9304      	str	r3, [sp, #16]
 8005a70:	783b      	ldrb	r3, [r7, #0]
 8005a72:	2b2e      	cmp	r3, #46	; 0x2e
 8005a74:	d10c      	bne.n	8005a90 <_svfiprintf_r+0x124>
 8005a76:	787b      	ldrb	r3, [r7, #1]
 8005a78:	2b2a      	cmp	r3, #42	; 0x2a
 8005a7a:	d133      	bne.n	8005ae4 <_svfiprintf_r+0x178>
 8005a7c:	9b03      	ldr	r3, [sp, #12]
 8005a7e:	1d1a      	adds	r2, r3, #4
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	9203      	str	r2, [sp, #12]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	bfb8      	it	lt
 8005a88:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a8c:	3702      	adds	r7, #2
 8005a8e:	9305      	str	r3, [sp, #20]
 8005a90:	4d2e      	ldr	r5, [pc, #184]	; (8005b4c <_svfiprintf_r+0x1e0>)
 8005a92:	7839      	ldrb	r1, [r7, #0]
 8005a94:	2203      	movs	r2, #3
 8005a96:	4628      	mov	r0, r5
 8005a98:	f7fa fbaa 	bl	80001f0 <memchr>
 8005a9c:	b138      	cbz	r0, 8005aae <_svfiprintf_r+0x142>
 8005a9e:	2340      	movs	r3, #64	; 0x40
 8005aa0:	1b40      	subs	r0, r0, r5
 8005aa2:	fa03 f000 	lsl.w	r0, r3, r0
 8005aa6:	9b04      	ldr	r3, [sp, #16]
 8005aa8:	4303      	orrs	r3, r0
 8005aaa:	3701      	adds	r7, #1
 8005aac:	9304      	str	r3, [sp, #16]
 8005aae:	7839      	ldrb	r1, [r7, #0]
 8005ab0:	4827      	ldr	r0, [pc, #156]	; (8005b50 <_svfiprintf_r+0x1e4>)
 8005ab2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ab6:	2206      	movs	r2, #6
 8005ab8:	1c7e      	adds	r6, r7, #1
 8005aba:	f7fa fb99 	bl	80001f0 <memchr>
 8005abe:	2800      	cmp	r0, #0
 8005ac0:	d038      	beq.n	8005b34 <_svfiprintf_r+0x1c8>
 8005ac2:	4b24      	ldr	r3, [pc, #144]	; (8005b54 <_svfiprintf_r+0x1e8>)
 8005ac4:	bb13      	cbnz	r3, 8005b0c <_svfiprintf_r+0x1a0>
 8005ac6:	9b03      	ldr	r3, [sp, #12]
 8005ac8:	3307      	adds	r3, #7
 8005aca:	f023 0307 	bic.w	r3, r3, #7
 8005ace:	3308      	adds	r3, #8
 8005ad0:	9303      	str	r3, [sp, #12]
 8005ad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ad4:	444b      	add	r3, r9
 8005ad6:	9309      	str	r3, [sp, #36]	; 0x24
 8005ad8:	e76d      	b.n	80059b6 <_svfiprintf_r+0x4a>
 8005ada:	fb05 3202 	mla	r2, r5, r2, r3
 8005ade:	2001      	movs	r0, #1
 8005ae0:	460f      	mov	r7, r1
 8005ae2:	e7a6      	b.n	8005a32 <_svfiprintf_r+0xc6>
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	3701      	adds	r7, #1
 8005ae8:	9305      	str	r3, [sp, #20]
 8005aea:	4619      	mov	r1, r3
 8005aec:	250a      	movs	r5, #10
 8005aee:	4638      	mov	r0, r7
 8005af0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005af4:	3a30      	subs	r2, #48	; 0x30
 8005af6:	2a09      	cmp	r2, #9
 8005af8:	d903      	bls.n	8005b02 <_svfiprintf_r+0x196>
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d0c8      	beq.n	8005a90 <_svfiprintf_r+0x124>
 8005afe:	9105      	str	r1, [sp, #20]
 8005b00:	e7c6      	b.n	8005a90 <_svfiprintf_r+0x124>
 8005b02:	fb05 2101 	mla	r1, r5, r1, r2
 8005b06:	2301      	movs	r3, #1
 8005b08:	4607      	mov	r7, r0
 8005b0a:	e7f0      	b.n	8005aee <_svfiprintf_r+0x182>
 8005b0c:	ab03      	add	r3, sp, #12
 8005b0e:	9300      	str	r3, [sp, #0]
 8005b10:	4622      	mov	r2, r4
 8005b12:	4b11      	ldr	r3, [pc, #68]	; (8005b58 <_svfiprintf_r+0x1ec>)
 8005b14:	a904      	add	r1, sp, #16
 8005b16:	4640      	mov	r0, r8
 8005b18:	f3af 8000 	nop.w
 8005b1c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005b20:	4681      	mov	r9, r0
 8005b22:	d1d6      	bne.n	8005ad2 <_svfiprintf_r+0x166>
 8005b24:	89a3      	ldrh	r3, [r4, #12]
 8005b26:	065b      	lsls	r3, r3, #25
 8005b28:	f53f af35 	bmi.w	8005996 <_svfiprintf_r+0x2a>
 8005b2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b2e:	b01d      	add	sp, #116	; 0x74
 8005b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b34:	ab03      	add	r3, sp, #12
 8005b36:	9300      	str	r3, [sp, #0]
 8005b38:	4622      	mov	r2, r4
 8005b3a:	4b07      	ldr	r3, [pc, #28]	; (8005b58 <_svfiprintf_r+0x1ec>)
 8005b3c:	a904      	add	r1, sp, #16
 8005b3e:	4640      	mov	r0, r8
 8005b40:	f000 f882 	bl	8005c48 <_printf_i>
 8005b44:	e7ea      	b.n	8005b1c <_svfiprintf_r+0x1b0>
 8005b46:	bf00      	nop
 8005b48:	08006118 	.word	0x08006118
 8005b4c:	0800611e 	.word	0x0800611e
 8005b50:	08006122 	.word	0x08006122
 8005b54:	00000000 	.word	0x00000000
 8005b58:	080058b9 	.word	0x080058b9

08005b5c <_printf_common>:
 8005b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b60:	4691      	mov	r9, r2
 8005b62:	461f      	mov	r7, r3
 8005b64:	688a      	ldr	r2, [r1, #8]
 8005b66:	690b      	ldr	r3, [r1, #16]
 8005b68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	bfb8      	it	lt
 8005b70:	4613      	movlt	r3, r2
 8005b72:	f8c9 3000 	str.w	r3, [r9]
 8005b76:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b7a:	4606      	mov	r6, r0
 8005b7c:	460c      	mov	r4, r1
 8005b7e:	b112      	cbz	r2, 8005b86 <_printf_common+0x2a>
 8005b80:	3301      	adds	r3, #1
 8005b82:	f8c9 3000 	str.w	r3, [r9]
 8005b86:	6823      	ldr	r3, [r4, #0]
 8005b88:	0699      	lsls	r1, r3, #26
 8005b8a:	bf42      	ittt	mi
 8005b8c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005b90:	3302      	addmi	r3, #2
 8005b92:	f8c9 3000 	strmi.w	r3, [r9]
 8005b96:	6825      	ldr	r5, [r4, #0]
 8005b98:	f015 0506 	ands.w	r5, r5, #6
 8005b9c:	d107      	bne.n	8005bae <_printf_common+0x52>
 8005b9e:	f104 0a19 	add.w	sl, r4, #25
 8005ba2:	68e3      	ldr	r3, [r4, #12]
 8005ba4:	f8d9 2000 	ldr.w	r2, [r9]
 8005ba8:	1a9b      	subs	r3, r3, r2
 8005baa:	42ab      	cmp	r3, r5
 8005bac:	dc28      	bgt.n	8005c00 <_printf_common+0xa4>
 8005bae:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005bb2:	6822      	ldr	r2, [r4, #0]
 8005bb4:	3300      	adds	r3, #0
 8005bb6:	bf18      	it	ne
 8005bb8:	2301      	movne	r3, #1
 8005bba:	0692      	lsls	r2, r2, #26
 8005bbc:	d42d      	bmi.n	8005c1a <_printf_common+0xbe>
 8005bbe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005bc2:	4639      	mov	r1, r7
 8005bc4:	4630      	mov	r0, r6
 8005bc6:	47c0      	blx	r8
 8005bc8:	3001      	adds	r0, #1
 8005bca:	d020      	beq.n	8005c0e <_printf_common+0xb2>
 8005bcc:	6823      	ldr	r3, [r4, #0]
 8005bce:	68e5      	ldr	r5, [r4, #12]
 8005bd0:	f8d9 2000 	ldr.w	r2, [r9]
 8005bd4:	f003 0306 	and.w	r3, r3, #6
 8005bd8:	2b04      	cmp	r3, #4
 8005bda:	bf08      	it	eq
 8005bdc:	1aad      	subeq	r5, r5, r2
 8005bde:	68a3      	ldr	r3, [r4, #8]
 8005be0:	6922      	ldr	r2, [r4, #16]
 8005be2:	bf0c      	ite	eq
 8005be4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005be8:	2500      	movne	r5, #0
 8005bea:	4293      	cmp	r3, r2
 8005bec:	bfc4      	itt	gt
 8005bee:	1a9b      	subgt	r3, r3, r2
 8005bf0:	18ed      	addgt	r5, r5, r3
 8005bf2:	f04f 0900 	mov.w	r9, #0
 8005bf6:	341a      	adds	r4, #26
 8005bf8:	454d      	cmp	r5, r9
 8005bfa:	d11a      	bne.n	8005c32 <_printf_common+0xd6>
 8005bfc:	2000      	movs	r0, #0
 8005bfe:	e008      	b.n	8005c12 <_printf_common+0xb6>
 8005c00:	2301      	movs	r3, #1
 8005c02:	4652      	mov	r2, sl
 8005c04:	4639      	mov	r1, r7
 8005c06:	4630      	mov	r0, r6
 8005c08:	47c0      	blx	r8
 8005c0a:	3001      	adds	r0, #1
 8005c0c:	d103      	bne.n	8005c16 <_printf_common+0xba>
 8005c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c16:	3501      	adds	r5, #1
 8005c18:	e7c3      	b.n	8005ba2 <_printf_common+0x46>
 8005c1a:	18e1      	adds	r1, r4, r3
 8005c1c:	1c5a      	adds	r2, r3, #1
 8005c1e:	2030      	movs	r0, #48	; 0x30
 8005c20:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005c24:	4422      	add	r2, r4
 8005c26:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005c2a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005c2e:	3302      	adds	r3, #2
 8005c30:	e7c5      	b.n	8005bbe <_printf_common+0x62>
 8005c32:	2301      	movs	r3, #1
 8005c34:	4622      	mov	r2, r4
 8005c36:	4639      	mov	r1, r7
 8005c38:	4630      	mov	r0, r6
 8005c3a:	47c0      	blx	r8
 8005c3c:	3001      	adds	r0, #1
 8005c3e:	d0e6      	beq.n	8005c0e <_printf_common+0xb2>
 8005c40:	f109 0901 	add.w	r9, r9, #1
 8005c44:	e7d8      	b.n	8005bf8 <_printf_common+0x9c>
	...

08005c48 <_printf_i>:
 8005c48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c4c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005c50:	460c      	mov	r4, r1
 8005c52:	7e09      	ldrb	r1, [r1, #24]
 8005c54:	b085      	sub	sp, #20
 8005c56:	296e      	cmp	r1, #110	; 0x6e
 8005c58:	4617      	mov	r7, r2
 8005c5a:	4606      	mov	r6, r0
 8005c5c:	4698      	mov	r8, r3
 8005c5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c60:	f000 80b3 	beq.w	8005dca <_printf_i+0x182>
 8005c64:	d822      	bhi.n	8005cac <_printf_i+0x64>
 8005c66:	2963      	cmp	r1, #99	; 0x63
 8005c68:	d036      	beq.n	8005cd8 <_printf_i+0x90>
 8005c6a:	d80a      	bhi.n	8005c82 <_printf_i+0x3a>
 8005c6c:	2900      	cmp	r1, #0
 8005c6e:	f000 80b9 	beq.w	8005de4 <_printf_i+0x19c>
 8005c72:	2958      	cmp	r1, #88	; 0x58
 8005c74:	f000 8083 	beq.w	8005d7e <_printf_i+0x136>
 8005c78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c7c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005c80:	e032      	b.n	8005ce8 <_printf_i+0xa0>
 8005c82:	2964      	cmp	r1, #100	; 0x64
 8005c84:	d001      	beq.n	8005c8a <_printf_i+0x42>
 8005c86:	2969      	cmp	r1, #105	; 0x69
 8005c88:	d1f6      	bne.n	8005c78 <_printf_i+0x30>
 8005c8a:	6820      	ldr	r0, [r4, #0]
 8005c8c:	6813      	ldr	r3, [r2, #0]
 8005c8e:	0605      	lsls	r5, r0, #24
 8005c90:	f103 0104 	add.w	r1, r3, #4
 8005c94:	d52a      	bpl.n	8005cec <_printf_i+0xa4>
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	6011      	str	r1, [r2, #0]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	da03      	bge.n	8005ca6 <_printf_i+0x5e>
 8005c9e:	222d      	movs	r2, #45	; 0x2d
 8005ca0:	425b      	negs	r3, r3
 8005ca2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005ca6:	486f      	ldr	r0, [pc, #444]	; (8005e64 <_printf_i+0x21c>)
 8005ca8:	220a      	movs	r2, #10
 8005caa:	e039      	b.n	8005d20 <_printf_i+0xd8>
 8005cac:	2973      	cmp	r1, #115	; 0x73
 8005cae:	f000 809d 	beq.w	8005dec <_printf_i+0x1a4>
 8005cb2:	d808      	bhi.n	8005cc6 <_printf_i+0x7e>
 8005cb4:	296f      	cmp	r1, #111	; 0x6f
 8005cb6:	d020      	beq.n	8005cfa <_printf_i+0xb2>
 8005cb8:	2970      	cmp	r1, #112	; 0x70
 8005cba:	d1dd      	bne.n	8005c78 <_printf_i+0x30>
 8005cbc:	6823      	ldr	r3, [r4, #0]
 8005cbe:	f043 0320 	orr.w	r3, r3, #32
 8005cc2:	6023      	str	r3, [r4, #0]
 8005cc4:	e003      	b.n	8005cce <_printf_i+0x86>
 8005cc6:	2975      	cmp	r1, #117	; 0x75
 8005cc8:	d017      	beq.n	8005cfa <_printf_i+0xb2>
 8005cca:	2978      	cmp	r1, #120	; 0x78
 8005ccc:	d1d4      	bne.n	8005c78 <_printf_i+0x30>
 8005cce:	2378      	movs	r3, #120	; 0x78
 8005cd0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005cd4:	4864      	ldr	r0, [pc, #400]	; (8005e68 <_printf_i+0x220>)
 8005cd6:	e055      	b.n	8005d84 <_printf_i+0x13c>
 8005cd8:	6813      	ldr	r3, [r2, #0]
 8005cda:	1d19      	adds	r1, r3, #4
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	6011      	str	r1, [r2, #0]
 8005ce0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ce4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e08c      	b.n	8005e06 <_printf_i+0x1be>
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	6011      	str	r1, [r2, #0]
 8005cf0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005cf4:	bf18      	it	ne
 8005cf6:	b21b      	sxthne	r3, r3
 8005cf8:	e7cf      	b.n	8005c9a <_printf_i+0x52>
 8005cfa:	6813      	ldr	r3, [r2, #0]
 8005cfc:	6825      	ldr	r5, [r4, #0]
 8005cfe:	1d18      	adds	r0, r3, #4
 8005d00:	6010      	str	r0, [r2, #0]
 8005d02:	0628      	lsls	r0, r5, #24
 8005d04:	d501      	bpl.n	8005d0a <_printf_i+0xc2>
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	e002      	b.n	8005d10 <_printf_i+0xc8>
 8005d0a:	0668      	lsls	r0, r5, #25
 8005d0c:	d5fb      	bpl.n	8005d06 <_printf_i+0xbe>
 8005d0e:	881b      	ldrh	r3, [r3, #0]
 8005d10:	4854      	ldr	r0, [pc, #336]	; (8005e64 <_printf_i+0x21c>)
 8005d12:	296f      	cmp	r1, #111	; 0x6f
 8005d14:	bf14      	ite	ne
 8005d16:	220a      	movne	r2, #10
 8005d18:	2208      	moveq	r2, #8
 8005d1a:	2100      	movs	r1, #0
 8005d1c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005d20:	6865      	ldr	r5, [r4, #4]
 8005d22:	60a5      	str	r5, [r4, #8]
 8005d24:	2d00      	cmp	r5, #0
 8005d26:	f2c0 8095 	blt.w	8005e54 <_printf_i+0x20c>
 8005d2a:	6821      	ldr	r1, [r4, #0]
 8005d2c:	f021 0104 	bic.w	r1, r1, #4
 8005d30:	6021      	str	r1, [r4, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d13d      	bne.n	8005db2 <_printf_i+0x16a>
 8005d36:	2d00      	cmp	r5, #0
 8005d38:	f040 808e 	bne.w	8005e58 <_printf_i+0x210>
 8005d3c:	4665      	mov	r5, ip
 8005d3e:	2a08      	cmp	r2, #8
 8005d40:	d10b      	bne.n	8005d5a <_printf_i+0x112>
 8005d42:	6823      	ldr	r3, [r4, #0]
 8005d44:	07db      	lsls	r3, r3, #31
 8005d46:	d508      	bpl.n	8005d5a <_printf_i+0x112>
 8005d48:	6923      	ldr	r3, [r4, #16]
 8005d4a:	6862      	ldr	r2, [r4, #4]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	bfde      	ittt	le
 8005d50:	2330      	movle	r3, #48	; 0x30
 8005d52:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d56:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d5a:	ebac 0305 	sub.w	r3, ip, r5
 8005d5e:	6123      	str	r3, [r4, #16]
 8005d60:	f8cd 8000 	str.w	r8, [sp]
 8005d64:	463b      	mov	r3, r7
 8005d66:	aa03      	add	r2, sp, #12
 8005d68:	4621      	mov	r1, r4
 8005d6a:	4630      	mov	r0, r6
 8005d6c:	f7ff fef6 	bl	8005b5c <_printf_common>
 8005d70:	3001      	adds	r0, #1
 8005d72:	d14d      	bne.n	8005e10 <_printf_i+0x1c8>
 8005d74:	f04f 30ff 	mov.w	r0, #4294967295
 8005d78:	b005      	add	sp, #20
 8005d7a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d7e:	4839      	ldr	r0, [pc, #228]	; (8005e64 <_printf_i+0x21c>)
 8005d80:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005d84:	6813      	ldr	r3, [r2, #0]
 8005d86:	6821      	ldr	r1, [r4, #0]
 8005d88:	1d1d      	adds	r5, r3, #4
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	6015      	str	r5, [r2, #0]
 8005d8e:	060a      	lsls	r2, r1, #24
 8005d90:	d50b      	bpl.n	8005daa <_printf_i+0x162>
 8005d92:	07ca      	lsls	r2, r1, #31
 8005d94:	bf44      	itt	mi
 8005d96:	f041 0120 	orrmi.w	r1, r1, #32
 8005d9a:	6021      	strmi	r1, [r4, #0]
 8005d9c:	b91b      	cbnz	r3, 8005da6 <_printf_i+0x15e>
 8005d9e:	6822      	ldr	r2, [r4, #0]
 8005da0:	f022 0220 	bic.w	r2, r2, #32
 8005da4:	6022      	str	r2, [r4, #0]
 8005da6:	2210      	movs	r2, #16
 8005da8:	e7b7      	b.n	8005d1a <_printf_i+0xd2>
 8005daa:	064d      	lsls	r5, r1, #25
 8005dac:	bf48      	it	mi
 8005dae:	b29b      	uxthmi	r3, r3
 8005db0:	e7ef      	b.n	8005d92 <_printf_i+0x14a>
 8005db2:	4665      	mov	r5, ip
 8005db4:	fbb3 f1f2 	udiv	r1, r3, r2
 8005db8:	fb02 3311 	mls	r3, r2, r1, r3
 8005dbc:	5cc3      	ldrb	r3, [r0, r3]
 8005dbe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	2900      	cmp	r1, #0
 8005dc6:	d1f5      	bne.n	8005db4 <_printf_i+0x16c>
 8005dc8:	e7b9      	b.n	8005d3e <_printf_i+0xf6>
 8005dca:	6813      	ldr	r3, [r2, #0]
 8005dcc:	6825      	ldr	r5, [r4, #0]
 8005dce:	6961      	ldr	r1, [r4, #20]
 8005dd0:	1d18      	adds	r0, r3, #4
 8005dd2:	6010      	str	r0, [r2, #0]
 8005dd4:	0628      	lsls	r0, r5, #24
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	d501      	bpl.n	8005dde <_printf_i+0x196>
 8005dda:	6019      	str	r1, [r3, #0]
 8005ddc:	e002      	b.n	8005de4 <_printf_i+0x19c>
 8005dde:	066a      	lsls	r2, r5, #25
 8005de0:	d5fb      	bpl.n	8005dda <_printf_i+0x192>
 8005de2:	8019      	strh	r1, [r3, #0]
 8005de4:	2300      	movs	r3, #0
 8005de6:	6123      	str	r3, [r4, #16]
 8005de8:	4665      	mov	r5, ip
 8005dea:	e7b9      	b.n	8005d60 <_printf_i+0x118>
 8005dec:	6813      	ldr	r3, [r2, #0]
 8005dee:	1d19      	adds	r1, r3, #4
 8005df0:	6011      	str	r1, [r2, #0]
 8005df2:	681d      	ldr	r5, [r3, #0]
 8005df4:	6862      	ldr	r2, [r4, #4]
 8005df6:	2100      	movs	r1, #0
 8005df8:	4628      	mov	r0, r5
 8005dfa:	f7fa f9f9 	bl	80001f0 <memchr>
 8005dfe:	b108      	cbz	r0, 8005e04 <_printf_i+0x1bc>
 8005e00:	1b40      	subs	r0, r0, r5
 8005e02:	6060      	str	r0, [r4, #4]
 8005e04:	6863      	ldr	r3, [r4, #4]
 8005e06:	6123      	str	r3, [r4, #16]
 8005e08:	2300      	movs	r3, #0
 8005e0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e0e:	e7a7      	b.n	8005d60 <_printf_i+0x118>
 8005e10:	6923      	ldr	r3, [r4, #16]
 8005e12:	462a      	mov	r2, r5
 8005e14:	4639      	mov	r1, r7
 8005e16:	4630      	mov	r0, r6
 8005e18:	47c0      	blx	r8
 8005e1a:	3001      	adds	r0, #1
 8005e1c:	d0aa      	beq.n	8005d74 <_printf_i+0x12c>
 8005e1e:	6823      	ldr	r3, [r4, #0]
 8005e20:	079b      	lsls	r3, r3, #30
 8005e22:	d413      	bmi.n	8005e4c <_printf_i+0x204>
 8005e24:	68e0      	ldr	r0, [r4, #12]
 8005e26:	9b03      	ldr	r3, [sp, #12]
 8005e28:	4298      	cmp	r0, r3
 8005e2a:	bfb8      	it	lt
 8005e2c:	4618      	movlt	r0, r3
 8005e2e:	e7a3      	b.n	8005d78 <_printf_i+0x130>
 8005e30:	2301      	movs	r3, #1
 8005e32:	464a      	mov	r2, r9
 8005e34:	4639      	mov	r1, r7
 8005e36:	4630      	mov	r0, r6
 8005e38:	47c0      	blx	r8
 8005e3a:	3001      	adds	r0, #1
 8005e3c:	d09a      	beq.n	8005d74 <_printf_i+0x12c>
 8005e3e:	3501      	adds	r5, #1
 8005e40:	68e3      	ldr	r3, [r4, #12]
 8005e42:	9a03      	ldr	r2, [sp, #12]
 8005e44:	1a9b      	subs	r3, r3, r2
 8005e46:	42ab      	cmp	r3, r5
 8005e48:	dcf2      	bgt.n	8005e30 <_printf_i+0x1e8>
 8005e4a:	e7eb      	b.n	8005e24 <_printf_i+0x1dc>
 8005e4c:	2500      	movs	r5, #0
 8005e4e:	f104 0919 	add.w	r9, r4, #25
 8005e52:	e7f5      	b.n	8005e40 <_printf_i+0x1f8>
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d1ac      	bne.n	8005db2 <_printf_i+0x16a>
 8005e58:	7803      	ldrb	r3, [r0, #0]
 8005e5a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e5e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e62:	e76c      	b.n	8005d3e <_printf_i+0xf6>
 8005e64:	08006129 	.word	0x08006129
 8005e68:	0800613a 	.word	0x0800613a

08005e6c <memcpy>:
 8005e6c:	b510      	push	{r4, lr}
 8005e6e:	1e43      	subs	r3, r0, #1
 8005e70:	440a      	add	r2, r1
 8005e72:	4291      	cmp	r1, r2
 8005e74:	d100      	bne.n	8005e78 <memcpy+0xc>
 8005e76:	bd10      	pop	{r4, pc}
 8005e78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e80:	e7f7      	b.n	8005e72 <memcpy+0x6>

08005e82 <memmove>:
 8005e82:	4288      	cmp	r0, r1
 8005e84:	b510      	push	{r4, lr}
 8005e86:	eb01 0302 	add.w	r3, r1, r2
 8005e8a:	d807      	bhi.n	8005e9c <memmove+0x1a>
 8005e8c:	1e42      	subs	r2, r0, #1
 8005e8e:	4299      	cmp	r1, r3
 8005e90:	d00a      	beq.n	8005ea8 <memmove+0x26>
 8005e92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e96:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005e9a:	e7f8      	b.n	8005e8e <memmove+0xc>
 8005e9c:	4283      	cmp	r3, r0
 8005e9e:	d9f5      	bls.n	8005e8c <memmove+0xa>
 8005ea0:	1881      	adds	r1, r0, r2
 8005ea2:	1ad2      	subs	r2, r2, r3
 8005ea4:	42d3      	cmn	r3, r2
 8005ea6:	d100      	bne.n	8005eaa <memmove+0x28>
 8005ea8:	bd10      	pop	{r4, pc}
 8005eaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005eae:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8005eb2:	e7f7      	b.n	8005ea4 <memmove+0x22>

08005eb4 <_free_r>:
 8005eb4:	b538      	push	{r3, r4, r5, lr}
 8005eb6:	4605      	mov	r5, r0
 8005eb8:	2900      	cmp	r1, #0
 8005eba:	d045      	beq.n	8005f48 <_free_r+0x94>
 8005ebc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ec0:	1f0c      	subs	r4, r1, #4
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	bfb8      	it	lt
 8005ec6:	18e4      	addlt	r4, r4, r3
 8005ec8:	f000 f8d2 	bl	8006070 <__malloc_lock>
 8005ecc:	4a1f      	ldr	r2, [pc, #124]	; (8005f4c <_free_r+0x98>)
 8005ece:	6813      	ldr	r3, [r2, #0]
 8005ed0:	4610      	mov	r0, r2
 8005ed2:	b933      	cbnz	r3, 8005ee2 <_free_r+0x2e>
 8005ed4:	6063      	str	r3, [r4, #4]
 8005ed6:	6014      	str	r4, [r2, #0]
 8005ed8:	4628      	mov	r0, r5
 8005eda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ede:	f000 b8c8 	b.w	8006072 <__malloc_unlock>
 8005ee2:	42a3      	cmp	r3, r4
 8005ee4:	d90c      	bls.n	8005f00 <_free_r+0x4c>
 8005ee6:	6821      	ldr	r1, [r4, #0]
 8005ee8:	1862      	adds	r2, r4, r1
 8005eea:	4293      	cmp	r3, r2
 8005eec:	bf04      	itt	eq
 8005eee:	681a      	ldreq	r2, [r3, #0]
 8005ef0:	685b      	ldreq	r3, [r3, #4]
 8005ef2:	6063      	str	r3, [r4, #4]
 8005ef4:	bf04      	itt	eq
 8005ef6:	1852      	addeq	r2, r2, r1
 8005ef8:	6022      	streq	r2, [r4, #0]
 8005efa:	6004      	str	r4, [r0, #0]
 8005efc:	e7ec      	b.n	8005ed8 <_free_r+0x24>
 8005efe:	4613      	mov	r3, r2
 8005f00:	685a      	ldr	r2, [r3, #4]
 8005f02:	b10a      	cbz	r2, 8005f08 <_free_r+0x54>
 8005f04:	42a2      	cmp	r2, r4
 8005f06:	d9fa      	bls.n	8005efe <_free_r+0x4a>
 8005f08:	6819      	ldr	r1, [r3, #0]
 8005f0a:	1858      	adds	r0, r3, r1
 8005f0c:	42a0      	cmp	r0, r4
 8005f0e:	d10b      	bne.n	8005f28 <_free_r+0x74>
 8005f10:	6820      	ldr	r0, [r4, #0]
 8005f12:	4401      	add	r1, r0
 8005f14:	1858      	adds	r0, r3, r1
 8005f16:	4282      	cmp	r2, r0
 8005f18:	6019      	str	r1, [r3, #0]
 8005f1a:	d1dd      	bne.n	8005ed8 <_free_r+0x24>
 8005f1c:	6810      	ldr	r0, [r2, #0]
 8005f1e:	6852      	ldr	r2, [r2, #4]
 8005f20:	605a      	str	r2, [r3, #4]
 8005f22:	4401      	add	r1, r0
 8005f24:	6019      	str	r1, [r3, #0]
 8005f26:	e7d7      	b.n	8005ed8 <_free_r+0x24>
 8005f28:	d902      	bls.n	8005f30 <_free_r+0x7c>
 8005f2a:	230c      	movs	r3, #12
 8005f2c:	602b      	str	r3, [r5, #0]
 8005f2e:	e7d3      	b.n	8005ed8 <_free_r+0x24>
 8005f30:	6820      	ldr	r0, [r4, #0]
 8005f32:	1821      	adds	r1, r4, r0
 8005f34:	428a      	cmp	r2, r1
 8005f36:	bf04      	itt	eq
 8005f38:	6811      	ldreq	r1, [r2, #0]
 8005f3a:	6852      	ldreq	r2, [r2, #4]
 8005f3c:	6062      	str	r2, [r4, #4]
 8005f3e:	bf04      	itt	eq
 8005f40:	1809      	addeq	r1, r1, r0
 8005f42:	6021      	streq	r1, [r4, #0]
 8005f44:	605c      	str	r4, [r3, #4]
 8005f46:	e7c7      	b.n	8005ed8 <_free_r+0x24>
 8005f48:	bd38      	pop	{r3, r4, r5, pc}
 8005f4a:	bf00      	nop
 8005f4c:	200000d4 	.word	0x200000d4

08005f50 <_malloc_r>:
 8005f50:	b570      	push	{r4, r5, r6, lr}
 8005f52:	1ccd      	adds	r5, r1, #3
 8005f54:	f025 0503 	bic.w	r5, r5, #3
 8005f58:	3508      	adds	r5, #8
 8005f5a:	2d0c      	cmp	r5, #12
 8005f5c:	bf38      	it	cc
 8005f5e:	250c      	movcc	r5, #12
 8005f60:	2d00      	cmp	r5, #0
 8005f62:	4606      	mov	r6, r0
 8005f64:	db01      	blt.n	8005f6a <_malloc_r+0x1a>
 8005f66:	42a9      	cmp	r1, r5
 8005f68:	d903      	bls.n	8005f72 <_malloc_r+0x22>
 8005f6a:	230c      	movs	r3, #12
 8005f6c:	6033      	str	r3, [r6, #0]
 8005f6e:	2000      	movs	r0, #0
 8005f70:	bd70      	pop	{r4, r5, r6, pc}
 8005f72:	f000 f87d 	bl	8006070 <__malloc_lock>
 8005f76:	4a21      	ldr	r2, [pc, #132]	; (8005ffc <_malloc_r+0xac>)
 8005f78:	6814      	ldr	r4, [r2, #0]
 8005f7a:	4621      	mov	r1, r4
 8005f7c:	b991      	cbnz	r1, 8005fa4 <_malloc_r+0x54>
 8005f7e:	4c20      	ldr	r4, [pc, #128]	; (8006000 <_malloc_r+0xb0>)
 8005f80:	6823      	ldr	r3, [r4, #0]
 8005f82:	b91b      	cbnz	r3, 8005f8c <_malloc_r+0x3c>
 8005f84:	4630      	mov	r0, r6
 8005f86:	f000 f863 	bl	8006050 <_sbrk_r>
 8005f8a:	6020      	str	r0, [r4, #0]
 8005f8c:	4629      	mov	r1, r5
 8005f8e:	4630      	mov	r0, r6
 8005f90:	f000 f85e 	bl	8006050 <_sbrk_r>
 8005f94:	1c43      	adds	r3, r0, #1
 8005f96:	d124      	bne.n	8005fe2 <_malloc_r+0x92>
 8005f98:	230c      	movs	r3, #12
 8005f9a:	6033      	str	r3, [r6, #0]
 8005f9c:	4630      	mov	r0, r6
 8005f9e:	f000 f868 	bl	8006072 <__malloc_unlock>
 8005fa2:	e7e4      	b.n	8005f6e <_malloc_r+0x1e>
 8005fa4:	680b      	ldr	r3, [r1, #0]
 8005fa6:	1b5b      	subs	r3, r3, r5
 8005fa8:	d418      	bmi.n	8005fdc <_malloc_r+0x8c>
 8005faa:	2b0b      	cmp	r3, #11
 8005fac:	d90f      	bls.n	8005fce <_malloc_r+0x7e>
 8005fae:	600b      	str	r3, [r1, #0]
 8005fb0:	50cd      	str	r5, [r1, r3]
 8005fb2:	18cc      	adds	r4, r1, r3
 8005fb4:	4630      	mov	r0, r6
 8005fb6:	f000 f85c 	bl	8006072 <__malloc_unlock>
 8005fba:	f104 000b 	add.w	r0, r4, #11
 8005fbe:	1d23      	adds	r3, r4, #4
 8005fc0:	f020 0007 	bic.w	r0, r0, #7
 8005fc4:	1ac3      	subs	r3, r0, r3
 8005fc6:	d0d3      	beq.n	8005f70 <_malloc_r+0x20>
 8005fc8:	425a      	negs	r2, r3
 8005fca:	50e2      	str	r2, [r4, r3]
 8005fcc:	e7d0      	b.n	8005f70 <_malloc_r+0x20>
 8005fce:	428c      	cmp	r4, r1
 8005fd0:	684b      	ldr	r3, [r1, #4]
 8005fd2:	bf16      	itet	ne
 8005fd4:	6063      	strne	r3, [r4, #4]
 8005fd6:	6013      	streq	r3, [r2, #0]
 8005fd8:	460c      	movne	r4, r1
 8005fda:	e7eb      	b.n	8005fb4 <_malloc_r+0x64>
 8005fdc:	460c      	mov	r4, r1
 8005fde:	6849      	ldr	r1, [r1, #4]
 8005fe0:	e7cc      	b.n	8005f7c <_malloc_r+0x2c>
 8005fe2:	1cc4      	adds	r4, r0, #3
 8005fe4:	f024 0403 	bic.w	r4, r4, #3
 8005fe8:	42a0      	cmp	r0, r4
 8005fea:	d005      	beq.n	8005ff8 <_malloc_r+0xa8>
 8005fec:	1a21      	subs	r1, r4, r0
 8005fee:	4630      	mov	r0, r6
 8005ff0:	f000 f82e 	bl	8006050 <_sbrk_r>
 8005ff4:	3001      	adds	r0, #1
 8005ff6:	d0cf      	beq.n	8005f98 <_malloc_r+0x48>
 8005ff8:	6025      	str	r5, [r4, #0]
 8005ffa:	e7db      	b.n	8005fb4 <_malloc_r+0x64>
 8005ffc:	200000d4 	.word	0x200000d4
 8006000:	200000d8 	.word	0x200000d8

08006004 <_realloc_r>:
 8006004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006006:	4607      	mov	r7, r0
 8006008:	4614      	mov	r4, r2
 800600a:	460e      	mov	r6, r1
 800600c:	b921      	cbnz	r1, 8006018 <_realloc_r+0x14>
 800600e:	4611      	mov	r1, r2
 8006010:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006014:	f7ff bf9c 	b.w	8005f50 <_malloc_r>
 8006018:	b922      	cbnz	r2, 8006024 <_realloc_r+0x20>
 800601a:	f7ff ff4b 	bl	8005eb4 <_free_r>
 800601e:	4625      	mov	r5, r4
 8006020:	4628      	mov	r0, r5
 8006022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006024:	f000 f826 	bl	8006074 <_malloc_usable_size_r>
 8006028:	42a0      	cmp	r0, r4
 800602a:	d20f      	bcs.n	800604c <_realloc_r+0x48>
 800602c:	4621      	mov	r1, r4
 800602e:	4638      	mov	r0, r7
 8006030:	f7ff ff8e 	bl	8005f50 <_malloc_r>
 8006034:	4605      	mov	r5, r0
 8006036:	2800      	cmp	r0, #0
 8006038:	d0f2      	beq.n	8006020 <_realloc_r+0x1c>
 800603a:	4631      	mov	r1, r6
 800603c:	4622      	mov	r2, r4
 800603e:	f7ff ff15 	bl	8005e6c <memcpy>
 8006042:	4631      	mov	r1, r6
 8006044:	4638      	mov	r0, r7
 8006046:	f7ff ff35 	bl	8005eb4 <_free_r>
 800604a:	e7e9      	b.n	8006020 <_realloc_r+0x1c>
 800604c:	4635      	mov	r5, r6
 800604e:	e7e7      	b.n	8006020 <_realloc_r+0x1c>

08006050 <_sbrk_r>:
 8006050:	b538      	push	{r3, r4, r5, lr}
 8006052:	4c06      	ldr	r4, [pc, #24]	; (800606c <_sbrk_r+0x1c>)
 8006054:	2300      	movs	r3, #0
 8006056:	4605      	mov	r5, r0
 8006058:	4608      	mov	r0, r1
 800605a:	6023      	str	r3, [r4, #0]
 800605c:	f7fb fe24 	bl	8001ca8 <_sbrk>
 8006060:	1c43      	adds	r3, r0, #1
 8006062:	d102      	bne.n	800606a <_sbrk_r+0x1a>
 8006064:	6823      	ldr	r3, [r4, #0]
 8006066:	b103      	cbz	r3, 800606a <_sbrk_r+0x1a>
 8006068:	602b      	str	r3, [r5, #0]
 800606a:	bd38      	pop	{r3, r4, r5, pc}
 800606c:	200002b4 	.word	0x200002b4

08006070 <__malloc_lock>:
 8006070:	4770      	bx	lr

08006072 <__malloc_unlock>:
 8006072:	4770      	bx	lr

08006074 <_malloc_usable_size_r>:
 8006074:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006078:	1f18      	subs	r0, r3, #4
 800607a:	2b00      	cmp	r3, #0
 800607c:	bfbc      	itt	lt
 800607e:	580b      	ldrlt	r3, [r1, r0]
 8006080:	18c0      	addlt	r0, r0, r3
 8006082:	4770      	bx	lr

08006084 <_init>:
 8006084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006086:	bf00      	nop
 8006088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800608a:	bc08      	pop	{r3}
 800608c:	469e      	mov	lr, r3
 800608e:	4770      	bx	lr

08006090 <_fini>:
 8006090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006092:	bf00      	nop
 8006094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006096:	bc08      	pop	{r3}
 8006098:	469e      	mov	lr, r3
 800609a:	4770      	bx	lr
